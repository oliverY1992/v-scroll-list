/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 17);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n// css base code, injected by the css-loader\nmodule.exports = function () {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\tvar result = [];\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tvar item = this[i];\n\t\t\tif (item[2]) {\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\n\t\t\t} else {\n\t\t\t\tresult.push(item[1]);\n\t\t\t}\n\t\t}\n\t\treturn result.join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function (modules, mediaQuery) {\n\t\tif (typeof modules === \"string\") modules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif (typeof id === \"number\") alreadyImportedModules[id] = true;\n\t\t}\n\t\tfor (i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif (typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif (mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if (mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxpc3QiLCJ0b1N0cmluZyIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJpdGVtIiwicHVzaCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUlBO0FBQ0FBLE9BQU9DLE9BQVAsR0FBaUIsWUFBVztBQUMzQixLQUFJQyxPQUFPLEVBQVg7O0FBRUE7QUFDQUEsTUFBS0MsUUFBTCxHQUFnQixTQUFTQSxRQUFULEdBQW9CO0FBQ25DLE1BQUlDLFNBQVMsRUFBYjtBQUNBLE9BQUksSUFBSUMsSUFBSSxDQUFaLEVBQWVBLElBQUksS0FBS0MsTUFBeEIsRUFBZ0NELEdBQWhDLEVBQXFDO0FBQ3BDLE9BQUlFLE9BQU8sS0FBS0YsQ0FBTCxDQUFYO0FBQ0EsT0FBR0UsS0FBSyxDQUFMLENBQUgsRUFBWTtBQUNYSCxXQUFPSSxJQUFQLENBQVksWUFBWUQsS0FBSyxDQUFMLENBQVosR0FBc0IsR0FBdEIsR0FBNEJBLEtBQUssQ0FBTCxDQUE1QixHQUFzQyxHQUFsRDtBQUNBLElBRkQsTUFFTztBQUNOSCxXQUFPSSxJQUFQLENBQVlELEtBQUssQ0FBTCxDQUFaO0FBQ0E7QUFDRDtBQUNELFNBQU9ILE9BQU9LLElBQVAsQ0FBWSxFQUFaLENBQVA7QUFDQSxFQVhEOztBQWFBO0FBQ0FQLE1BQUtHLENBQUwsR0FBUyxVQUFTSyxPQUFULEVBQWtCQyxVQUFsQixFQUE4QjtBQUN0QyxNQUFHLE9BQU9ELE9BQVAsS0FBbUIsUUFBdEIsRUFDQ0EsVUFBVSxDQUFDLENBQUMsSUFBRCxFQUFPQSxPQUFQLEVBQWdCLEVBQWhCLENBQUQsQ0FBVjtBQUNELE1BQUlFLHlCQUF5QixFQUE3QjtBQUNBLE9BQUksSUFBSVAsSUFBSSxDQUFaLEVBQWVBLElBQUksS0FBS0MsTUFBeEIsRUFBZ0NELEdBQWhDLEVBQXFDO0FBQ3BDLE9BQUlRLEtBQUssS0FBS1IsQ0FBTCxFQUFRLENBQVIsQ0FBVDtBQUNBLE9BQUcsT0FBT1EsRUFBUCxLQUFjLFFBQWpCLEVBQ0NELHVCQUF1QkMsRUFBdkIsSUFBNkIsSUFBN0I7QUFDRDtBQUNELE9BQUlSLElBQUksQ0FBUixFQUFXQSxJQUFJSyxRQUFRSixNQUF2QixFQUErQkQsR0FBL0IsRUFBb0M7QUFDbkMsT0FBSUUsT0FBT0csUUFBUUwsQ0FBUixDQUFYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFHLE9BQU9FLEtBQUssQ0FBTCxDQUFQLEtBQW1CLFFBQW5CLElBQStCLENBQUNLLHVCQUF1QkwsS0FBSyxDQUFMLENBQXZCLENBQW5DLEVBQW9FO0FBQ25FLFFBQUdJLGNBQWMsQ0FBQ0osS0FBSyxDQUFMLENBQWxCLEVBQTJCO0FBQzFCQSxVQUFLLENBQUwsSUFBVUksVUFBVjtBQUNBLEtBRkQsTUFFTyxJQUFHQSxVQUFILEVBQWU7QUFDckJKLFVBQUssQ0FBTCxJQUFVLE1BQU1BLEtBQUssQ0FBTCxDQUFOLEdBQWdCLFNBQWhCLEdBQTRCSSxVQUE1QixHQUF5QyxHQUFuRDtBQUNBO0FBQ0RULFNBQUtNLElBQUwsQ0FBVUQsSUFBVjtBQUNBO0FBQ0Q7QUFDRCxFQXhCRDtBQXlCQSxRQUFPTCxJQUFQO0FBQ0EsQ0E1Q0QiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxpc3QgPSBbXTtcclxuXHJcblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgaXRlbVsxXSArIFwifVwiKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdH07XHJcblxyXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xyXG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXHJcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcclxuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdHJldHVybiBsaXN0O1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBzY29wZUlkLFxuICBjc3NNb2R1bGVzXG4pIHtcbiAgdmFyIGVzTW9kdWxlXG4gIHZhciBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVzTW9kdWxlID0gcmF3U2NyaXB0RXhwb3J0c1xuICAgIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAoY29tcGlsZWRUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gY29tcGlsZWRUZW1wbGF0ZS5yZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICAvLyBpbmplY3QgY3NzTW9kdWxlc1xuICBpZiAoY3NzTW9kdWxlcykge1xuICAgIHZhciBjb21wdXRlZCA9IG9wdGlvbnMuY29tcHV0ZWQgfHwgKG9wdGlvbnMuY29tcHV0ZWQgPSB7fSlcbiAgICBPYmplY3Qua2V5cyhjc3NNb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBjc3NNb2R1bGVzW2tleV1cbiAgICAgIGNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVzTW9kdWxlOiBlc01vZHVsZSxcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(8)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = { css: css, media: media, sourceMap: sourceMap }\n    if (!newStyles[id]) {\n      part.id = parentId + ':0'\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      part.id = parentId + ':' + newStyles[id].parts.length\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n  var hasSSR = styleElement != null\n\n  // if in production mode and style is already provided by SSR,\n  // simply do nothing.\n  if (hasSSR && isProduction) {\n    return noop\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = styleElement || createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (!hasSSR) {\n    update(obj)\n  }\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * Vue.js v2.1.10\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n\n\n/*  */\n\n/**\n * Convert a value to a string that is actually rendered.\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toString(val) {\n  return val == null ? '' : (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' ? JSON.stringify(val, null, 2) : String(val);\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber(val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n;\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap(str, expectsLowerCase) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase ? function (val) {\n    return map[val.toLowerCase()];\n  } : function (val) {\n    return map[val];\n  };\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove$1(arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive(value) {\n  return typeof value === 'string' || typeof value === 'number';\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind$1(fn, ctx) {\n  function boundFn(a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn;\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend(to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject(obj) {\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject(arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res;\n}\n\n/**\n * Perform no operation.\n */\nfunction noop() {}\n\n/**\n * Always return false.\n */\nvar no = function no() {\n  return false;\n};\n\n/**\n * Return same value\n */\nvar identity = function identity(_) {\n  return _;\n};\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys(modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || []);\n  }, []).join(',');\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual(a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    return JSON.stringify(a) === JSON.stringify(b);\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b);\n  } else {\n    return false;\n  }\n}\n\nfunction looseIndexOf(arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/*  */\n\nvar config = {\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * List of asset types that a component can own.\n   */\n  _assetTypes: ['component', 'directive', 'filter'],\n\n  /**\n   * List of lifecycle hooks.\n   */\n  _lifecycleHooks: ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'],\n\n  /**\n   * Max circular updates allowed in a scheduler flush cycle.\n   */\n  _maxUpdateCount: 100\n};\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Define a property.\n */\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath(path) {\n  if (bailRE.test(path)) {\n    return;\n  } else {\n    var segments = path.split('.');\n    return function (obj) {\n      for (var i = 0; i < segments.length; i++) {\n        if (!obj) {\n          return;\n        }\n        obj = obj[segments[i]];\n      }\n      return obj;\n    };\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function isServerRendering() {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer;\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative(Ctor) {\n  return (/native code/.test(Ctor.toString())\n  );\n}\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function logError(err) {\n      console.error(err);\n    };\n    timerFunc = function timerFunc() {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) {\n        setTimeout(noop);\n      }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]')) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function timerFunc() {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function timerFunc() {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick(cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        cb.call(ctx);\n      }\n      if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve) {\n        _resolve = resolve;\n      });\n    }\n  };\n}();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    function Set() {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has(key) {\n      return this.set[key] === true;\n    };\n    Set.prototype.add = function add(key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear() {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }();\n}\n\nvar warn = noop;\nvar formatComponentName;\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n\n  warn = function warn(msg, vm) {\n    if (hasConsole && !config.silent) {\n      console.error(\"[Vue warn]: \" + msg + \" \" + (vm ? formatLocation(formatComponentName(vm)) : ''));\n    }\n  };\n\n  formatComponentName = function formatComponentName(vm) {\n    if (vm.$root === vm) {\n      return 'root instance';\n    }\n    var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;\n    return (name ? \"component <\" + name + \">\" : \"anonymous component\") + (vm._isVue && vm.$options.__file ? \" at \" + vm.$options.__file : '');\n  };\n\n  var formatLocation = function formatLocation(str) {\n    if (str === 'anonymous component') {\n      str += \" - use the \\\"name\\\" option for better debugging messages.\";\n    }\n    return \"\\n(found in \" + str + \")\";\n  };\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub(sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub(sub) {\n  remove$1(this.subs, sub);\n};\n\nDep.prototype.depend = function depend() {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify() {\n  // stablize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget(_target) {\n  if (Dep.target) {\n    targetStack.push(Dep.target);\n  }\n  Dep.target = _target;\n}\n\nfunction popTarget() {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) {\n      ob.observeArray(inserted);\n    }\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk(obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray(items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe(value, asRootData) {\n  if (!isObject(value)) {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1(obj, key, val, customSetter) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || newVal !== newVal && value !== value) {\n        return;\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set$1(obj, key, val) {\n  if (Array.isArray(obj)) {\n    obj.length = Math.max(obj.length, key);\n    obj.splice(key, 1, val);\n    return val;\n  }\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  var ob = obj.__ob__;\n  if (obj._isVue || ob && ob.vmCount) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');\n    return;\n  }\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del(obj, key) {\n  var ob = obj.__ob__;\n  if (obj._isVue || ob && ob.vmCount) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');\n    return;\n  }\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  if (!ob) {\n    return;\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray(value) {\n  for (var e = void 0, i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\"option \\\"\" + key + \"\\\" can only be used during instance \" + 'creation with the `new` keyword.');\n    }\n    return defaultStrat(parent, child);\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData(to, from) {\n  if (!from) {\n    return to;\n  }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set$1(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\nfunction mergeHook(parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;\n}\n\nconfig._lifecycleHooks.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, childVal) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) {\n    return parentVal;\n  }\n  if (!parentVal) {\n    return childVal;\n  }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) {\n    return parentVal;\n  }\n  if (!parentVal) {\n    return childVal;\n  }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents(options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps(options) {\n  var props = options.props;\n  if (!props) {\n    return;\n  }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val) ? val : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives(options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions(parent, child, vm) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = typeof extendsFrom === 'function' ? mergeOptions(parent, extendsFrom.options, vm) : mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      if (mixin.prototype instanceof Vue$3) {\n        mixin = mixin.options;\n      }\n      parent = mergeOptions(parent, mixin, vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) {\n    return assets[id];\n  }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) {\n    return assets[camelizedId];\n  }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) {\n    return assets[PascalCaseId];\n  }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\n/*  */\n\nfunction validateProp(key, propOptions, propsData, vm) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value;\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue(vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined;\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + key + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm[key] !== undefined) {\n    return vm[key];\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && prop.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp(prop, name, value, vm, absent) {\n  if (prop.required && absent) {\n    warn('Missing required prop: \"' + name + '\"', vm);\n    return;\n  }\n  if (value == null && !prop.required) {\n    return;\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn('Invalid prop: type check failed for prop \"' + name + '\".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);\n    return;\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn('Invalid prop: custom validator check failed for prop \"' + name + '\".', vm);\n    }\n  }\n}\n\n/**\n * Assert the type of a value\n */\nfunction assertType(value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (expectedType === 'String') {\n    valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === (expectedType = 'string');\n  } else if (expectedType === 'Number') {\n    valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === (expectedType = 'number');\n  } else if (expectedType === 'Boolean') {\n    valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === (expectedType = 'boolean');\n  } else if (expectedType === 'Function') {\n    valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === (expectedType = 'function');\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType(fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match && match[1];\n}\n\nfunction isType(type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type);\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true;\n    }\n  }\n  /* istanbul ignore next */\n  return false;\n}\n\nvar util = Object.freeze({\n  defineReactive: defineReactive$$1,\n  _toString: _toString,\n  toNumber: toNumber,\n  makeMap: makeMap,\n  isBuiltInTag: isBuiltInTag,\n  remove: remove$1,\n  hasOwn: hasOwn,\n  isPrimitive: isPrimitive,\n  cached: cached,\n  camelize: camelize,\n  capitalize: capitalize,\n  hyphenate: hyphenate,\n  bind: bind$1,\n  toArray: toArray,\n  extend: extend,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  toObject: toObject,\n  noop: noop,\n  no: no,\n  identity: identity,\n  genStaticKeys: genStaticKeys,\n  looseEqual: looseEqual,\n  looseIndexOf: looseIndexOf,\n  isReserved: isReserved,\n  def: def,\n  parsePath: parsePath,\n  hasProto: hasProto,\n  inBrowser: inBrowser,\n  UA: UA,\n  isIE: isIE,\n  isIE9: isIE9,\n  isEdge: isEdge,\n  isAndroid: isAndroid,\n  isIOS: isIOS,\n  isServerRendering: isServerRendering,\n  devtools: devtools,\n  nextTick: nextTick,\n  get _Set() {\n    return _Set;\n  },\n  mergeOptions: mergeOptions,\n  resolveAsset: resolveAsset,\n  get warn() {\n    return warn;\n  },\n  get formatComponentName() {\n    return formatComponentName;\n  },\n  validateProp: validateProp\n});\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function warnNonPresent(target, key) {\n    warn(\"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" + \"referenced during render. Make sure to declare reactive data \" + \"properties in the data option.\", target);\n  };\n\n  var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set(target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn(\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key);\n          return false;\n        } else {\n          target[key] = value;\n          return true;\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has(target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed;\n    }\n  };\n\n  var getHandler = {\n    get: function get(target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key];\n    }\n  };\n\n  initProxy = function initProxy(vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode(tag, data, children, text, elm, context, componentOptions) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance;\n};\n\nObject.defineProperties(VNode.prototype, prototypeAccessors);\n\nvar createEmptyVNode = function createEmptyVNode() {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node;\n};\n\nfunction createTextVNode(val) {\n  return new VNode(undefined, undefined, undefined, String(val));\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode(vnode) {\n  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions);\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isCloned = true;\n  return cloned;\n}\n\nfunction cloneVNodes(vnodes) {\n  var res = new Array(vnodes.length);\n  for (var i = 0; i < vnodes.length; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res;\n}\n\n/*  */\n\nvar hooks = { init: init, prepatch: prepatch, insert: insert, destroy: destroy$1 };\nvar hooksToMerge = Object.keys(hooks);\n\nfunction createComponent(Ctor, data, context, children, tag) {\n  if (!Ctor) {\n    return;\n  }\n\n  var baseCtor = context.$options._base;\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(\"Invalid Component definition: \" + String(Ctor), context);\n    }\n    return;\n  }\n\n  // async component\n  if (!Ctor.cid) {\n    if (Ctor.resolved) {\n      Ctor = Ctor.resolved;\n    } else {\n      Ctor = resolveAsyncComponent(Ctor, baseCtor, function () {\n        // it's ok to queue this on every render because\n        // $forceUpdate is buffered by the scheduler.\n        context.$forceUpdate();\n      });\n      if (!Ctor) {\n        // return nothing if this is indeed an async component\n        // wait for the callback to trigger parent update.\n        return;\n      }\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // extract props\n  var propsData = extractProps(data, Ctor);\n\n  // functional component\n  if (Ctor.options.functional) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children);\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (Ctor.options.abstract) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\"vue-component-\" + Ctor.cid + (name ? \"-\" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children });\n  return vnode;\n}\n\nfunction createFunctionalComponent(Ctor, propsData, data, context, children) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (propOptions) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData);\n    }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function h(a, b, c, d) {\n    return createElement(_context, a, b, c, d, true);\n  };\n  var vnode = Ctor.options.render.call(null, h, {\n    props: props,\n    data: data,\n    parent: context,\n    children: children,\n    slots: function slots() {\n      return resolveSlots(children, context);\n    }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode;\n}\n\nfunction createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't\nparent, // activeInstance in lifecycle state\nparentElm, refElm) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (inlineTemplate) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options);\n}\n\nfunction init(vnode, hydrating, parentElm, refElm) {\n  if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n    var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);\n    child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n  } else if (vnode.data.keepAlive) {\n    // kept-alive components, treat as a patch\n    var mountedNode = vnode; // work around flow\n    prepatch(mountedNode, mountedNode);\n  }\n}\n\nfunction prepatch(oldVnode, vnode) {\n  var options = vnode.componentOptions;\n  var child = vnode.componentInstance = oldVnode.componentInstance;\n  child._updateFromParent(options.propsData, // updated props\n  options.listeners, // updated listeners\n  vnode, // new parent vnode\n  options.children // new children\n  );\n}\n\nfunction insert(vnode) {\n  if (!vnode.componentInstance._isMounted) {\n    vnode.componentInstance._isMounted = true;\n    callHook(vnode.componentInstance, 'mounted');\n  }\n  if (vnode.data.keepAlive) {\n    vnode.componentInstance._inactive = false;\n    callHook(vnode.componentInstance, 'activated');\n  }\n}\n\nfunction destroy$1(vnode) {\n  if (!vnode.componentInstance._isDestroyed) {\n    if (!vnode.data.keepAlive) {\n      vnode.componentInstance.$destroy();\n    } else {\n      vnode.componentInstance._inactive = true;\n      callHook(vnode.componentInstance, 'deactivated');\n    }\n  }\n}\n\nfunction resolveAsyncComponent(factory, baseCtor, cb) {\n  if (factory.requested) {\n    // pool callbacks\n    factory.pendingCallbacks.push(cb);\n  } else {\n    factory.requested = true;\n    var cbs = factory.pendingCallbacks = [cb];\n    var sync = true;\n\n    var resolve = function resolve(res) {\n      if (isObject(res)) {\n        res = baseCtor.extend(res);\n      }\n      // cache resolved\n      factory.resolved = res;\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        for (var i = 0, l = cbs.length; i < l; i++) {\n          cbs[i](res);\n        }\n      }\n    };\n\n    var reject = function reject(reason) {\n      process.env.NODE_ENV !== 'production' && warn(\"Failed to resolve async component: \" + String(factory) + (reason ? \"\\nReason: \" + reason : ''));\n    };\n\n    var res = factory(resolve, reject);\n\n    // handle promise\n    if (res && typeof res.then === 'function' && !factory.resolved) {\n      res.then(resolve, reject);\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.resolved;\n  }\n}\n\nfunction extractProps(data, Ctor) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (!propOptions) {\n    return;\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  var domProps = data.domProps;\n  if (attrs || props || domProps) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey) || checkProp(res, domProps, key, altKey);\n    }\n  }\n  return res;\n}\n\nfunction checkProp(res, hash, key, altKey, preserve) {\n  if (hash) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true;\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction mergeHooks(data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = hooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1(one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  };\n}\n\n/*  */\n\nfunction mergeVNodeHook(def, hookKey, hook, key) {\n  key = key + hookKey;\n  var injectedHash = def.__injected || (def.__injected = {});\n  if (!injectedHash[key]) {\n    injectedHash[key] = true;\n    var oldHook = def[hookKey];\n    if (oldHook) {\n      def[hookKey] = function () {\n        oldHook.apply(this, arguments);\n        hook.apply(this, arguments);\n      };\n    } else {\n      def[hookKey] = hook;\n    }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var once = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once,\n    capture: capture\n  };\n});\n\nfunction createEventHandle(fn) {\n  var handle = {\n    fn: fn,\n    invoker: function invoker() {\n      var arguments$1 = arguments;\n\n      var fn = handle.fn;\n      if (Array.isArray(fn)) {\n        for (var i = 0; i < fn.length; i++) {\n          fn[i].apply(null, arguments$1);\n        }\n      } else {\n        fn.apply(null, arguments);\n      }\n    }\n  };\n  return handle;\n}\n\nfunction updateListeners(on, oldOn, add, remove$$1, vm) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (!cur) {\n      process.env.NODE_ENV !== 'production' && warn(\"Invalid handler for event \\\"\" + event.name + \"\\\": got \" + String(cur), vm);\n    } else if (!old) {\n      if (!cur.invoker) {\n        cur = on[name] = createEventHandle(cur);\n      }\n      add(event.name, cur.invoker, event.once, event.capture);\n    } else if (cur !== old) {\n      old.fn = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (!on[name]) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name].invoker, event.capture);\n    }\n  }\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// nomralization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren(children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children);\n    }\n  }\n  return children;\n}\n\n// 2. When the children contains constrcuts that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren(children) {\n  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;\n}\n\nfunction normalizeArrayChildren(children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (c == null || typeof c === 'boolean') {\n      continue;\n    }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + \"_\" + i));\n    } else if (isPrimitive(c)) {\n      if (last && last.text) {\n        last.text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (c.text && last && last.text) {\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (c.tag && c.key == null && nestedIndex != null) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res;\n}\n\n/*  */\n\nfunction getFirstComponentChild(children) {\n  return children && children.filter(function (c) {\n    return c && c.componentOptions;\n  })[0];\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement(context, tag, data, children, normalizationType, alwaysNormalize) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (alwaysNormalize) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType);\n}\n\nfunction _createElement(context, tag, data, children, normalizationType) {\n  if (data && data.__ob__) {\n    process.env.NODE_ENV !== 'production' && warn(\"Avoid using observed data object as vnode data: \" + JSON.stringify(data) + \"\\n\" + 'Always create fresh vnode data objects in each render!', context);\n    return createEmptyVNode();\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode();\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) && typeof children[0] === 'function') {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);\n    } else if (Ctor = resolveAsset(context.$options, 'components', tag)) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(tag, data, children, undefined, undefined, context);\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (vnode) {\n    if (ns) {\n      applyNS(vnode, ns);\n    }\n    return vnode;\n  } else {\n    return createEmptyVNode();\n  }\n}\n\nfunction applyNS(vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return;\n  }\n  if (vnode.children) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (child.tag && !child.ns) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction initRender(vm) {\n  vm.$vnode = null; // the placeholder node in parent tree\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$options._parentVnode;\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = {};\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) {\n    return createElement(vm, a, b, c, d, false);\n  };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) {\n    return createElement(vm, a, b, c, d, true);\n  };\n}\n\nfunction renderMixin(Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this);\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    if (_parentVnode && _parentVnode.data.scopedSlots) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots;\n    }\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (config.errorHandler) {\n        config.errorHandler.call(null, e, vm);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn(\"Error when rendering \" + formatComponentName(vm) + \":\");\n        }\n        throw e;\n      }\n      // return previous vnode to prevent render error causing blank component\n      vnode = vm._vnode;\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode;\n  };\n\n  // toString for mustaches\n  Vue.prototype._s = _toString;\n  // convert text to vnode\n  Vue.prototype._v = createTextVNode;\n  // number conversion\n  Vue.prototype._n = toNumber;\n  // empty vnode\n  Vue.prototype._e = createEmptyVNode;\n  // loose equal\n  Vue.prototype._q = looseEqual;\n  // loose indexOf\n  Vue.prototype._i = looseIndexOf;\n\n  // render static tree by index\n  Vue.prototype._m = function renderStatic(index, isInFor) {\n    var tree = this._staticTrees[index];\n    // if has already-rendered static tree and not inside v-for,\n    // we can reuse the same tree by doing a shallow clone.\n    if (tree && !isInFor) {\n      return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);\n    }\n    // otherwise, render a fresh tree.\n    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);\n    markStatic(tree, \"__static__\" + index, false);\n    return tree;\n  };\n\n  // mark node as static (v-once)\n  Vue.prototype._o = function markOnce(tree, index, key) {\n    markStatic(tree, \"__once__\" + index + (key ? \"_\" + key : \"\"), true);\n    return tree;\n  };\n\n  function markStatic(tree, key, isOnce) {\n    if (Array.isArray(tree)) {\n      for (var i = 0; i < tree.length; i++) {\n        if (tree[i] && typeof tree[i] !== 'string') {\n          markStaticNode(tree[i], key + \"_\" + i, isOnce);\n        }\n      }\n    } else {\n      markStaticNode(tree, key, isOnce);\n    }\n  }\n\n  function markStaticNode(node, key, isOnce) {\n    node.isStatic = true;\n    node.key = key;\n    node.isOnce = isOnce;\n  }\n\n  // filter resolution helper\n  Vue.prototype._f = function resolveFilter(id) {\n    return resolveAsset(this.$options, 'filters', id, true) || identity;\n  };\n\n  // render v-for\n  Vue.prototype._l = function renderList(val, render) {\n    var ret, i, l, keys, key;\n    if (Array.isArray(val) || typeof val === 'string') {\n      ret = new Array(val.length);\n      for (i = 0, l = val.length; i < l; i++) {\n        ret[i] = render(val[i], i);\n      }\n    } else if (typeof val === 'number') {\n      ret = new Array(val);\n      for (i = 0; i < val; i++) {\n        ret[i] = render(i + 1, i);\n      }\n    } else if (isObject(val)) {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n    return ret;\n  };\n\n  // renderSlot\n  Vue.prototype._t = function (name, fallback, props, bindObject) {\n    var scopedSlotFn = this.$scopedSlots[name];\n    if (scopedSlotFn) {\n      // scoped slot\n      props = props || {};\n      if (bindObject) {\n        extend(props, bindObject);\n      }\n      return scopedSlotFn(props) || fallback;\n    } else {\n      var slotNodes = this.$slots[name];\n      // warn duplicate slot usage\n      if (slotNodes && process.env.NODE_ENV !== 'production') {\n        slotNodes._rendered && warn(\"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" + \"- this will likely cause render errors.\", this);\n        slotNodes._rendered = true;\n      }\n      return slotNodes || fallback;\n    }\n  };\n\n  // apply v-bind object\n  Vue.prototype._b = function bindProps(data, tag, value, asProp) {\n    if (value) {\n      if (!isObject(value)) {\n        process.env.NODE_ENV !== 'production' && warn('v-bind without argument expects an Object or Array value', this);\n      } else {\n        if (Array.isArray(value)) {\n          value = toObject(value);\n        }\n        for (var key in value) {\n          if (key === 'class' || key === 'style') {\n            data[key] = value[key];\n          } else {\n            var type = data.attrs && data.attrs.type;\n            var hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});\n            hash[key] = value[key];\n          }\n        }\n      }\n    }\n    return data;\n  };\n\n  // check v-on keyCodes\n  Vue.prototype._k = function checkKeyCodes(eventKeyCode, key, builtInAlias) {\n    var keyCodes = config.keyCodes[key] || builtInAlias;\n    if (Array.isArray(keyCodes)) {\n      return keyCodes.indexOf(eventKeyCode) === -1;\n    } else {\n      return keyCodes !== eventKeyCode;\n    }\n  };\n}\n\nfunction resolveSlots(children, context) {\n  var slots = {};\n  if (!children) {\n    return slots;\n  }\n  var defaultSlot = [];\n  var name, child;\n  for (var i = 0, l = children.length; i < l; i++) {\n    child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) && child.data && (name = child.data.slot)) {\n      var slot = slots[name] || (slots[name] = []);\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore single whitespace\n  if (defaultSlot.length && !(defaultSlot.length === 1 && (defaultSlot[0].text === ' ' || defaultSlot[0].isComment))) {\n    slots.default = defaultSlot;\n  }\n  return slots;\n}\n\n/*  */\n\nfunction initEvents(vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add$1(event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$2(event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners(vm, listeners, oldListeners) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add$1, remove$2, vm);\n}\n\nfunction eventsMixin(Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;(vm._events[event] || (vm._events[event] = [])).push(fn);\n    // optimize hook:event cost by using a boolean flag marked at registration\n    // instead of a hash lookup\n    if (hookRE.test(event)) {\n      vm._hasHookEvent = true;\n    }\n    return vm;\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on() {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm;\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm;\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm;\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return vm;\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm;\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle(vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin(Vue) {\n  Vue.prototype._mount = function (el, hydrating) {\n    var vm = this;\n    vm.$el = el;\n    if (!vm.$options.render) {\n      vm.$options.render = createEmptyVNode;\n      if (process.env.NODE_ENV !== 'production') {\n        /* istanbul ignore if */\n        if (vm.$options.template && vm.$options.template.charAt(0) !== '#') {\n          warn('You are using the runtime-only build of Vue where the template ' + 'option is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);\n        } else {\n          warn('Failed to mount component: template or render function not defined.', vm);\n        }\n      }\n    }\n    callHook(vm, 'beforeMount');\n    vm._watcher = new Watcher(vm, function updateComponent() {\n      vm._update(vm._render(), hydrating);\n    }, noop);\n    hydrating = false;\n    // manually mounted instance, call mounted on self\n    // mounted is called for render-created child components in its inserted hook\n    if (vm.$vnode == null) {\n      vm._isMounted = true;\n      callHook(vm, 'mounted');\n    }\n    return vm;\n  };\n\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */\n      , vm.$options._parentElm, vm.$options._refElm);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype._updateFromParent = function (propsData, listeners, parentVnode, renderChildren) {\n    var vm = this;\n    var hasChildren = !!(vm.$options._renderChildren || renderChildren);\n    vm.$options._parentVnode = parentVnode;\n    vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n    if (vm._vnode) {\n      // update child tree's parent\n      vm._vnode.parent = parentVnode;\n    }\n    vm.$options._renderChildren = renderChildren;\n    // update props\n    if (propsData && vm.$options.props) {\n      observerState.shouldConvert = false;\n      if (process.env.NODE_ENV !== 'production') {\n        observerState.isSettingProps = true;\n      }\n      var propKeys = vm.$options._propKeys || [];\n      for (var i = 0; i < propKeys.length; i++) {\n        var key = propKeys[i];\n        vm[key] = validateProp(key, vm.$options.props, propsData, vm);\n      }\n      observerState.shouldConvert = true;\n      if (process.env.NODE_ENV !== 'production') {\n        observerState.isSettingProps = false;\n      }\n      vm.$options.propsData = propsData;\n    }\n    // update listeners\n    if (listeners) {\n      var oldListeners = vm.$options._parentListeners;\n      vm.$options._parentListeners = listeners;\n      updateComponentListeners(vm, listeners, oldListeners);\n    }\n    // resolve slots + force update if has children\n    if (hasChildren) {\n      vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n      vm.$forceUpdate();\n    }\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return;\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove$1(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n  };\n}\n\nfunction callHook(vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      handlers[i].call(vm);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\nvar queue = [];\nvar has$1 = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState() {\n  queue.length = 0;\n  has$1 = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue() {\n  flushing = true;\n  var watcher, id, vm;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) {\n    return a.id - b.id;\n  });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has$1[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has$1[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop ' + (watcher.user ? \"in watcher with expression \\\"\" + watcher.expression + \"\\\"\" : \"in a component render function.\"), watcher.vm);\n        break;\n      }\n    }\n  }\n\n  // call updated hooks\n  index = queue.length;\n  while (index--) {\n    watcher = queue[index];\n    vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n\n  resetSchedulerState();\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher(watcher) {\n  var id = watcher.id;\n  if (has$1[id] == null) {\n    has$1[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i >= 0 && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(Math.max(i, index) + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher(vm, expOrFn, cb, options) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production' ? expOrFn.toString() : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\"Failed watching path: \\\"\" + expOrFn + \"\\\" \" + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);\n    }\n  }\n  this.value = this.lazy ? undefined : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get() {\n  pushTarget(this);\n  var value = this.getter.call(this.vm, this.vm);\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value;\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep(dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps() {\n  var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update() {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run() {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated.\n    isObject(value) || this.deep) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          /* istanbul ignore else */\n          if (config.errorHandler) {\n            config.errorHandler.call(null, e, this.vm);\n          } else {\n            process.env.NODE_ENV !== 'production' && warn(\"Error in watcher \\\"\" + this.expression + \"\\\"\", this.vm);\n            throw e;\n          }\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate() {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend() {\n  var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown() {\n  var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove$1(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse(val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse(val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if (!isA && !isObject(val) || !Object.isExtensible(val)) {\n    return;\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return;\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) {\n      _traverse(val[i], seen);\n    }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      _traverse(val[keys[i]], seen);\n    }\n  }\n}\n\n/*  */\n\nfunction initState(vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) {\n    initProps(vm, opts.props);\n  }\n  if (opts.methods) {\n    initMethods(vm, opts.methods);\n  }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) {\n    initComputed(vm, opts.computed);\n  }\n  if (opts.watch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nvar isReservedProp = { key: 1, ref: 1, slot: 1 };\n\nfunction initProps(vm, props) {\n  var propsData = vm.$options.propsData || {};\n  var keys = vm.$options._propKeys = Object.keys(props);\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function loop(i) {\n    var key = keys[i];\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedProp[key]) {\n        warn(\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\", vm);\n      }\n      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm), function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\"Avoid mutating a prop directly since the value will be \" + \"overwritten whenever the parent component re-renders. \" + \"Instead, use a data or computed property based on the prop's \" + \"value. Prop being mutated: \\\"\" + key + \"\\\"\", vm);\n        }\n      });\n    } else {\n      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm));\n    }\n  };\n\n  for (var i = 0; i < keys.length; i++) {\n    loop(i);\n  }observerState.shouldConvert = true;\n}\n\nfunction initData(vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function' ? data.call(vm) : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn('data functions should return an object:\\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\"The data property \\\"\" + keys[i] + \"\\\" is already declared as a prop. \" + \"Use prop default value instead.\", vm);\n    } else {\n      proxy(vm, keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nvar computedSharedDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction initComputed(vm, computed) {\n  for (var key in computed) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && key in vm) {\n      warn(\"existing instance property \\\"\" + key + \"\\\" will be \" + \"overwritten by a computed property with the same name.\", vm);\n    }\n    var userDef = computed[key];\n    if (typeof userDef === 'function') {\n      computedSharedDefinition.get = makeComputedGetter(userDef, vm);\n      computedSharedDefinition.set = noop;\n    } else {\n      computedSharedDefinition.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, vm) : bind$1(userDef.get, vm) : noop;\n      computedSharedDefinition.set = userDef.set ? bind$1(userDef.set, vm) : noop;\n    }\n    Object.defineProperty(vm, key, computedSharedDefinition);\n  }\n}\n\nfunction makeComputedGetter(getter, owner) {\n  var watcher = new Watcher(owner, getter, noop, {\n    lazy: true\n  });\n  return function computedGetter() {\n    if (watcher.dirty) {\n      watcher.evaluate();\n    }\n    if (Dep.target) {\n      watcher.depend();\n    }\n    return watcher.value;\n  };\n}\n\nfunction initMethods(vm, methods) {\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind$1(methods[key], vm);\n    if (process.env.NODE_ENV !== 'production' && methods[key] == null) {\n      warn(\"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" + \"Did you reference the function correctly?\", vm);\n    }\n  }\n}\n\nfunction initWatch(vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher(vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin(Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () {\n    return this._data;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n\n  Vue.prototype.$set = set$1;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n}\n\nfunction proxy(vm, key) {\n  if (!isReserved(key)) {\n    Object.defineProperty(vm, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter() {\n        return vm._data[key];\n      },\n      set: function proxySetter(val) {\n        vm._data[key] = val;\n      }\n    });\n  }\n}\n\n/*  */\n\nvar uid = 0;\n\nfunction initMixin(Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid++;\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initState(vm);\n    callHook(vm, 'created');\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent(vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions(Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = Ctor.super.options;\n    var cachedSuperOptions = Ctor.superOptions;\n    var extendOptions = Ctor.extendOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed\n      Ctor.superOptions = superOptions;\n      extendOptions.render = options.render;\n      extendOptions.staticRenderFns = options.staticRenderFns;\n      extendOptions._scopeId = options._scopeId;\n      options = Ctor.options = mergeOptions(superOptions, extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options;\n}\n\nfunction Vue$3(options) {\n  if (process.env.NODE_ENV !== 'production' && !(this instanceof Vue$3)) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse(Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n}\n\n/*  */\n\nfunction initMixin$1(Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n  };\n}\n\n/*  */\n\nfunction initExtend(Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId];\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');\n      }\n    }\n    var Sub = function VueComponent(options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub;\n  };\n}\n\n/*  */\n\nfunction initAssetRegisters(Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName(opts) {\n  return opts && (opts.Ctor.options.name || opts.tag);\n}\n\nfunction matches(pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1;\n  } else {\n    return pattern.test(name);\n  }\n}\n\nfunction pruneCache(cache, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cachedNode);\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry(vnode) {\n  if (vnode) {\n    if (!vnode.componentInstance._inactive) {\n      callHook(vnode.componentInstance, 'deactivated');\n    }\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created() {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed() {\n    var this$1 = this;\n\n    for (var key in this.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include(val) {\n      pruneCache(this.cache, function (name) {\n        return matches(val, name);\n      });\n    },\n    exclude: function exclude(val) {\n      pruneCache(this.cache, function (name) {\n        return !matches(val, name);\n      });\n    }\n  },\n\n  render: function render() {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {\n        return vnode;\n      }\n      var key = vnode.key == null\n      // same constructor may get registered as different local components\n      // so cid alone is not enough (#3269)\n      ? componentOptions.Ctor.cid + (componentOptions.tag ? \"::\" + componentOptions.tag : '') : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode;\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI(Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () {\n    return config;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn('Do not replace the Vue.config object, set individual fields instead.');\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n  Vue.util = util;\n  Vue.set = set$1;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  config._assetTypes.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nVue$3.version = '2.1.10';\n\n/*  */\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function mustUseProp(tag, type, attr) {\n  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function isXlink(name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';\n};\n\nvar getXlinkProp = function getXlinkProp(name) {\n  return isXlink(name) ? name.slice(6, name.length) : '';\n};\n\nvar isFalsyAttrValue = function isFalsyAttrValue(val) {\n  return val == null || val === false;\n};\n\n/*  */\n\nfunction genClassForVnode(vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (childNode.componentInstance) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (parentNode = parentNode.parent) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data);\n}\n\nfunction mergeClassData(child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: child.class ? [child.class, parent.class] : parent.class\n  };\n}\n\nfunction genClassFromData(data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (staticClass || dynamicClass) {\n    return concat(staticClass, stringifyClass(dynamicClass));\n  }\n  /* istanbul ignore next */\n  return '';\n}\n\nfunction concat(a, b) {\n  return a ? b ? a + ' ' + b : a : b || '';\n}\n\nfunction stringifyClass(value) {\n  var res = '';\n  if (!value) {\n    return res;\n  }\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (value[i]) {\n        if (stringified = stringifyClass(value[i])) {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1);\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) {\n        res += key + ' ';\n      }\n    }\n    return res.slice(0, -1);\n  }\n  /* istanbul ignore next */\n  return res;\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template');\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,' + 'font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);\n\nvar isPreTag = function isPreTag(tag) {\n  return tag === 'pre';\n};\n\nvar isReservedTag = function isReservedTag(tag) {\n  return isHTMLTag(tag) || isSVG(tag);\n};\n\nfunction getTagNamespace(tag) {\n  if (isSVG(tag)) {\n    return 'svg';\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math';\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement(tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true;\n  }\n  if (isReservedTag(tag)) {\n    return false;\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag];\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n  } else {\n    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n      return document.createElement('div');\n    }\n  }\n  return el;\n}\n\n/*  */\n\nfunction createElement$1(tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm;\n  }\n  if (vnode.data && vnode.data.attrs && 'multiple' in vnode.data.attrs) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm;\n}\n\nfunction createElementNS(namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName);\n}\n\nfunction createTextNode(text) {\n  return document.createTextNode(text);\n}\n\nfunction createComment(text) {\n  return document.createComment(text);\n}\n\nfunction insertBefore(parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild(node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild(node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode(node) {\n  return node.parentNode;\n}\n\nfunction nextSibling(node) {\n  return node.nextSibling;\n}\n\nfunction tagName(node) {\n  return node.tagName;\n}\n\nfunction setTextContent(node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute(node, key, val) {\n  node.setAttribute(key, val);\n}\n\nvar nodeOps = Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create(_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update(oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy(vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef(vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) {\n    return;\n  }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove$1(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks$1 = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction isUndef(s) {\n  return s == null;\n}\n\nfunction isDef(s) {\n  return s != null;\n}\n\nfunction sameVnode(vnode1, vnode2) {\n  return vnode1.key === vnode2.key && vnode1.tag === vnode2.tag && vnode1.isComment === vnode2.isComment && !vnode1.data === !vnode2.data;\n}\n\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) {\n      map[key] = i;\n    }\n  }\n  return map;\n}\n\nfunction createPatchFunction(backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks$1.length; ++i) {\n    cbs[hooks$1[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (modules[j][hooks$1[i]] !== undefined) {\n        cbs[hooks$1[i]].push(modules[j][hooks$1[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt(elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);\n  }\n\n  function createRmCb(childElm, listeners) {\n    function remove$$1() {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1;\n  }\n\n  function removeNode(el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (parent) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return;\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.', vnode.context);\n        }\n      }\n      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (vnode.isComment) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isReactivated) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true;\n      }\n    }\n  }\n\n  function initComponent(vnode, insertedVnodeQueue) {\n    if (vnode.data.pendingInsert) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break;\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert(parent, elm, ref) {\n    if (parent) {\n      if (ref) {\n        nodeOps.insertBefore(parent, elm, ref);\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren(vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable(vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag);\n  }\n\n  function invokeCreateHooks(vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (i.create) {\n        i.create(emptyNode, vnode);\n      }\n      if (i.insert) {\n        insertedVnodeQueue.push(vnode);\n      }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope(vnode) {\n    var i;\n    if (isDef(i = vnode.context) && isDef(i = i.$options._scopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n    if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook(vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) {\n        i(vnode);\n      }\n      for (i = 0; i < cbs.destroy.length; ++i) {\n        cbs.destroy[i](vnode);\n      }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else {\n          // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook(vnode, rm) {\n    if (rm || isDef(vnode.data)) {\n      var listeners = cbs.remove.length + 1;\n      if (!rm) {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      } else {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) {\n        // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) {\n        // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) {\n          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n        }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) {\n          // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return;\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (vnode.isStatic && oldVnode.isStatic && vnode.key === oldVnode.key && (vnode.isCloned || vnode.isOnce)) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return;\n    }\n    var i;\n    var data = vnode.data;\n    var hasData = isDef(data);\n    if (hasData && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (hasData && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) {\n        cbs.update[i](oldVnode, vnode);\n      }\n      if (isDef(i = data.hook) && isDef(i = i.update)) {\n        i(oldVnode, vnode);\n      }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) {\n          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n        }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) {\n          nodeOps.setTextContent(elm, '');\n        }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (hasData) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {\n        i(oldVnode, vnode);\n      }\n    }\n  }\n\n  function invokeInsertHook(vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (initial && vnode.parent) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate(elm, vnode, insertedVnodeQueue) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false;\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) {\n        i(vnode, true /* hydrating */);\n      }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true;\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break;\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined' && !bailed) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false;\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break;\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true;\n  }\n\n  function assertNodeMatch(node, vnode) {\n    if (vnode.tag) {\n      return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3);\n    }\n  }\n\n  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (!vnode) {\n      if (oldVnode) {\n        invokeDestroyHook(oldVnode);\n      }\n      return;\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (!oldVnode) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute('server-rendered')) {\n            oldVnode.removeAttribute('server-rendered');\n            hydrating = true;\n          }\n          if (hydrating) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode;\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(vnode, insertedVnodeQueue,\n        // extremely rare edge case: do not insert if old element is in a\n        // leaving transition. Only happens when combining transition +\n        // keep-alive + HOCs. (#4590)\n        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));\n\n        if (vnode.parent) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (parentElm$1 !== null) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm;\n  };\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives(vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives(oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update(oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function callInsert() {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert, 'dir-insert');\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    }, 'dir-postpatch');\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1(dirs, vm) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res;\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res;\n}\n\nfunction getRawDirName(dir) {\n  return dir.rawName || dir.name + \".\" + Object.keys(dir.modifiers || {}).join('.');\n}\n\nfunction callHook$1(dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n  }\n}\n\nvar baseModules = [ref, directives];\n\n/*  */\n\nfunction updateAttrs(oldVnode, vnode) {\n  if (!oldVnode.data.attrs && !vnode.data.attrs) {\n    return;\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (attrs.__ob__) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (attrs[key] == null) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr(el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass(oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (!data.staticClass && !data.class && (!oldData || !oldData.staticClass && !oldData.class)) {\n    return;\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (transitionClass) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar target$1;\n\nfunction add$2(event, _handler, once, capture) {\n  if (once) {\n    var oldHandler = _handler;\n    var _target = target$1; // save current target element in closure\n    _handler = function handler(ev) {\n      remove$3(event, _handler, capture, _target);\n      arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);\n    };\n  }\n  target$1.addEventListener(event, _handler, capture);\n}\n\nfunction remove$3(event, handler, capture, _target) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners(oldVnode, vnode) {\n  if (!oldVnode.data.on && !vnode.data.on) {\n    return;\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  updateListeners(on, oldOn, add$2, remove$3, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps(oldVnode, vnode) {\n  if (!oldVnode.data.domProps && !vnode.data.domProps) {\n    return;\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (props.__ob__) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (props[key] == null) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) {\n        vnode.children.length = 0;\n      }\n      if (cur === oldProps[key]) {\n        continue;\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = cur == null ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue(elm, vnode, checkVal) {\n  return !elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(vnode, checkVal));\n}\n\nfunction isDirty(elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal;\n}\n\nfunction isInputChanged(vnode, newVal) {\n  var value = vnode.elm.value;\n  var modifiers = vnode.elm._vModifiers; // injected by v-model runtime\n  if (modifiers && modifiers.number || vnode.elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal);\n  }\n  if (modifiers && modifiers.trim) {\n    return value.trim() !== newVal.trim();\n  }\n  return value !== newVal;\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res;\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData(data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle ? extend(data.staticStyle, style) : style;\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding(bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle);\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle);\n  }\n  return bindingStyle;\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle(vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if (styleData = normalizeStyleData(vnode.data)) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while (parentNode = parentNode.parent) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res;\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function setProp(el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    el.style[normalize(name)] = val;\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && prop in testEl.style) {\n    return prop;\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed;\n    }\n  }\n});\n\nfunction updateStyle(oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (!data.staticStyle && !data.style && !oldData.staticStyle && !oldData.style) {\n    return;\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldVnode.data.staticStyle;\n  var oldStyleBinding = oldVnode.data.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  vnode.data.style = style.__ob__ ? extend({}, style) : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (newStyle[name] == null) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass(el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !cls.trim()) {\n    return;\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) {\n        return el.classList.add(c);\n      });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = ' ' + el.getAttribute('class') + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass(el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !cls.trim()) {\n    return;\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) {\n        return el.classList.remove(c);\n      });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = ' ' + el.getAttribute('class') + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;\n\nfunction nextFrame(fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass(el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass(el, cls) {\n  if (el._transitionClasses) {\n    remove$1(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds(el, expectedType, cb) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) {\n    return cb();\n  }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function end() {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function onEnd(e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo(el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitioneDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitioneDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;\n    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;\n  }\n  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  };\n}\n\nfunction getTimeout(delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i]);\n  }));\n}\n\nfunction toMs(s) {\n  return Number(s.slice(0, -1)) * 1000;\n}\n\n/*  */\n\nfunction enter(vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (el._leaveCb) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (!data) {\n    return;\n  }\n\n  /* istanbul ignore if */\n  if (el._enterCb || el.nodeType !== 1) {\n    return;\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return;\n  }\n\n  var startClass = isAppear ? appearClass : enterClass;\n  var activeClass = isAppear ? appearActiveClass : enterActiveClass;\n  var toClass = isAppear ? appearToClass : enterToClass;\n  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;\n  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;\n  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;\n  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = enterHook &&\n  // enterHook may be a bound method which exposes\n  // the length of original fn as _length\n  (enterHook._length || enterHook.length) > 1;\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    }, 'transition-insert');\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        whenTransitionEnds(el, type, cb);\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave(vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (el._enterCb) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (!data) {\n    return rm();\n  }\n\n  /* istanbul ignore if */\n  if (el._leaveCb || el.nodeType !== 1) {\n    return;\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = leave &&\n  // leave hook may be a bound method which exposes\n  // the length of original fn as _length\n  (leave._length || leave.length) > 1;\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave() {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return;\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          whenTransitionEnds(el, type, cb);\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\nfunction resolveTransition(def$$1) {\n  if (!def$$1) {\n    return;\n  }\n  /* istanbul ignore else */\n  if ((typeof def$$1 === 'undefined' ? 'undefined' : _typeof(def$$1)) === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res;\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1);\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: name + \"-enter\",\n    leaveClass: name + \"-leave\",\n    appearClass: name + \"-enter\",\n    enterToClass: name + \"-enter-to\",\n    leaveToClass: name + \"-leave-to\",\n    appearToClass: name + \"-enter-to\",\n    enterActiveClass: name + \"-enter-active\",\n    leaveActiveClass: name + \"-leave-active\",\n    appearActiveClass: name + \"-enter-active\"\n  };\n});\n\nfunction once(fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn();\n    }\n  };\n}\n\nfunction _enter(_, vnode) {\n  if (!vnode.data.show) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove(vnode, rm) {\n    /* istanbul ignore else */\n    if (!vnode.data.show) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [attrs, klass, events, domProps, style, transition];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch$1 = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\nvar modelableTagRE = /^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model = {\n  inserted: function inserted(el, binding, vnode) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!modelableTagRE.test(vnode.tag)) {\n        warn(\"v-model is not supported on element type: <\" + vnode.tag + \">. \" + 'If you are working with contenteditable, it\\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.', vnode.context);\n      }\n    }\n    if (vnode.tag === 'select') {\n      var cb = function cb() {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated(el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple ? binding.value.some(function (v) {\n        return hasNoMatchingOption(v, el.options);\n      }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected(el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\"<select multiple v-model=\\\"\" + binding.expression + \"\\\"> \" + \"expects an Array value for its binding, but got \" + Object.prototype.toString.call(value).slice(8, -1), vm);\n    return;\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return;\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption(value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getValue(option) {\n  return '_value' in option ? option._value : option.value;\n}\n\nfunction onCompositionStart(e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd(e) {\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger(el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode(vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;\n}\n\nvar show = {\n  bind: function bind(el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update(el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) {\n      return;\n    }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild(vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children));\n  } else {\n    return vnode;\n  }\n}\n\nfunction extractTransitionData(comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1].fn;\n  }\n  return data;\n}\n\nfunction placeholder(h, rawChild) {\n  return (/\\d-keep-alive$/.test(rawChild.tag) ? h('keep-alive') : null\n  );\n}\n\nfunction hasParentTransition(vnode) {\n  while (vnode = vnode.parent) {\n    if (vnode.data.transition) {\n      return true;\n    }\n  }\n}\n\nfunction isSameChild(child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag;\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render(h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return;\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) {\n      return c.tag;\n    });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return;\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {\n      warn('invalid <transition> mode: ' + mode, this.$parent);\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild;\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild;\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild);\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + this._uid + \"-\";\n    var key = child.key = child.key == null ? id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) {\n      return d.name === 'show';\n    })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        }, key);\n        return placeholder(h, rawChild);\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function performLeave() {\n          delayedLeave();\n        };\n        mergeVNodeHook(data, 'afterEnter', performLeave, key);\n        mergeVNodeHook(data, 'enterCancelled', performLeave, key);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n          delayedLeave = leave;\n        }, key);\n      }\n    }\n\n    return rawChild;\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final disired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render(h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? opts.Ctor.options.name || opts.tag : c.tag;\n          warn(\"<transition-group> children must be keyed: <\" + name + \">\");\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children);\n  },\n\n  beforeUpdate: function beforeUpdate() {\n    // force removing pass\n    this.__patch__(this._vnode, this.kept, false, // hydrating\n    true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated() {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || (this.name || 'v') + '-move';\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return;\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var f = document.body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove(el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false;\n      }\n      if (this._hasMove != null) {\n        return this._hasMove;\n      }\n      addTransitionClass(el, moveClass);\n      var info = getTransitionInfo(el);\n      removeTransitionClass(el, moveClass);\n      return this._hasMove = info.hasTransform;\n    }\n  }\n};\n\nfunction callPendingCbs(c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition(c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation(c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.isUnknownElement = isUnknownElement;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.mustUseProp = mustUseProp;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch$1 : noop;\n\n// wrap mount\nVue$3.prototype.$mount = function (el, hydrating) {\n  el = el && inBrowser ? query(el) : undefined;\n  return this._mount(el, hydrating);\n};\n\nif (process.env.NODE_ENV !== 'production' && inBrowser && typeof console !== 'undefined') {\n  console[console.info ? 'info' : 'log'](\"You are running Vue in development mode.\\n\" + \"Make sure to turn on production mode when deploying for production.\\n\" + \"See more tips at https://vuejs.org/guide/deployment.html\");\n}\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && !isEdge && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode(content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0;\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar decoder;\n\nfunction decode(html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent;\n}\n\n/*  */\n\nvar isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr', true);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source', true);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track', true);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n// attr value double quotes\n/\"([^\"]*)\"+/.source,\n// attr value, single quotes\n/'([^']*)'+/.source,\n// attr value, no quotes\n/([^\\s\"'=<>`]+)/.source];\nvar attribute = new RegExp('^\\\\s*' + singleAttrIdentifier.source + '(?:\\\\s*(' + singleAttrAssign.source + ')' + '\\\\s*(?:' + singleAttrValues.join('|') + '))?');\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isScriptOrStyle = makeMap('script,style', true);\nvar reCache = {};\n\nvar ltRE = /&lt;/g;\nvar gtRE = /&gt;/g;\nvar nlRE = /&#10;/g;\nvar ampRE = /&amp;/g;\nvar quoteRE = /&quot;/g;\n\nfunction decodeAttr(value, shouldDecodeNewlines) {\n  if (shouldDecodeNewlines) {\n    value = value.replace(nlRE, '\\n');\n  }\n  return value.replace(ltRE, '<').replace(gtRE, '>').replace(ampRE, '&').replace(quoteRE, '\"');\n}\n\nfunction parseHTML(html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a script or style element\n    if (!lastTag || !isScriptOrStyle(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue;\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue;\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue;\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue;\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue;\n        }\n      }\n\n      var text = void 0,\n          rest$1 = void 0,\n          next = void 0;\n      if (textEnd > 0) {\n        rest$1 = html.slice(textEnd);\n        while (!endTag.test(rest$1) && !startTagOpen.test(rest$1) && !comment.test(rest$1) && !conditionalComment.test(rest$1)) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) {\n            break;\n          }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {\n          text = text.replace(/<!--([\\s\\S]*?)-->/g, '$1').replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return '';\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last && options.chars) {\n      options.chars(html);\n      break;\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance(n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag() {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match;\n      }\n    }\n  }\n\n  function handleStartTag(match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') {\n          delete args[3];\n        }\n        if (args[4] === '') {\n          delete args[4];\n        }\n        if (args[5] === '') {\n          delete args[5];\n        }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, options.shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n      unarySlash = '';\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag(tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) {\n      start = index;\n    }\n    if (end == null) {\n      end = index;\n    }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break;\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction parseFilters(exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) {\n        inSingle = false;\n      }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) {\n        inDouble = false;\n      }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) {\n        inTemplateString = false;\n      }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) {\n        inRegex = false;\n      }\n    } else if (c === 0x7C && // pipe\n    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22:\n          inDouble = true;break; // \"\n        case 0x27:\n          inSingle = true;break; // '\n        case 0x60:\n          inTemplateString = true;break; // `\n        case 0x28:\n          paren++;break; // (\n        case 0x29:\n          paren--;break; // )\n        case 0x5B:\n          square++;break; // [\n        case 0x5D:\n          square--;break; // ]\n        case 0x7B:\n          curly++;break; // {\n        case 0x7D:\n          curly--;break; // }\n      }\n      if (c === 0x2f) {\n        // /\n        var j = i - 1;\n        var p = void 0;\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') {\n            break;\n          }\n        }\n        if (!p || !/[\\w$]/.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter() {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression;\n}\n\nfunction wrapFilter(exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return \"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\";\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return \"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args;\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g');\n});\n\nfunction parseText(text, delimiters) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while (match = tagRE.exec(text)) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push(\"_s(\" + exp + \")\");\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+');\n}\n\n/*  */\n\nfunction baseWarn(msg) {\n  console.error(\"[Vue parser]: \" + msg);\n}\n\nfunction pluckModuleFunction(modules, key) {\n  return modules ? modules.map(function (m) {\n    return m[key];\n  }).filter(function (_) {\n    return _;\n  }) : [];\n}\n\nfunction addProp(el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr(el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective(el, name, rawName, value, arg, modifiers) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler(el, name, value, modifiers, important) {\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr(el, name, getStatic) {\n  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue);\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue);\n    }\n  }\n}\n\nfunction getAndRemoveAttr(el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break;\n      }\n    }\n  }\n  return val;\n}\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nfunction parseModel(val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    };\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  };\n}\n\nfunction next() {\n  return str.charCodeAt(++index$1);\n}\n\nfunction eof() {\n  return index$1 >= len;\n}\n\nfunction isStringStart(chr) {\n  return chr === 0x22 || chr === 0x27;\n}\n\nfunction parseBracket(chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue;\n    }\n    if (chr === 0x5B) {\n      inBracket++;\n    }\n    if (chr === 0x5D) {\n      inBracket--;\n    }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break;\n    }\n  }\n}\n\nfunction parseString(chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break;\n    }\n  }\n}\n\n/*  */\n\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\nvar bindRE = /^:|^v-bind:/;\nvar onRE = /^@|^v-on:/;\nvar argRE = /:(.*)$/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$1;\nvar platformGetTagNamespace;\nvar platformMustUseProp;\nvar platformIsPreTag;\nvar preTransforms;\nvar transforms;\nvar postTransforms;\nvar delimiters;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse(template, options) {\n  warn$1 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n  parseHTML(template, {\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start(tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$1('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + \"<\" + tag + \">\" + ', as they will not be parsed.');\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints(el) {\n        if (process.env.NODE_ENV !== 'production' && !warned) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warned = true;\n            warn$1(\"Cannot use <\" + el.tag + \"> as component root element because it may \" + 'contain multiple nodes:\\n' + template);\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warned = true;\n            warn$1('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements:\\n' + template);\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production' && !warned) {\n          warned = true;\n          warn$1(\"Component template should contain exactly one root element:\" + \"\\n\\n\" + template + \"\\n\\n\" + \"If you are using v-if on multiple elements, \" + \"use v-else-if to chain them instead.\");\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) {\n          // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || 'default';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end() {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ') {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      // check pre state\n      if (element.pre) {\n        inVPre = false;\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = false;\n      }\n    },\n\n    chars: function chars(text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production' && !warned && text === template) {\n          warned = true;\n          warn$1('Component template requires a root element, rather than just text:\\n\\n' + template);\n        }\n        return;\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {\n        return;\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim() ? decodeHTMLCached(text)\n      // only preserve whitespace if its not right after a starting tag\n      : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || children[children.length - 1].text !== ' ') {\n          currentParent.children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root;\n}\n\nfunction processPre(el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs(el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey(el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$1(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef(el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor(el) {\n  var exp;\n  if (exp = getAndRemoveAttr(el, 'v-for')) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      process.env.NODE_ENV !== 'production' && warn$1(\"Invalid v-for expression: \" + exp);\n      return;\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf(el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions(el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\"v-\" + (el.elseif ? 'else-if=\"' + el.elseif + '\"' : 'else') + \" \" + \"used on element <\" + el.tag + \"> without corresponding v-if.\");\n  }\n}\n\nfunction findPrevElement(children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i];\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$1(\"text \\\"\" + children[i].text.trim() + \"\\\" between v-if and v-else(-if) \" + \"will be ignored.\");\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition(el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce(el) {\n  var once = getAndRemoveAttr(el, 'v-once');\n  if (once != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot(el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$1(\"`key` does not work on <slot> because slots are abstract outlets \" + \"and can possibly expand into multiple elements. \" + \"Use the key on a wrapping element instead.\");\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent(el) {\n  var binding;\n  if (binding = getBindingAttr(el, 'is')) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs(el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, arg, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) {\n        // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') {\n              name = 'innerHTML';\n            }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) {\n        // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers);\n      } else {\n        // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        if (argMatch && (arg = argMatch[1])) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$1(name + \"=\\\"\" + value + \"\\\": \" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.');\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor(el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction parseModifiers(name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) {\n      ret[m.slice(1)] = true;\n    });\n    return ret;\n  }\n}\n\nfunction makeAttrsMap(attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (process.env.NODE_ENV !== 'production' && map[attrs[i].name] && !isIE) {\n      warn$1('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map;\n}\n\nfunction isForbiddenTag(el) {\n  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug(attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res;\n}\n\nfunction checkForAliasModel(el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$1(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\">: \" + \"You are binding v-model directly to a v-for iteration alias. \" + \"This will not be able to modify the v-for source array because \" + \"writing to the alias is like modifying a function local variable. \" + \"Consider using an array of objects and use v-model on an object property instead.\");\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize(root, options) {\n  if (!root) {\n    return;\n  }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1(keys) {\n  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));\n}\n\nfunction markStatic(node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {\n      return;\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots(node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {\n      node.staticRoot = true;\n      return;\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks(conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic(node) {\n  if (node.type === 2) {\n    // expression\n    return false;\n  }\n  if (node.type === 3) {\n    // text\n    return true;\n  }\n  return !!(node.pre || !node.hasBindings && // no dynamic bindings\n  !node.if && !node.for && // not v-if or v-for or v-else\n  !isBuiltInTag(node.tag) && // not a built-in\n  isPlatformReservedTag(node.tag) && // not a component\n  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));\n}\n\nfunction isDirectChildOfTemplateFor(node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false;\n    }\n    if (node.for) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: 'if($event.target !== $event.currentTarget)return;',\n  ctrl: 'if(!$event.ctrlKey)return;',\n  shift: 'if(!$event.shiftKey)return;',\n  alt: 'if(!$event.altKey)return;',\n  meta: 'if(!$event.metaKey)return;'\n};\n\nfunction genHandlers(events, native) {\n  var res = native ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + genHandler(name, events[name]) + \",\";\n  }\n  return res.slice(0, -1) + '}';\n}\n\nfunction genHandler(name, handler) {\n  if (!handler) {\n    return 'function(){}';\n  } else if (Array.isArray(handler)) {\n    return \"[\" + handler.map(function (handler) {\n      return genHandler(name, handler);\n    }).join(',') + \"]\";\n  } else if (!handler.modifiers) {\n    return fnExpRE.test(handler.value) || simplePathRE.test(handler.value) ? handler.value : \"function($event){\" + handler.value + \"}\";\n  } else {\n    var code = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        code += modifierCode[key];\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code = genKeyFilter(keys) + code;\n    }\n    var handlerCode = simplePathRE.test(handler.value) ? handler.value + '($event)' : handler.value;\n    return 'function($event){' + code + handlerCode + '}';\n  }\n}\n\nfunction genKeyFilter(keys) {\n  return \"if(\" + keys.map(genFilterCode).join('&&') + \")return;\";\n}\n\nfunction genFilterCode(key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return \"$event.keyCode!==\" + keyVal;\n  }\n  var alias = keyCodes[key];\n  return \"_k($event.keyCode,\" + JSON.stringify(key) + (alias ? ',' + JSON.stringify(alias) : '') + \")\";\n}\n\n/*  */\n\nfunction bind$2(el, dir) {\n  el.wrapData = function (code) {\n    return \"_b(\" + code + \",'\" + el.tag + \"',\" + dir.value + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\";\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$2,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$2;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate(ast, options) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$2 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: \"with(this){return \" + code + \"}\",\n    staticRenderFns: currentStaticRenderFns\n  };\n}\n\nfunction genElement(el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el);\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el);\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el);\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el);\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0';\n  } else if (el.tag === 'slot') {\n    return genSlot(el);\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + el.tag + \"'\" + (data ? \",\" + data : '') + (children ? \",\" + children : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code;\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic(el) {\n  el.staticProcessed = true;\n  staticRenderFns.push(\"with(this){return \" + genElement(el) + \"}\");\n  return \"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\";\n}\n\n// v-once\nfunction genOnce(el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el);\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break;\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && warn$2(\"v-once can only be used inside v-for that is keyed. \");\n      return genElement(el);\n    }\n    return \"_o(\" + genElement(el) + \",\" + onceCount++ + (key ? \",\" + key : \"\") + \")\";\n  } else {\n    return genStatic(el);\n  }\n}\n\nfunction genIf(el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice());\n}\n\nfunction genIfConditions(conditions) {\n  if (!conditions.length) {\n    return '_e()';\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return \"(\" + condition.exp + \")?\" + genTernaryExp(condition.block) + \":\" + genIfConditions(conditions);\n  } else {\n    return \"\" + genTernaryExp(condition.block);\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp(el) {\n    return el.once ? genOnce(el) : genElement(el);\n  }\n}\n\nfunction genFor(el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? \",\" + el.iterator1 : '';\n  var iterator2 = el.iterator2 ? \",\" + el.iterator2 : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" + \"function(\" + alias + iterator1 + iterator2 + \"){\" + \"return \" + genElement(el) + '})';\n}\n\nfunction genData(el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) {\n    data += dirs + ',';\n  }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + el.key + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + el.ref + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + el.tag + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + genProps(el.attrs) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + genProps(el.props) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += genHandlers(el.events) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += genHandlers(el.nativeEvents, true) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + el.slotTarget + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += genScopedSlots(el.scopedSlots) + \",\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data;\n}\n\nfunction genDirectives(el) {\n  var dirs = el.directives;\n  if (!dirs) {\n    return;\n  }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$2);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + dir.name + \"\\\",rawName:\\\"\" + dir.rawName + \"\\\"\" + (dir.value ? \",value:(\" + dir.value + \"),expression:\" + JSON.stringify(dir.value) : '') + (dir.arg ? \",arg:\\\"\" + dir.arg + \"\\\"\" : '') + (dir.modifiers ? \",modifiers:\" + JSON.stringify(dir.modifiers) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']';\n  }\n}\n\nfunction genInlineTemplate(el) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (el.children.length > 1 || ast.type !== 1)) {\n    warn$2('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return \"inlineTemplate:{render:function(){\" + inlineRenderFns.render + \"},staticRenderFns:[\" + inlineRenderFns.staticRenderFns.map(function (code) {\n      return \"function(){\" + code + \"}\";\n    }).join(',') + \"]}\";\n  }\n}\n\nfunction genScopedSlots(slots) {\n  return \"scopedSlots:{\" + Object.keys(slots).map(function (key) {\n    return genScopedSlot(key, slots[key]);\n  }).join(',') + \"}\";\n}\n\nfunction genScopedSlot(key, el) {\n  return key + \":function(\" + String(el.attrsMap.scope) + \"){\" + \"return \" + (el.tag === 'template' ? genChildren(el) || 'void 0' : genElement(el)) + \"}\";\n}\n\nfunction genChildren(el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {\n      return genElement(el$1);\n    }\n    var normalizationType = getNormalizationType(children);\n    return \"[\" + children.map(genNode).join(',') + \"]\" + (checkSkip ? normalizationType ? \",\" + normalizationType : '' : '');\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType(children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue;\n    }\n    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {\n      return needsNormalization(c.block);\n    })) {\n      res = 2;\n      break;\n    }\n    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {\n      return maybeComponent(c.block);\n    })) {\n      res = 1;\n    }\n  }\n  return res;\n}\n\nfunction needsNormalization(el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';\n}\n\nfunction maybeComponent(el) {\n  return !isPlatformReservedTag$1(el.tag);\n}\n\nfunction genNode(node) {\n  if (node.type === 1) {\n    return genElement(node);\n  } else {\n    return genText(node);\n  }\n}\n\nfunction genText(text) {\n  return \"_v(\" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()\n  : transformSpecialNewlines(JSON.stringify(text.text))) + \")\";\n}\n\nfunction genSlot(el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? \",\" + children : '');\n  var attrs = el.attrs && \"{\" + el.attrs.map(function (a) {\n    return camelize(a.name) + \":\" + a.value;\n  }).join(',') + \"}\";\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')';\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent(componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return \"_c(\" + componentName + \",\" + genData(el) + (children ? \",\" + children : '') + \")\";\n}\n\nfunction genProps(props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + prop.name + \"\\\":\" + transformSpecialNewlines(prop.value) + \",\";\n  }\n  return res.slice(0, -1);\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines(text) {\n  return text.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n}\n\n/*  */\n\n/**\n * Compile a template.\n */\nfunction compile$1(template, options) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  };\n}\n\n/*  */\n\n// operators like typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\\\b|\\\\b') + '\\\\b');\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors(ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors;\n}\n\nfunction checkNode(node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, \"v-for=\\\"\" + value + \"\\\"\", errors);\n          } else {\n            checkExpression(value, name + \"=\\\"\" + value + \"\\\"\", errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkFor(node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier(ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push(\"- invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + text);\n  }\n}\n\nfunction checkExpression(exp, text, errors) {\n  try {\n    new Function(\"return \" + exp);\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\"- avoid using JavaScript keyword as property name: \" + \"\\\"\" + keywordMatch[0] + \"\\\" in expression \" + text);\n    } else {\n      errors.push(\"- invalid expression: \" + text);\n    }\n  }\n}\n\n/*  */\n\nfunction transformNode(el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\"class=\\\"\" + staticClass + \"\\\": \" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.');\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1(el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + el.staticClass + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + el.classBinding + \",\";\n  }\n  return data;\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1(el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\"style=\\\"\" + staticStyle + \"\\\": \" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.');\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2(el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + el.staticStyle + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + el.styleBinding + \"),\";\n  }\n  return data;\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [klass$1, style$1];\n\n/*  */\n\nvar warn$3;\n\nfunction model$1(el, dir, _warn) {\n  warn$3 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n  if (process.env.NODE_ENV !== 'production') {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$3(\"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" + \"v-model does not support dynamic input types. Use v-if branches instead.\");\n    }\n  }\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else {\n    genDefaultModel(el, value, modifiers);\n  }\n  // ensure runtime directive metadata\n  return true;\n}\n\nfunction genCheckboxModel(el, value, modifiers) {\n  if (process.env.NODE_ENV !== 'production' && el.attrsMap.checked != null) {\n    warn$3(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\" checked>:\\n\" + \"inline checked attributes will be ignored when using v-model. \" + 'Declare initial values in the component\\'s data option instead.');\n  }\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked', \"Array.isArray(\" + value + \")\" + \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (trueValueBinding === 'true' ? \":(\" + value + \")\" : \":_q(\" + value + \",\" + trueValueBinding + \")\"));\n  addHandler(el, 'click', \"var $$a=\" + value + \",\" + '$$el=$event.target,' + \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" + 'if(Array.isArray($$a)){' + \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" + '$$i=_i($$a,$$v);' + \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" + \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" + \"}else{\" + value + \"=$$c}\", null, true);\n}\n\nfunction genRadioModel(el, value, modifiers) {\n  if (process.env.NODE_ENV !== 'production' && el.attrsMap.checked != null) {\n    warn$3(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\" checked>:\\n\" + \"inline checked attributes will be ignored when using v-model. \" + 'Declare initial values in the component\\'s data option instead.');\n  }\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? \"_n(\" + valueBinding + \")\" : valueBinding;\n  addProp(el, 'checked', \"_q(\" + value + \",\" + valueBinding + \")\");\n  addHandler(el, 'click', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genDefaultModel(el, value, modifiers) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (el.tag === 'input' && el.attrsMap.value) {\n      warn$3(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\" value=\\\"\" + el.attrsMap.value + \"\\\">:\\n\" + 'inline value attributes will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n    }\n    if (el.tag === 'textarea' && el.children.length) {\n      warn$3(\"<textarea v-model=\\\"\" + value + \"\\\">:\\n\" + 'inline content inside <textarea> will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n    }\n  }\n\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var event = lazy || isIE && type === 'range' ? 'change' : 'input';\n  var needCompositionGuard = !lazy && type !== 'range';\n  var isNative = el.tag === 'input' || el.tag === 'textarea';\n\n  var valueExpression = isNative ? \"$event.target.value\" + (trim ? '.trim()' : '') : trim ? \"(typeof $event === 'string' ? $event.trim() : $event)\" : \"$event\";\n  valueExpression = number || type === 'number' ? \"_n(\" + valueExpression + \")\" : valueExpression;\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (isNative && needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  // inputs with type=\"file\" are read only and setting the input's\n  // value will throw an error.\n  if (process.env.NODE_ENV !== 'production' && type === 'file') {\n    warn$3(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" + \"File inputs are read only. Use a v-on:change listener instead.\");\n  }\n\n  addProp(el, 'value', isNative ? \"_s(\" + value + \")\" : \"(\" + value + \")\");\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\nfunction genSelect(el, value, modifiers) {\n  if (process.env.NODE_ENV !== 'production') {\n    el.children.some(checkOptionWarning);\n  }\n\n  var number = modifiers && modifiers.number;\n  var assignment = \"Array.prototype.filter\" + \".call($event.target.options,function(o){return o.selected})\" + \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" + \"return \" + (number ? '_n(val)' : 'val') + \"})\" + (el.attrsMap.multiple == null ? '[0]' : '');\n\n  var code = genAssignmentCode(value, assignment);\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction checkOptionWarning(option) {\n  if (option.type === 1 && option.tag === 'option' && option.attrsMap.selected != null) {\n    warn$3(\"<select v-model=\\\"\" + option.parent.attrsMap['v-model'] + \"\\\">:\\n\" + 'inline selected attributes on <option> will be ignored when using v-model. ' + 'Declare initial values in the component\\'s data option instead.');\n    return true;\n  }\n  return false;\n}\n\nfunction genAssignmentCode(value, assignment) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return value + \"=\" + assignment;\n  } else {\n    return \"var $$exp = \" + modelRs.exp + \", $$idx = \" + modelRs.idx + \";\" + \"if (!Array.isArray($$exp)){\" + value + \"=\" + assignment + \"}\" + \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\";\n  }\n}\n\n/*  */\n\nfunction text(el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', \"_s(\" + dir.value + \")\");\n  }\n}\n\n/*  */\n\nfunction html(el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', \"_s(\" + dir.value + \")\");\n  }\n}\n\nvar directives$1 = {\n  model: model$1,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar cache = Object.create(null);\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  staticKeys: genStaticKeys(modules$1),\n  directives: directives$1,\n  isReservedTag: isReservedTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  getTagNamespace: getTagNamespace,\n  isPreTag: isPreTag\n};\n\nfunction compile$$1(template, options) {\n  options = options ? extend(extend({}, baseOptions), options) : baseOptions;\n  return compile$1(template, options);\n}\n\nfunction compileToFunctions(template, options, vm) {\n  var _warn = options && options.warn || warn;\n  // detect possible CSP restriction\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      new Function('return 1');\n    } catch (e) {\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        _warn('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');\n      }\n    }\n  }\n  var key = options && options.delimiters ? String(options.delimiters) + template : template;\n  if (cache[key]) {\n    return cache[key];\n  }\n  var res = {};\n  var compiled = compile$$1(template, options);\n  res.render = makeFunction(compiled.render);\n  var l = compiled.staticRenderFns.length;\n  res.staticRenderFns = new Array(l);\n  for (var i = 0; i < l; i++) {\n    res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i]);\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (res.render === noop || res.staticRenderFns.some(function (fn) {\n      return fn === noop;\n    })) {\n      _warn(\"failed to compile template:\\n\\n\" + template + \"\\n\\n\" + detectErrors(compiled.ast).join('\\n') + '\\n\\n', vm);\n    }\n  }\n  return cache[key] = res;\n}\n\nfunction makeFunction(code) {\n  try {\n    return new Function(code);\n  } catch (e) {\n    return noop;\n  }\n}\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML;\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (el, hydrating) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\"Do not mount Vue to <html> or <body> - mount to normal elements instead.\");\n    return this;\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\"Template element not found or is empty: \" + options.template, this);\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this;\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      var ref = compileToFunctions(template, {\n        warn: warn,\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n    }\n  }\n  return mount.call(this, el, hydrating);\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nmodule.exports = Vue$3;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7), __webpack_require__(9)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS9kaXN0L3Z1ZS5jb21tb24uanM/ZTg4MSJdLCJuYW1lcyI6WyJfdG9TdHJpbmciLCJ2YWwiLCJKU09OIiwic3RyaW5naWZ5IiwiU3RyaW5nIiwidG9OdW1iZXIiLCJuIiwicGFyc2VGbG9hdCIsImlzTmFOIiwibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJtYXAiLCJPYmplY3QiLCJjcmVhdGUiLCJsaXN0Iiwic3BsaXQiLCJpIiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJpc0J1aWx0SW5UYWciLCJyZW1vdmUkMSIsImFyciIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093biIsIm9iaiIsImtleSIsImNhbGwiLCJpc1ByaW1pdGl2ZSIsInZhbHVlIiwiY2FjaGVkIiwiZm4iLCJjYWNoZSIsImNhY2hlZEZuIiwiaGl0IiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwicmVwbGFjZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0Iiwic2xpY2UiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImJpbmQkMSIsImN0eCIsImJvdW5kRm4iLCJhIiwibCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsIkFycmF5IiwiZXh0ZW5kIiwidG8iLCJfZnJvbSIsImlzT2JqZWN0IiwidG9TdHJpbmciLCJPQkpFQ1RfU1RSSU5HIiwiaXNQbGFpbk9iamVjdCIsInRvT2JqZWN0IiwicmVzIiwibm9vcCIsIm5vIiwiaWRlbnRpdHkiLCJnZW5TdGF0aWNLZXlzIiwibW9kdWxlcyIsInJlZHVjZSIsImtleXMiLCJtIiwiY29uY2F0Iiwic3RhdGljS2V5cyIsImpvaW4iLCJsb29zZUVxdWFsIiwiYiIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImxvb3NlSW5kZXhPZiIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsImRldnRvb2xzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZXJyb3JIYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJfYXNzZXRUeXBlcyIsIl9saWZlY3ljbGVIb29rcyIsIl9tYXhVcGRhdGVDb3VudCIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwiZW51bWVyYWJsZSIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJwYXJzZVBhdGgiLCJwYXRoIiwidGVzdCIsInNlZ21lbnRzIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJ3aW5kb3ciLCJVQSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzQW5kcm9pZCIsImlzSU9TIiwiX2lzU2VydmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJ1bmRlZmluZWQiLCJnbG9iYWwiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIm5leHRUaWNrIiwiY2FsbGJhY2tzIiwicGVuZGluZyIsInRpbWVyRnVuYyIsIm5leHRUaWNrSGFuZGxlciIsImNvcGllcyIsIlByb21pc2UiLCJwIiwicmVzb2x2ZSIsImxvZ0Vycm9yIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwidGhlbiIsImNhdGNoIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJxdWV1ZU5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsInB1c2giLCJfU2V0IiwiU2V0Iiwic2V0IiwiaGFzIiwiYWRkIiwiY2xlYXIiLCJ3YXJuIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJtc2ciLCJ2bSIsImZvcm1hdExvY2F0aW9uIiwiJHJvb3QiLCJuYW1lIiwiX2lzVnVlIiwiJG9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiX19maWxlIiwidWlkJDEiLCJEZXAiLCJpZCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJ0YXJnZXQiLCJhZGREZXAiLCJub3RpZnkiLCJ1cGRhdGUiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJfdGFyZ2V0IiwicG9wVGFyZ2V0IiwicG9wIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsImZvckVhY2giLCJtZXRob2QiLCJvcmlnaW5hbCIsIm11dGF0b3IiLCJhcmd1bWVudHMkMSIsImFyZ3MiLCJyZXN1bHQiLCJvYiIsIl9fb2JfXyIsImluc2VydGVkIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9ic2VydmVyU3RhdGUiLCJzaG91bGRDb252ZXJ0IiwiaXNTZXR0aW5nUHJvcHMiLCJPYnNlcnZlciIsInZtQ291bnQiLCJpc0FycmF5IiwiYXVnbWVudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsImRlZmluZVJlYWN0aXZlJCQxIiwiaXRlbXMiLCJzcmMiLCJfX3Byb3RvX18iLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiY3VzdG9tU2V0dGVyIiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJnZXQiLCJzZXR0ZXIiLCJjaGlsZE9iIiwicmVhY3RpdmVHZXR0ZXIiLCJkZXBlbmRBcnJheSIsInJlYWN0aXZlU2V0dGVyIiwibmV3VmFsIiwic2V0JDEiLCJNYXRoIiwibWF4IiwiZGVsIiwiZSIsInN0cmF0cyIsImVsIiwicHJvcHNEYXRhIiwicGFyZW50IiwiY2hpbGQiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZURhdGEiLCJmcm9tIiwidG9WYWwiLCJmcm9tVmFsIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJtZXJnZWREYXRhRm4iLCJtZXJnZWRJbnN0YW5jZURhdGFGbiIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiaG9vayIsIm1lcmdlQXNzZXRzIiwidHlwZSIsIndhdGNoIiwicHJvcHMiLCJtZXRob2RzIiwiY29tcHV0ZWQiLCJjaGVja0NvbXBvbmVudHMiLCJvcHRpb25zIiwiY29tcG9uZW50cyIsImxvd2VyIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJiaW5kIiwibWVyZ2VPcHRpb25zIiwiZXh0ZW5kc0Zyb20iLCJleHRlbmRzIiwibWl4aW5zIiwibWl4aW4iLCJWdWUkMyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3AiLCJhYnNlbnQiLCJpc1R5cGUiLCJCb29sZWFuIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRDb252ZXJ0IiwiYXNzZXJ0UHJvcCIsImRlZmF1bHQiLCJGdW5jdGlvbiIsInJlcXVpcmVkIiwidmFsaWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsInZhbGlkYXRvciIsImdldFR5cGUiLCJtYXRjaCIsImxlbiIsInV0aWwiLCJmcmVlemUiLCJkZWZpbmVSZWFjdGl2ZSIsInJlbW92ZSIsImluaXRQcm94eSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiZ2V0SGFuZGxlciIsImhhbmRsZXJzIiwicmVuZGVyIiwiX3dpdGhTdHJpcHBlZCIsIl9yZW5kZXJQcm94eSIsIlZOb2RlIiwidGFnIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29udGV4dCIsImNvbXBvbmVudE9wdGlvbnMiLCJucyIsImZ1bmN0aW9uYWxDb250ZXh0IiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiY2xvbmVWTm9kZXMiLCJ2bm9kZXMiLCJob29rcyIsImluaXQiLCJwcmVwYXRjaCIsImluc2VydCIsImRlc3Ryb3kiLCJkZXN0cm95JDEiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsIl9iYXNlIiwiY2lkIiwicmVzb2x2ZWQiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCIkZm9yY2VVcGRhdGUiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwiZXh0cmFjdFByb3BzIiwiZnVuY3Rpb25hbCIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJsaXN0ZW5lcnMiLCJvbiIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJtZXJnZUhvb2tzIiwiX2NvbnRleHQiLCJoIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJzbG90cyIsInJlc29sdmVTbG90cyIsInNsb3QiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwicGFyZW50RWxtIiwicmVmRWxtIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiX3BhcmVudExpc3RlbmVycyIsIl9yZW5kZXJDaGlsZHJlbiIsIl9wYXJlbnRFbG0iLCJfcmVmRWxtIiwiaW5saW5lVGVtcGxhdGUiLCJzdGF0aWNSZW5kZXJGbnMiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwib2xkVm5vZGUiLCJfdXBkYXRlRnJvbVBhcmVudCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsIl9pbmFjdGl2ZSIsIiRkZXN0cm95IiwiZmFjdG9yeSIsInJlcXVlc3RlZCIsInBlbmRpbmdDYWxsYmFja3MiLCJjYnMiLCJzeW5jIiwicmVqZWN0IiwicmVhc29uIiwiYXR0cnMiLCJkb21Qcm9wcyIsImFsdEtleSIsImNoZWNrUHJvcCIsImhhc2giLCJwcmVzZXJ2ZSIsImZyb21QYXJlbnQiLCJvdXJzIiwibWVyZ2VIb29rJDEiLCJvbmUiLCJ0d28iLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJpbmplY3RlZEhhc2giLCJfX2luamVjdGVkIiwib2xkSG9vayIsIm5vcm1hbGl6ZUV2ZW50Iiwib25jZSIsImNhcHR1cmUiLCJjcmVhdGVFdmVudEhhbmRsZSIsImhhbmRsZSIsImludm9rZXIiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsImN1ciIsIm9sZCIsImV2ZW50Iiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImxhc3QiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiZmlsdGVyIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsIl9jcmVhdGVFbGVtZW50Iiwic2NvcGVkU2xvdHMiLCJhcHBseU5TIiwiaW5pdFJlbmRlciIsIiR2bm9kZSIsIl92bm9kZSIsIl9zdGF0aWNUcmVlcyIsInBhcmVudFZub2RlIiwicmVuZGVyQ29udGV4dCIsIiRzbG90cyIsIiRzY29wZWRTbG90cyIsIl9jIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZW5kZXJNaXhpbiIsIlZ1ZSIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJfcyIsIl92IiwiX24iLCJfZSIsIl9xIiwiX2kiLCJfbSIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJ0cmVlIiwibWFya1N0YXRpYyIsIl9vIiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsIl9mIiwicmVzb2x2ZUZpbHRlciIsIl9sIiwicmVuZGVyTGlzdCIsIl90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwic2xvdE5vZGVzIiwiX3JlbmRlcmVkIiwiX2IiLCJiaW5kUHJvcHMiLCJhc1Byb3AiLCJfayIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluQWxpYXMiLCJkZWZhdWx0U2xvdCIsImluaXRFdmVudHMiLCJfZXZlbnRzIiwiX2hhc0hvb2tFdmVudCIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsImFkZCQxIiwiJG9uY2UiLCIkb24iLCJyZW1vdmUkMiIsIiRvZmYiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsIiRlbWl0IiwiaW5pdExpZmVjeWNsZSIsIiRwYXJlbnQiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsaWZlY3ljbGVNaXhpbiIsIl9tb3VudCIsIiRlbCIsInRlbXBsYXRlIiwiV2F0Y2hlciIsInVwZGF0ZUNvbXBvbmVudCIsIl91cGRhdGUiLCJwcmV2RWwiLCJwcmV2Vm5vZGUiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwicmVuZGVyQ2hpbGRyZW4iLCJoYXNDaGlsZHJlbiIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsImoiLCJxdWV1ZSIsImhhcyQxIiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJyZXNldFNjaGVkdWxlclN0YXRlIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJzb3J0IiwicnVuIiwidXNlciIsImV4cHJlc3Npb24iLCJlbWl0IiwicXVldWVXYXRjaGVyIiwidWlkJDIiLCJleHBPckZuIiwiZGVlcCIsImxhenkiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwidHJhdmVyc2UiLCJjbGVhbnVwRGVwcyIsInRoaXMkMSIsInRtcCIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJzZWVuT2JqZWN0cyIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJkZXBJZCIsImluaXRTdGF0ZSIsIm9wdHMiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsImluaXREYXRhIiwiaW5pdENvbXB1dGVkIiwiaW5pdFdhdGNoIiwiaXNSZXNlcnZlZFByb3AiLCJpc1Jvb3QiLCJsb29wIiwicHJveHkiLCJjb21wdXRlZFNoYXJlZERlZmluaXRpb24iLCJ1c2VyRGVmIiwibWFrZUNvbXB1dGVkR2V0dGVyIiwib3duZXIiLCJjb21wdXRlZEdldHRlciIsImhhbmRsZXIiLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwic3RhdGVNaXhpbiIsImRhdGFEZWYiLCJuZXdEYXRhIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJ1bndhdGNoRm4iLCJwcm94eUdldHRlciIsInByb3h5U2V0dGVyIiwidWlkIiwiaW5pdE1peGluIiwiX2luaXQiLCJfdWlkIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJfc2VsZiIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwiY2FjaGVkU3VwZXJPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsIl9zY29wZUlkIiwiaW5pdFVzZSIsInVzZSIsInBsdWdpbiIsImluc3RhbGxlZCIsInVuc2hpZnQiLCJpbnN0YWxsIiwiaW5pdE1peGluJDEiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRBc3NldFJlZ2lzdGVycyIsImRlZmluaXRpb24iLCJwYXR0ZXJuVHlwZXMiLCJSZWdFeHAiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsImRlbGV0ZSIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImF0dHIiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImdlbkNsYXNzRm9yVm5vZGUiLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJnZW5DbGFzc0Zyb21EYXRhIiwic3RhdGljQ2xhc3MiLCJjbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZpZWQiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJpc1ByZVRhZyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInF1ZXJ5Iiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCQxIiwidGFnTmFtZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJub2RlT3BzIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJob29rcyQxIiwiaXNVbmRlZiIsInMiLCJpc0RlZiIsInNhbWVWbm9kZSIsInZub2RlMSIsInZub2RlMiIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwiYmFja2VuZCIsImVtcHR5Tm9kZUF0IiwiY3JlYXRlUm1DYiIsImNoaWxkRWxtIiwicmVtb3ZlTm9kZSIsImluUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwibmVzdGVkIiwicHJlIiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJyZWFjdGl2YXRlQ29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5uZXJOb2RlIiwidHJhbnNpdGlvbiIsImFjdGl2YXRlIiwiaSQxIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsInJtIiwidXBkYXRlQ2hpbGRyZW4iLCJvbGRDaCIsIm5ld0NoIiwicmVtb3ZlT25seSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwiZWxtVG9Nb3ZlIiwiY2FuTW92ZSIsInBhdGNoVm5vZGUiLCJoYXNEYXRhIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJiYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiaHlkcmF0ZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsInBhdGNoIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwib2xkRWxtIiwicGFyZW50RWxtJDEiLCJfbGVhdmVDYiIsImFuY2VzdG9yIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImRpciIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJrbGFzcyIsInRhcmdldCQxIiwiYWRkJDIiLCJvbGRIYW5kbGVyIiwiZXYiLCJyZW1vdmUkMyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsIl92YWx1ZSIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJpc0RpcnR5IiwiaXNJbnB1dENoYW5nZWQiLCJhY3RpdmVFbGVtZW50IiwiX3ZNb2RpZmllcnMiLCJudW1iZXIiLCJ0cmltIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwibGlzdERlbGltaXRlciIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwic3R5bGUiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImdldFN0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemUiLCJwcmVmaXhlcyIsInRlc3RFbCIsInVwcGVyIiwicHJlZml4ZWQiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwidGltZW91dCIsInByb3BDb3VudCIsImVuZGVkIiwiZW5kIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uZURlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsIk51bWJlciIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsImNhbmNlbGxlZCIsInJlc29sdmVUcmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJjc3MiLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwibGVhdmUiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsInBlcmZvcm1MZWF2ZSIsImRlZiQkMSIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiY2FsbGVkIiwiX2VudGVyIiwicGxhdGZvcm1Nb2R1bGVzIiwicGF0Y2gkMSIsIm1vZGVsYWJsZVRhZ1JFIiwidm1vZGVsIiwidHJpZ2dlciIsIm1vZGVsIiwiYmluZGluZyIsInNldFNlbGVjdGVkIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsIm5lZWRSZXNldCIsIm11bHRpcGxlIiwic29tZSIsInYiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiaXNNdWx0aXBsZSIsInNlbGVjdGVkIiwib3B0aW9uIiwiZ2V0VmFsdWUiLCJzZWxlY3RlZEluZGV4IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJjb21wIiwia2V5JDEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsImlzU2FtZUNoaWxkIiwib2xkQ2hpbGQiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJrZXB0IiwicmVtb3ZlZCIsImMkMSIsInBvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJlZm9yZVVwZGF0ZSIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwiY2FsbFBlbmRpbmdDYnMiLCJyZWNvcmRQb3NpdGlvbiIsImFwcGx5VHJhbnNsYXRpb24iLCJmIiwiYm9keSIsIm9mZnNldEhlaWdodCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiaW5mbyIsIm5ld1BvcyIsIm9sZFBvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwicGxhdGZvcm1Db21wb25lbnRzIiwic2hvdWxkRGVjb2RlIiwiY29udGVudCIsImVuY29kZWQiLCJkaXYiLCJpbm5lckhUTUwiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsImRlY29kZXIiLCJkZWNvZGUiLCJodG1sIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwic2luZ2xlQXR0cklkZW50aWZpZXIiLCJzaW5nbGVBdHRyQXNzaWduIiwic2luZ2xlQXR0clZhbHVlcyIsInNvdXJjZSIsImF0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJlbmRUYWciLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsIklTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4iLCJnIiwiaXNTY3JpcHRPclN0eWxlIiwicmVDYWNoZSIsImx0UkUiLCJndFJFIiwibmxSRSIsImFtcFJFIiwicXVvdGVSRSIsImRlY29kZUF0dHIiLCJwYXJzZUhUTUwiLCJzdGFjayIsImV4cGVjdEhUTUwiLCJpc1VuYXJ5VGFnJCQxIiwibGFzdFRhZyIsInRleHRFbmQiLCJjb21tZW50RW5kIiwiYWR2YW5jZSIsImNvbmRpdGlvbmFsRW5kIiwiZG9jdHlwZU1hdGNoIiwiZW5kVGFnTWF0Y2giLCJjdXJJbmRleCIsInBhcnNlRW5kVGFnIiwic3RhcnRUYWdNYXRjaCIsInBhcnNlU3RhcnRUYWciLCJoYW5kbGVTdGFydFRhZyIsInJlc3QkMSIsIm5leHQiLCJzdWJzdHJpbmciLCJjaGFycyIsInN0YWNrZWRUYWciLCJyZVN0YWNrZWRUYWciLCJlbmRUYWdMZW5ndGgiLCJyZXN0IiwiYWxsIiwidW5hcnlTbGFzaCIsInVuYXJ5IiwibG93ZXJDYXNlZFRhZyIsImxvd2VyQ2FzZWRUYWdOYW1lIiwicGFyc2VGaWx0ZXJzIiwiZXhwIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsInByZXYiLCJmaWx0ZXJzIiwicHVzaEZpbHRlciIsIndyYXBGaWx0ZXIiLCJkZWZhdWx0VGFnUkUiLCJyZWdleEVzY2FwZVJFIiwiYnVpbGRSZWdleCIsImRlbGltaXRlcnMiLCJvcGVuIiwiY2xvc2UiLCJwYXJzZVRleHQiLCJ0YWdSRSIsInRva2VucyIsImxhc3RJbmRleCIsImV4ZWMiLCJiYXNlV2FybiIsInBsdWNrTW9kdWxlRnVuY3Rpb24iLCJhZGRQcm9wIiwiYWRkQXR0ciIsImFkZERpcmVjdGl2ZSIsImFyZyIsImFkZEhhbmRsZXIiLCJpbXBvcnRhbnQiLCJuYXRpdmUiLCJuYXRpdmVFdmVudHMiLCJuZXdIYW5kbGVyIiwiZ2V0QmluZGluZ0F0dHIiLCJnZXRTdGF0aWMiLCJkeW5hbWljVmFsdWUiLCJnZXRBbmRSZW1vdmVBdHRyIiwic3RhdGljVmFsdWUiLCJhdHRyc01hcCIsImF0dHJzTGlzdCIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsInBhcnNlTW9kZWwiLCJsYXN0SW5kZXhPZiIsImlkeCIsImVvZiIsImlzU3RyaW5nU3RhcnQiLCJwYXJzZVN0cmluZyIsInBhcnNlQnJhY2tldCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwiZGlyUkUiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsImJpbmRSRSIsIm9uUkUiLCJhcmdSRSIsIm1vZGlmaWVyUkUiLCJkZWNvZGVIVE1MQ2FjaGVkIiwid2FybiQxIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1Jc1ByZVRhZyIsInByZVRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1zIiwicG9zdFRyYW5zZm9ybXMiLCJwYXJzZSIsInByZXNlcnZlV2hpdGVzcGFjZSIsInJvb3QiLCJjdXJyZW50UGFyZW50IiwiaW5WUHJlIiwid2FybmVkIiwiZ3VhcmRJRVNWR0J1ZyIsImVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJpc0ZvcmJpZGRlblRhZyIsImZvcmJpZGRlbiIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJwcm9jZXNzS2V5IiwicGxhaW4iLCJwcm9jZXNzUmVmIiwicHJvY2Vzc1Nsb3QiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2Vzc0F0dHJzIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJpZiIsImVsc2VpZiIsImVsc2UiLCJhZGRJZkNvbmRpdGlvbiIsImJsb2NrIiwicHJvY2Vzc0lmQ29uZGl0aW9ucyIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJpJDIiLCJsYXN0Tm9kZSIsImNoZWNrSW5Gb3IiLCJpbk1hdGNoIiwiZm9yIiwiYWxpYXMiLCJpdGVyYXRvck1hdGNoIiwiaXRlcmF0b3IxIiwiaXRlcmF0b3IyIiwiZmluZFByZXZFbGVtZW50IiwiY29uZGl0aW9uIiwiaWZDb25kaXRpb25zIiwic2xvdE5hbWUiLCJjb21wb25lbnQiLCJpc1Byb3AiLCJoYXNCaW5kaW5ncyIsInBhcnNlTW9kaWZpZXJzIiwiY2FtZWwiLCJhcmdNYXRjaCIsImNoZWNrRm9yQWxpYXNNb2RlbCIsImllTlNCdWciLCJpZU5TUHJlZml4IiwiX2VsIiwiaXNTdGF0aWNLZXkiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWciLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwiZ2VuU3RhdGljS2V5cyQxIiwib3B0aW1pemUiLCJtYXJrU3RhdGljUm9vdHMiLCJzdGF0aWMiLCJzdGF0aWNJbkZvciIsInN0YXRpY1Jvb3QiLCJ3YWxrVGhyb3VnaENvbmRpdGlvbnNCbG9ja3MiLCJjb25kaXRpb25CbG9ja3MiLCJpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciIsImV2ZXJ5IiwiZm5FeHBSRSIsInNpbXBsZVBhdGhSRSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJyaWdodCIsImRvd24iLCJtb2RpZmllckNvZGUiLCJzdG9wIiwicHJldmVudCIsInNlbGYiLCJjdHJsIiwic2hpZnQiLCJhbHQiLCJtZXRhIiwiZ2VuSGFuZGxlcnMiLCJnZW5IYW5kbGVyIiwiY29kZSIsImdlbktleUZpbHRlciIsImhhbmRsZXJDb2RlIiwiZ2VuRmlsdGVyQ29kZSIsImtleVZhbCIsInBhcnNlSW50IiwiYmluZCQyIiwid3JhcERhdGEiLCJiYXNlRGlyZWN0aXZlcyIsImNsb2FrIiwid2FybiQyIiwidHJhbnNmb3JtcyQxIiwiZGF0YUdlbkZucyIsInBsYXRmb3JtRGlyZWN0aXZlcyQxIiwiaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDEiLCJvbmNlQ291bnQiLCJjdXJyZW50T3B0aW9ucyIsImdlbmVyYXRlIiwiYXN0IiwicHJldlN0YXRpY1JlbmRlckZucyIsImN1cnJlbnRTdGF0aWNSZW5kZXJGbnMiLCJwcmV2T25jZUNvdW50IiwiZ2VuRWxlbWVudCIsInN0YXRpY1Byb2Nlc3NlZCIsImdlblN0YXRpYyIsIm9uY2VQcm9jZXNzZWQiLCJnZW5PbmNlIiwiZm9yUHJvY2Vzc2VkIiwiZ2VuRm9yIiwiaWZQcm9jZXNzZWQiLCJnZW5JZiIsImdlbkNoaWxkcmVuIiwiZ2VuU2xvdCIsImdlbkNvbXBvbmVudCIsImdlbkRhdGEiLCJnZW5JZkNvbmRpdGlvbnMiLCJjb25kaXRpb25zIiwiZ2VuVGVybmFyeUV4cCIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJoYXNSdW50aW1lIiwibmVlZFJ1bnRpbWUiLCJnZW4iLCJpbmxpbmVSZW5kZXJGbnMiLCJnZW5TY29wZWRTbG90Iiwic2NvcGUiLCJjaGVja1NraXAiLCJlbCQxIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwibmVlZHNOb3JtYWxpemF0aW9uIiwibWF5YmVDb21wb25lbnQiLCJnZW5UZXh0IiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwiYmluZCQkMSIsImNvbXBvbmVudE5hbWUiLCJjb21waWxlJDEiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwiaWRlbnRSRSIsInN0cmlwU3RyaW5nUkUiLCJkZXRlY3RFcnJvcnMiLCJlcnJvcnMiLCJjaGVja05vZGUiLCJjaGVja0ZvciIsImNoZWNrRXhwcmVzc2lvbiIsImNoZWNrSWRlbnRpZmllciIsImlkZW50Iiwia2V5d29yZE1hdGNoIiwidHJhbnNmb3JtTm9kZSIsImNsYXNzQmluZGluZyIsImdlbkRhdGEkMSIsImtsYXNzJDEiLCJ0cmFuc2Zvcm1Ob2RlJDEiLCJzdHlsZUJpbmRpbmciLCJnZW5EYXRhJDIiLCJzdHlsZSQxIiwibW9kdWxlcyQxIiwid2FybiQzIiwibW9kZWwkMSIsIl93YXJuIiwiZHluYW1pY1R5cGUiLCJnZW5TZWxlY3QiLCJnZW5DaGVja2JveE1vZGVsIiwiZ2VuUmFkaW9Nb2RlbCIsImdlbkRlZmF1bHRNb2RlbCIsImNoZWNrZWQiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJnZW5Bc3NpZ25tZW50Q29kZSIsIm5lZWRDb21wb3NpdGlvbkd1YXJkIiwidmFsdWVFeHByZXNzaW9uIiwiY2hlY2tPcHRpb25XYXJuaW5nIiwiYXNzaWdubWVudCIsIm1vZGVsUnMiLCJkaXJlY3RpdmVzJDEiLCJiYXNlT3B0aW9ucyIsImNvbXBpbGUkJDEiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJjb21waWxlZCIsIm1ha2VGdW5jdGlvbiIsImlkVG9UZW1wbGF0ZSIsIm1vdW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0T3V0ZXJIVE1MIiwib3V0ZXJIVE1MIiwiY29udGFpbmVyIiwiY2xvbmVOb2RlIiwiY29tcGlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOztBQUVBOztBQUVBOzs7Ozs7QUFHQSxTQUFTQSxTQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUN2QixTQUFPQSxPQUFPLElBQVAsR0FDSCxFQURHLEdBRUgsUUFB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QkFBbUJ0ekIsUUFBbkIsRUFBNkI7QUFDckN2VyxjQUFNQSxJQUQrQjtBQUVyQ2syQiw4QkFBc0JBLG9CQUZlO0FBR3JDNEUsb0JBQVl4MEIsUUFBUXcwQjtBQUhpQixPQUE3QixFQUlQLElBSk8sQ0FBVjtBQUtBLFVBQUloeEIsU0FBU2tKLElBQUlsSixNQUFqQjtBQUNBLFVBQUlzRSxrQkFBa0I0RSxJQUFJNUUsZUFBMUI7QUFDQTlILGNBQVF3RCxNQUFSLEdBQWlCQSxNQUFqQjtBQUNBeEQsY0FBUThILGVBQVIsR0FBMEJBLGVBQTFCO0FBQ0Q7QUFDRjtBQUNELFNBQU82N0IsTUFBTTd5QyxJQUFOLENBQVcsSUFBWCxFQUFpQjBOLEVBQWpCLEVBQXFCdUosU0FBckIsQ0FBUDtBQUNELENBdEREOztBQXdEQTs7OztBQUlBLFNBQVM4N0IsWUFBVCxDQUF1QnJsQyxFQUF2QixFQUEyQjtBQUN6QixNQUFJQSxHQUFHc2xDLFNBQVAsRUFBa0I7QUFDaEIsV0FBT3RsQyxHQUFHc2xDLFNBQVY7QUFDRCxHQUZELE1BRU87QUFDTCxRQUFJQyxZQUFZcHJDLFNBQVNvTyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0FnOUIsY0FBVXhwQixXQUFWLENBQXNCL2IsR0FBR3dsQyxTQUFILENBQWEsSUFBYixDQUF0QjtBQUNBLFdBQU9ELFVBQVVwVSxTQUFqQjtBQUNEO0FBQ0Y7O0FBRUQ5dUIsTUFBTW9qQyxPQUFOLEdBQWdCVixrQkFBaEI7O0FBRUFXLE9BQU9DLE9BQVAsR0FBaUJ0akMsS0FBakIsQyIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBWdWUuanMgdjIuMS4xMFxuICogKGMpIDIwMTQtMjAxNyBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qICAqL1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiBfdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiB0eXBlb2YgdmFsID09PSAnb2JqZWN0J1xuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSQxIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZVxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvKFteLV0pKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJylcbiAgICAudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQsIGZhc3RlciB0aGFuIG5hdGl2ZVxuICovXG5mdW5jdGlvbiBiaW5kJDEgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgZm4gbGVuZ3RoXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgT0JKRUNUX1NUUklORyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IE9CSkVDVF9TVFJJTkdcbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKCkge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7XG4gICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcbiAgfSwgW10pLmpvaW4oJywnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhKSA9PT0gSlNPTi5zdHJpbmdpZnkoYilcbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyogICovXG5cbnZhciBjb25maWcgPSB7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXNzZXQgdHlwZXMgdGhhdCBhIGNvbXBvbmVudCBjYW4gb3duLlxuICAgKi9cbiAgX2Fzc2V0VHlwZXM6IFtcbiAgICAnY29tcG9uZW50JyxcbiAgICAnZGlyZWN0aXZlJyxcbiAgICAnZmlsdGVyJ1xuICBdLFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGxpZmVjeWNsZSBob29rcy5cbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogW1xuICAgICdiZWZvcmVDcmVhdGUnLFxuICAgICdjcmVhdGVkJyxcbiAgICAnYmVmb3JlTW91bnQnLFxuICAgICdtb3VudGVkJyxcbiAgICAnYmVmb3JlVXBkYXRlJyxcbiAgICAndXBkYXRlZCcsXG4gICAgJ2JlZm9yZURlc3Ryb3knLFxuICAgICdkZXN0cm95ZWQnLFxuICAgICdhY3RpdmF0ZWQnLFxuICAgICdkZWFjdGl2YXRlZCdcbiAgXSxcblxuICAvKipcbiAgICogTWF4IGNpcmN1bGFyIHVwZGF0ZXMgYWxsb3dlZCBpbiBhIHNjaGVkdWxlciBmbHVzaCBjeWNsZS5cbiAgICovXG4gIF9tYXhVcGRhdGVDb3VudDogMTAwXG59O1xuXG4vKiAgKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSAvW15cXHcuJF0vO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9IGVsc2Uge1xuICAgIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cbi8qIGdsb2JhbHMgTXV0YXRpb25PYnNlcnZlciAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSBVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwO1xudmFyIGlzSU9TID0gVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKTtcblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxuLyoqXG4gKiBEZWZlciBhIHRhc2sgdG8gZXhlY3V0ZSBpdCBhc3luY2hyb25vdXNseS5cbiAqL1xudmFyIG5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICB2YXIgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgdGltZXJGdW5jO1xuXG4gIGZ1bmN0aW9uIG5leHRUaWNrSGFuZGxlciAoKSB7XG4gICAgcGVuZGluZyA9IGZhbHNlO1xuICAgIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvcGllc1tpXSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4gIC8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuICAvLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbiAgLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbiAgLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuICAvLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gICAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB2YXIgbG9nRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgfTtcbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwLnRoZW4obmV4dFRpY2tIYW5kbGVyKS5jYXRjaChsb2dFcnJvcik7XG4gICAgICAvLyBpbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgICBpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fFxuICAgIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICAgIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbiAgKSkge1xuICAgIC8vIHVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gICAgLy8gZS5nLiBQaGFudG9tSlMgSUUxMSwgaU9TNywgQW5kcm9pZCA0LjRcbiAgICB2YXIgY291bnRlciA9IDE7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobmV4dFRpY2tIYW5kbGVyKTtcbiAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICB9KTtcbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb3VudGVyID0gKGNvdW50ZXIgKyAxKSAlIDI7XG4gICAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2sgdG8gc2V0VGltZW91dFxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2V0VGltZW91dChuZXh0VGlja0hhbmRsZXIsIDApO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcXVldWVOZXh0VGljayAoY2IsIGN0eCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY2IpIHsgY2IuY2FsbChjdHgpOyB9XG4gICAgICBpZiAoX3Jlc29sdmUpIHsgX3Jlc29sdmUoY3R4KTsgfVxuICAgIH0pO1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IHRydWU7XG4gICAgICB0aW1lckZ1bmMoKTtcbiAgICB9XG4gICAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KVxuICAgIH1cbiAgfVxufSkoKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIltWdWUgd2Fybl06IFwiICsgbXNnICsgXCIgXCIgKyAoXG4gICAgICAgIHZtID8gZm9ybWF0TG9jYXRpb24oZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICdyb290IGluc3RhbmNlJ1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IHZtLl9pc1Z1ZVxuICAgICAgPyB2bS4kb3B0aW9ucy5uYW1lIHx8IHZtLiRvcHRpb25zLl9jb21wb25lbnRUYWdcbiAgICAgIDogdm0ubmFtZTtcbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCJjb21wb25lbnQgPFwiICsgbmFtZSArIFwiPlwiKSA6IFwiYW5vbnltb3VzIGNvbXBvbmVudFwiKSArXG4gICAgICAodm0uX2lzVnVlICYmIHZtLiRvcHRpb25zLl9fZmlsZSA/IChcIiBhdCBcIiArICh2bS4kb3B0aW9ucy5fX2ZpbGUpKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgZm9ybWF0TG9jYXRpb24gPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKHN0ciA9PT0gJ2Fub255bW91cyBjb21wb25lbnQnKSB7XG4gICAgICBzdHIgKz0gXCIgLSB1c2UgdGhlIFxcXCJuYW1lXFxcIiBvcHRpb24gZm9yIGJldHRlciBkZWJ1Z2dpbmcgbWVzc2FnZXMuXCI7XG4gICAgfVxuICAgIHJldHVybiAoXCJcXG4oZm91bmQgaW4gXCIgKyBzdHIgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cblxudmFyIHVpZCQxID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkJDErKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSQxKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFibGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyB0aGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG9ubHkgb25lXG4vLyB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZCBhdCBhbnkgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKF90YXJnZXQpIHtcbiAgaWYgKERlcC50YXJnZXQpIHsgdGFyZ2V0U3RhY2sucHVzaChEZXAudGFyZ2V0KTsgfVxuICBEZXAudGFyZ2V0ID0gX3RhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrLnBvcCgpO1xufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1tcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl1cbi5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICAvLyBhdm9pZCBsZWFraW5nIGFyZ3VtZW50czpcbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9jbG9zdXJlLXdpdGgtYXJndW1lbnRzXG4gICAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGkpO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHMkMVtpXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCB3aGVuIGEgcmVhY3RpdmUgcHJvcGVydHkgaXMgc2V0LCB0aGUgbmV3IHZhbHVlIGlzXG4gKiBhbHNvIGNvbnZlcnRlZCB0byBiZWNvbWUgcmVhY3RpdmUuIEhvd2V2ZXIgd2hlbiBwYXNzaW5nIGRvd24gcHJvcHMsXG4gKiB3ZSBkb24ndCB3YW50IHRvIGZvcmNlIGNvbnZlcnNpb24gYmVjYXVzZSB0aGUgdmFsdWUgbWF5IGJlIGEgbmVzdGVkIHZhbHVlXG4gKiB1bmRlciBhIGZyb3plbiBkYXRhIHN0cnVjdHVyZS4gQ29udmVydGluZyBpdCB3b3VsZCBkZWZlYXQgdGhlIG9wdGltaXphdGlvbi5cbiAqL1xudmFyIG9ic2VydmVyU3RhdGUgPSB7XG4gIHNob3VsZENvbnZlcnQ6IHRydWUsXG4gIGlzU2V0dGluZ1Byb3BzOiBmYWxzZVxufTtcblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGFyZSBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2hlcyB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciBhdWdtZW50ID0gaGFzUHJvdG9cbiAgICAgID8gcHJvdG9BdWdtZW50XG4gICAgICA6IGNvcHlBdWdtZW50O1xuICAgIGF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggZWFjaCBwcm9wZXJ0eSBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldLCBvYmpba2V5c1tpXV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlclxuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcblxuICB2YXIgY2hpbGRPYiA9IG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9IG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0JDEgKG9iaiwga2V5LCB2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIG9iai5sZW5ndGggPSBNYXRoLm1heChvYmoubGVuZ3RoLCBrZXkpO1xuICAgIG9iai5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoaGFzT3duKG9iaiwga2V5KSkge1xuICAgIG9ialtrZXldID0gdmFsO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9IG9iai5fX29iX187XG4gIGlmIChvYmouX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgb2JqW2tleV0gPSB2YWw7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsIChvYmosIGtleSkge1xuICB2YXIgb2IgPSBvYmouX19vYl9fO1xuICBpZiAob2JqLl9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24ob2JqLCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIG9ialtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0JDEodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHRvVmFsKSAmJiBpc1BsYWluT2JqZWN0KGZyb21WYWwpKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICBjaGlsZFZhbC5jYWxsKHRoaXMpLFxuICAgICAgICBwYXJlbnRWYWwuY2FsbCh0aGlzKVxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJlbnRWYWwgfHwgY2hpbGRWYWwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwYXJhbSBhdHRyaWJ1dGVzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5jb25maWcuX2xpZmVjeWNsZUhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgICA6IHJlc1xufVxuXG5jb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gcGFyZW50VmFsIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5XTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5XSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIHBhcmVudFZhbCB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBleHRlbmQocmV0LCBjaGlsZFZhbCk7XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhciBsb3dlciA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChpc0J1aWx0SW5UYWcobG93ZXIpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKGxvd2VyKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAgICdpZDogJyArIGtleVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiwgdXBkYXRlOiBkZWYgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuICBub3JtYWxpemVQcm9wcyhjaGlsZCk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuICB2YXIgZXh0ZW5kc0Zyb20gPSBjaGlsZC5leHRlbmRzO1xuICBpZiAoZXh0ZW5kc0Zyb20pIHtcbiAgICBwYXJlbnQgPSB0eXBlb2YgZXh0ZW5kc0Zyb20gPT09ICdmdW5jdGlvbidcbiAgICAgID8gbWVyZ2VPcHRpb25zKHBhcmVudCwgZXh0ZW5kc0Zyb20ub3B0aW9ucywgdm0pXG4gICAgICA6IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLCB2bSk7XG4gIH1cbiAgaWYgKGNoaWxkLm1peGlucykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIG1peGluID0gY2hpbGQubWl4aW5zW2ldO1xuICAgICAgaWYgKG1peGluLnByb3RvdHlwZSBpbnN0YW5jZW9mIFZ1ZSQzKSB7XG4gICAgICAgIG1peGluID0gbWl4aW4ub3B0aW9ucztcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIG1peGluLCB2bSk7XG4gICAgfVxuICB9XG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGhhbmRsZSBib29sZWFuIHByb3BzXG4gIGlmIChpc1R5cGUoQm9vbGVhbiwgcHJvcC50eXBlKSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWlzVHlwZShTdHJpbmcsIHByb3AudHlwZSkgJiYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XG4gICAgICB2YWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkQ29udmVydCA9IG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydDtcbiAgICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSB0cnVlO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHByZXZTaG91bGRDb252ZXJ0O1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChpc09iamVjdChkZWYpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2bVtrZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgcHJvcC50eXBlICE9PSBGdW5jdGlvblxuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nICtcbiAgICAgICcgRXhwZWN0ZWQgJyArIGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykgK1xuICAgICAgJywgZ290ICcgKyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSArICcuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG4gIGlmICh2YWxpZGF0b3IpIHtcbiAgICBpZiAoIXZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoZSB0eXBlIG9mIGEgdmFsdWVcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICB2YWxpZCA9IHR5cGVvZiB2YWx1ZSA9PT0gKGV4cGVjdGVkVHlwZSA9ICdzdHJpbmcnKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IChleHBlY3RlZFR5cGUgPSAnbnVtYmVyJyk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQm9vbGVhbicpIHtcbiAgICB2YWxpZCA9IHR5cGVvZiB2YWx1ZSA9PT0gKGV4cGVjdGVkVHlwZSA9ICdib29sZWFuJyk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnRnVuY3Rpb24nKSB7XG4gICAgdmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09IChleHBlY3RlZFR5cGUgPSAnZnVuY3Rpb24nKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmdcbiAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZSAoZm4pIHtcbiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdXG59XG5cbmZ1bmN0aW9uIGlzVHlwZSAodHlwZSwgZm4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGZuKSkge1xuICAgIHJldHVybiBnZXRUeXBlKGZuKSA9PT0gZ2V0VHlwZSh0eXBlKVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChnZXRUeXBlKGZuW2ldKSA9PT0gZ2V0VHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cblxuXG52YXIgdXRpbCA9IE9iamVjdC5mcmVlemUoe1xuXHRkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDEsXG5cdF90b1N0cmluZzogX3RvU3RyaW5nLFxuXHR0b051bWJlcjogdG9OdW1iZXIsXG5cdG1ha2VNYXA6IG1ha2VNYXAsXG5cdGlzQnVpbHRJblRhZzogaXNCdWlsdEluVGFnLFxuXHRyZW1vdmU6IHJlbW92ZSQxLFxuXHRoYXNPd246IGhhc093bixcblx0aXNQcmltaXRpdmU6IGlzUHJpbWl0aXZlLFxuXHRjYWNoZWQ6IGNhY2hlZCxcblx0Y2FtZWxpemU6IGNhbWVsaXplLFxuXHRjYXBpdGFsaXplOiBjYXBpdGFsaXplLFxuXHRoeXBoZW5hdGU6IGh5cGhlbmF0ZSxcblx0YmluZDogYmluZCQxLFxuXHR0b0FycmF5OiB0b0FycmF5LFxuXHRleHRlbmQ6IGV4dGVuZCxcblx0aXNPYmplY3Q6IGlzT2JqZWN0LFxuXHRpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuXHR0b09iamVjdDogdG9PYmplY3QsXG5cdG5vb3A6IG5vb3AsXG5cdG5vOiBubyxcblx0aWRlbnRpdHk6IGlkZW50aXR5LFxuXHRnZW5TdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzLFxuXHRsb29zZUVxdWFsOiBsb29zZUVxdWFsLFxuXHRsb29zZUluZGV4T2Y6IGxvb3NlSW5kZXhPZixcblx0aXNSZXNlcnZlZDogaXNSZXNlcnZlZCxcblx0ZGVmOiBkZWYsXG5cdHBhcnNlUGF0aDogcGFyc2VQYXRoLFxuXHRoYXNQcm90bzogaGFzUHJvdG8sXG5cdGluQnJvd3NlcjogaW5Ccm93c2VyLFxuXHRVQTogVUEsXG5cdGlzSUU6IGlzSUUsXG5cdGlzSUU5OiBpc0lFOSxcblx0aXNFZGdlOiBpc0VkZ2UsXG5cdGlzQW5kcm9pZDogaXNBbmRyb2lkLFxuXHRpc0lPUzogaXNJT1MsXG5cdGlzU2VydmVyUmVuZGVyaW5nOiBpc1NlcnZlclJlbmRlcmluZyxcblx0ZGV2dG9vbHM6IGRldnRvb2xzLFxuXHRuZXh0VGljazogbmV4dFRpY2ssXG5cdGdldCBfU2V0ICgpIHsgcmV0dXJuIF9TZXQ7IH0sXG5cdG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuXHRyZXNvbHZlQXNzZXQ6IHJlc29sdmVBc3NldCxcblx0Z2V0IHdhcm4gKCkgeyByZXR1cm4gd2FybjsgfSxcblx0Z2V0IGZvcm1hdENvbXBvbmVudE5hbWUgKCkgeyByZXR1cm4gZm9ybWF0Q29tcG9uZW50TmFtZTsgfSxcblx0dmFsaWRhdGVQcm9wOiB2YWxpZGF0ZVByb3Bcbn0pO1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICBcInJlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRvIGRlY2xhcmUgcmVhY3RpdmUgZGF0YSBcIiArXG4gICAgICBcInByb3BlcnRpZXMgaW4gdGhlIGRhdGEgb3B0aW9uLlwiLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBQcm94eS50b1N0cmluZygpLm1hdGNoKC9uYXRpdmUgY29kZS8pO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8IGtleS5jaGFyQXQoMCkgPT09ICdfJztcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9uc1xuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZ1bmN0aW9uYWxDb250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHt9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSAnJztcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zXG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG5mdW5jdGlvbiBjbG9uZVZOb2RlcyAodm5vZGVzKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzW2ldID0gY2xvbmVWTm9kZSh2bm9kZXNbaV0pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBob29rcyA9IHsgaW5pdDogaW5pdCwgcHJlcGF0Y2g6IHByZXBhdGNoLCBpbnNlcnQ6IGluc2VydCwgZGVzdHJveTogZGVzdHJveSQxIH07XG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoaG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKCFDdG9yKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICBpZiAoIUN0b3IuY2lkKSB7XG4gICAgaWYgKEN0b3IucmVzb2x2ZWQpIHtcbiAgICAgIEN0b3IgPSBDdG9yLnJlc29sdmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KEN0b3IsIGJhc2VDdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGl0J3Mgb2sgdG8gcXVldWUgdGhpcyBvbiBldmVyeSByZW5kZXIgYmVjYXVzZVxuICAgICAgICAvLyAkZm9yY2VVcGRhdGUgaXMgYnVmZmVyZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAgICAgICAgY29udGV4dC4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFDdG9yKSB7XG4gICAgICAgIC8vIHJldHVybiBub3RoaW5nIGlmIHRoaXMgaXMgaW5kZWVkIGFuIGFzeW5jIGNvbXBvbmVudFxuICAgICAgICAvLyB3YWl0IGZvciB0aGUgY2FsbGJhY2sgdG8gdHJpZ2dlciBwYXJlbnQgdXBkYXRlLlxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wcyhkYXRhLCBDdG9yKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChDdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVyc1xuICAgIGRhdGEgPSB7fTtcbiAgfVxuXG4gIC8vIG1lcmdlIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgbWVyZ2VIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9XG4gICk7XG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChwcm9wT3B0aW9ucykge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEpO1xuICAgIH1cbiAgfVxuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIF9jb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShjb250ZXh0KTtcbiAgdmFyIGggPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChfY29udGV4dCwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG4gIHZhciB2bm9kZSA9IEN0b3Iub3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCBoLCB7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgcGFyZW50OiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBzbG90czogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBjb250ZXh0KTsgfVxuICB9KTtcbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICB2bm9kZS5mdW5jdGlvbmFsQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgaWYgKGRhdGEuc2xvdCkge1xuICAgICAgKHZub2RlLmRhdGEgfHwgKHZub2RlLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgfVxuICB9XG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgcHJvcHNEYXRhOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhLFxuICAgIF9jb21wb25lbnRUYWc6IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWcsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBfcGFyZW50TGlzdGVuZXJzOiB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzLFxuICAgIF9yZW5kZXJDaGlsZHJlbjogdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuLFxuICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuICAgIF9yZWZFbG06IHJlZkVsbSB8fCBudWxsXG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGVDb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5pdCAoXG4gIHZub2RlLFxuICBoeWRyYXRpbmcsXG4gIHBhcmVudEVsbSxcbiAgcmVmRWxtXG4pIHtcbiAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICB2bm9kZSxcbiAgICAgIGFjdGl2ZUluc3RhbmNlLFxuICAgICAgcGFyZW50RWxtLFxuICAgICAgcmVmRWxtXG4gICAgKTtcbiAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICB9IGVsc2UgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICBwcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhdGNoIChcbiAgb2xkVm5vZGUsXG4gIHZub2RlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICBjaGlsZC5fdXBkYXRlRnJvbVBhcmVudChcbiAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgKTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICBpZiAoIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgfVxuICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBjYWxsSG9vayh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kkMSAodm5vZGUpIHtcbiAgaWYgKCF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faW5hY3RpdmUgPSB0cnVlO1xuICAgICAgY2FsbEhvb2sodm5vZGUuY29tcG9uZW50SW5zdGFuY2UsICdkZWFjdGl2YXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY2Jcbikge1xuICBpZiAoZmFjdG9yeS5yZXF1ZXN0ZWQpIHtcbiAgICAvLyBwb29sIGNhbGxiYWNrc1xuICAgIGZhY3RvcnkucGVuZGluZ0NhbGxiYWNrcy5wdXNoKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBmYWN0b3J5LnJlcXVlc3RlZCA9IHRydWU7XG4gICAgdmFyIGNicyA9IGZhY3RvcnkucGVuZGluZ0NhbGxiYWNrcyA9IFtjYl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuXG4gICAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiAocmVzKSB7XG4gICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgICByZXMgPSBiYXNlQ3Rvci5leHRlbmQocmVzKTtcbiAgICAgIH1cbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gcmVzO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY2JzW2ldKHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAvLyBoYW5kbGUgcHJvbWlzZVxuICAgIGlmIChyZXMgJiYgdHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nICYmICFmYWN0b3J5LnJlc29sdmVkKSB7XG4gICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHMgKGRhdGEsIEN0b3IpIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcE9wdGlvbnMpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIHZhciBkb21Qcm9wcyA9IGRhdGEuZG9tUHJvcHM7XG4gIGlmIChhdHRycyB8fCBwcm9wcyB8fCBkb21Qcm9wcykge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5KSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgZG9tUHJvcHMsIGtleSwgYWx0S2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChoYXNoKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rcyAoZGF0YSkge1xuICBpZiAoIWRhdGEuaG9vaykge1xuICAgIGRhdGEuaG9vayA9IHt9O1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZnJvbVBhcmVudCA9IGRhdGEuaG9va1trZXldO1xuICAgIHZhciBvdXJzID0gaG9va3Nba2V5XTtcbiAgICBkYXRhLmhvb2tba2V5XSA9IGZyb21QYXJlbnQgPyBtZXJnZUhvb2skMShvdXJzLCBmcm9tUGFyZW50KSA6IG91cnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgIG9uZShhLCBiLCBjLCBkKTtcbiAgICB0d28oYSwgYiwgYywgZCk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2ssIGtleSkge1xuICBrZXkgPSBrZXkgKyBob29rS2V5O1xuICB2YXIgaW5qZWN0ZWRIYXNoID0gZGVmLl9faW5qZWN0ZWQgfHwgKGRlZi5fX2luamVjdGVkID0ge30pO1xuICBpZiAoIWluamVjdGVkSGFzaFtrZXldKSB7XG4gICAgaW5qZWN0ZWRIYXNoW2tleV0gPSB0cnVlO1xuICAgIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuICAgIGlmIChvbGRIb29rKSB7XG4gICAgICBkZWZbaG9va0tleV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9sZEhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmW2hvb2tLZXldID0gaG9vaztcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgb25jZSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZSAoZm4pIHtcbiAgdmFyIGhhbmRsZSA9IHtcbiAgICBmbjogZm4sXG4gICAgaW52b2tlcjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgICB2YXIgZm4gPSBoYW5kbGUuZm47XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShmbikpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGZuW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cyQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBoYW5kbGVcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmICghY3VyKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFvbGQpIHtcbiAgICAgIGlmICghY3VyLmludm9rZXIpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVFdmVudEhhbmRsZShjdXIpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ci5pbnZva2VyLCBldmVudC5vbmNlLCBldmVudC5jYXB0dXJlKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm4gPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKCFvbltuYW1lXSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXS5pbnZva2VyLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub21yYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cmN1dHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGMgPT0gbnVsbCB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0ID0gcmVzW3Jlcy5sZW5ndGggLSAxXTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpKTtcbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAobGFzdCAmJiBsYXN0LnRleHQpIHtcbiAgICAgICAgbGFzdC50ZXh0ICs9IFN0cmluZyhjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGMudGV4dCAmJiBsYXN0ICYmIGxhc3QudGV4dCkge1xuICAgICAgICByZXNbcmVzLmxlbmd0aCAtIDFdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoYy50YWcgJiYgYy5rZXkgPT0gbnVsbCAmJiBuZXN0ZWRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICByZXR1cm4gY2hpbGRyZW4gJiYgY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjICYmIGMuY29tcG9uZW50T3B0aW9uczsgfSlbMF1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGFsd2F5c05vcm1hbGl6ZSkgeyBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7IH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGRhdGEgJiYgZGF0YS5fX29iX18pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAodm5vZGUpIHtcbiAgICBpZiAobnMpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucykge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm5vZGUuY2hpbGRyZW4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2hpbGQudGFnICYmICFjaGlsZC5ucykge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS4kdm5vZGUgPSBudWxsOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IHt9O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG59XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIC8vIGNsb25lIHNsb3Qgbm9kZXMgb24gcmUtcmVuZGVyc1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICB2bS4kc2xvdHNba2V5XSA9IGNsb25lVk5vZGVzKHZtLiRzbG90c1trZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX3BhcmVudFZub2RlICYmIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGljUmVuZGVyRm5zICYmICF2bS5fc3RhdGljVHJlZXMpIHtcbiAgICAgIHZtLl9zdGF0aWNUcmVlcyA9IFtdO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgICAgICBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZSwgdm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkVycm9yIHdoZW4gcmVuZGVyaW5nIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiOlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZVxuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xuXG4gIC8vIHRvU3RyaW5nIGZvciBtdXN0YWNoZXNcbiAgVnVlLnByb3RvdHlwZS5fcyA9IF90b1N0cmluZztcbiAgLy8gY29udmVydCB0ZXh0IHRvIHZub2RlXG4gIFZ1ZS5wcm90b3R5cGUuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIC8vIG51bWJlciBjb252ZXJzaW9uXG4gIFZ1ZS5wcm90b3R5cGUuX24gPSB0b051bWJlcjtcbiAgLy8gZW1wdHkgdm5vZGVcbiAgVnVlLnByb3RvdHlwZS5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIC8vIGxvb3NlIGVxdWFsXG4gIFZ1ZS5wcm90b3R5cGUuX3EgPSBsb29zZUVxdWFsO1xuICAvLyBsb29zZSBpbmRleE9mXG4gIFZ1ZS5wcm90b3R5cGUuX2kgPSBsb29zZUluZGV4T2Y7XG5cbiAgLy8gcmVuZGVyIHN0YXRpYyB0cmVlIGJ5IGluZGV4XG4gIFZ1ZS5wcm90b3R5cGUuX20gPSBmdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICAgIGluZGV4LFxuICAgIGlzSW5Gb3JcbiAgKSB7XG4gICAgdmFyIHRyZWUgPSB0aGlzLl9zdGF0aWNUcmVlc1tpbmRleF07XG4gICAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gICAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUgYnkgZG9pbmcgYSBzaGFsbG93IGNsb25lLlxuICAgIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0cmVlKVxuICAgICAgICA/IGNsb25lVk5vZGVzKHRyZWUpXG4gICAgICAgIDogY2xvbmVWTm9kZSh0cmVlKVxuICAgIH1cbiAgICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gICAgdHJlZSA9IHRoaXMuX3N0YXRpY1RyZWVzW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5KTtcbiAgICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICAgIHJldHVybiB0cmVlXG4gIH07XG5cbiAgLy8gbWFyayBub2RlIGFzIHN0YXRpYyAodi1vbmNlKVxuICBWdWUucHJvdG90eXBlLl9vID0gZnVuY3Rpb24gbWFya09uY2UgKFxuICAgIHRyZWUsXG4gICAgaW5kZXgsXG4gICAga2V5XG4gICkge1xuICAgIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICAgIHJldHVybiB0cmVlXG4gIH07XG5cbiAgZnVuY3Rpb24gbWFya1N0YXRpYyAodHJlZSwga2V5LCBpc09uY2UpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgICBub2RlLmtleSA9IGtleTtcbiAgICBub2RlLmlzT25jZSA9IGlzT25jZTtcbiAgfVxuXG4gIC8vIGZpbHRlciByZXNvbHV0aW9uIGhlbHBlclxuICBWdWUucHJvdG90eXBlLl9mID0gZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG4gIH07XG5cbiAgLy8gcmVuZGVyIHYtZm9yXG4gIFZ1ZS5wcm90b3R5cGUuX2wgPSBmdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgICB2YWwsXG4gICAgcmVuZGVyXG4gICkge1xuICAgIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9O1xuXG4gIC8vIHJlbmRlclNsb3RcbiAgVnVlLnByb3RvdHlwZS5fdCA9IGZ1bmN0aW9uIChcbiAgICBuYW1lLFxuICAgIGZhbGxiYWNrLFxuICAgIHByb3BzLFxuICAgIGJpbmRPYmplY3RcbiAgKSB7XG4gICAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICAgIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgICBleHRlbmQocHJvcHMsIGJpbmRPYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2tcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNsb3ROb2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdO1xuICAgICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgICAgaWYgKHNsb3ROb2RlcyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHNsb3ROb2Rlcy5fcmVuZGVyZWQgJiYgd2FybihcbiAgICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuICAgICAgICAgIFwiLSB0aGlzIHdpbGwgbGlrZWx5IGNhdXNlIHJlbmRlciBlcnJvcnMuXCIsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgICBzbG90Tm9kZXMuX3JlbmRlcmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbG90Tm9kZXMgfHwgZmFsbGJhY2tcbiAgICB9XG4gIH07XG5cbiAgLy8gYXBwbHkgdi1iaW5kIG9iamVjdFxuICBWdWUucHJvdG90eXBlLl9iID0gZnVuY3Rpb24gYmluZFByb3BzIChcbiAgICBkYXRhLFxuICAgIHRhZyxcbiAgICB2YWx1ZSxcbiAgICBhc1Byb3BcbiAgKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnIHx8IGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICAgIHZhciBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH07XG5cbiAgLy8gY2hlY2sgdi1vbiBrZXlDb2Rlc1xuICBWdWUucHJvdG90eXBlLl9rID0gZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gICAgZXZlbnRLZXlDb2RlLFxuICAgIGtleSxcbiAgICBidWlsdEluQWxpYXNcbiAgKSB7XG4gICAgdmFyIGtleUNvZGVzID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbkFsaWFzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGtleUNvZGVzKSkge1xuICAgICAgcmV0dXJuIGtleUNvZGVzLmluZGV4T2YoZXZlbnRLZXlDb2RlKSA9PT0gLTFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGtleUNvZGVzICE9PSBldmVudEtleUNvZGVcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgdmFyIHNsb3RzID0ge307XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gc2xvdHNcbiAgfVxuICB2YXIgZGVmYXVsdFNsb3QgPSBbXTtcbiAgdmFyIG5hbWUsIGNoaWxkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mdW5jdGlvbmFsQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgICAgY2hpbGQuZGF0YSAmJiAobmFtZSA9IGNoaWxkLmRhdGEuc2xvdCkpIHtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWZhdWx0U2xvdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNpbmdsZSB3aGl0ZXNwYWNlXG4gIGlmIChkZWZhdWx0U2xvdC5sZW5ndGggJiYgIShcbiAgICBkZWZhdWx0U2xvdC5sZW5ndGggPT09IDEgJiZcbiAgICAoZGVmYXVsdFNsb3RbMF0udGV4dCA9PT0gJyAnIHx8IGRlZmF1bHRTbG90WzBdLmlzQ29tbWVudClcbiAgKSkge1xuICAgIHNsb3RzLmRlZmF1bHQgPSBkZWZhdWx0U2xvdDtcbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQkMSAoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmIChvbmNlKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkJDEsIHJlbW92ZSQyLCB2bSk7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzOyh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNic1tpXS5hcHBseSh2bSwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9tb3VudCA9IGZ1bmN0aW9uIChcbiAgICBlbCxcbiAgICBoeWRyYXRpbmdcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS4kZWwgPSBlbDtcbiAgICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICAgJ29wdGlvbiBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcbiAgICB2bS5fd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBmdW5jdGlvbiB1cGRhdGVDb21wb25lbnQgKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfSwgbm9vcCk7XG4gICAgaHlkcmF0aW5nID0gZmFsc2U7XG4gICAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICAgIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiAoXG4gICAgcHJvcHNEYXRhLFxuICAgIGxpc3RlbmVycyxcbiAgICBwYXJlbnRWbm9kZSxcbiAgICByZW5kZXJDaGlsZHJlblxuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBoYXNDaGlsZHJlbiA9ICEhKHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCByZW5kZXJDaGlsZHJlbik7XG4gICAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gICAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcbiAgICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gICAgfVxuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuICAgIC8vIHVwZGF0ZSBwcm9wc1xuICAgIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IGZhbHNlO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgb2JzZXJ2ZXJTdGF0ZS5pc1NldHRpbmdQcm9wcyA9IHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgICAgdm1ba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHZtLiRvcHRpb25zLnByb3BzLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAgIH1cbiAgICAgIG9ic2VydmVyU3RhdGUuc2hvdWxkQ29udmVydCA9IHRydWU7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBvYnNlcnZlclN0YXRlLmlzU2V0dGluZ1Byb3BzID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gICAgfVxuICAgIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcbiAgICB9XG4gICAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlJDEocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBoYW5kbGVyc1tpXS5jYWxsKHZtKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbn1cblxuLyogICovXG5cblxudmFyIHF1ZXVlID0gW107XG52YXIgaGFzJDEgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBxdWV1ZS5sZW5ndGggPSAwO1xuICBoYXMkMSA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZCwgdm07XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzJDFbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXMkMVtpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gY29uZmlnLl9tYXhVcGRhdGVDb3VudCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBjYWxsIHVwZGF0ZWQgaG9va3NcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzJDFbaWRdID09IG51bGwpIHtcbiAgICBoYXMkMVtpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+PSAwICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoTWF0aC5tYXgoaSwgaW5kZXgpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9uc1xuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHRoaXMudm0sIHRoaXMudm0pO1xuICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gIGlmICh0aGlzLmRlZXApIHtcbiAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG4gIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMkMS5kZXBzW2ldO1xuICAgIGlmICghdGhpcyQxLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGUsIHRoaXMudm0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICAgICAgIChcIkVycm9yIGluIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIiksXG4gICAgICAgICAgICAgIHRoaXMudm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aHJvdyBlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcyQxLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSQxKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWwpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2gpIHsgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTsgfVxufVxuXG52YXIgaXNSZXNlcnZlZFByb3AgPSB7IGtleTogMSwgcmVmOiAxLCBzbG90OiAxIH07XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICB2YXIgaXNSb290ID0gIXZtLiRwYXJlbnQ7XG4gIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICBvYnNlcnZlclN0YXRlLnNob3VsZENvbnZlcnQgPSBpc1Jvb3Q7XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc1Jlc2VydmVkUHJvcFtrZXldKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHZhbGlkYXRlUHJvcChrZXksIHByb3BzLCBwcm9wc0RhdGEsIHZtKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodm0uJHBhcmVudCAmJiAhb2JzZXJ2ZXJTdGF0ZS5pc1NldHRpbmdQcm9wcykge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wcywgcHJvcHNEYXRhLCB2bSkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIGxvb3AoIGkgKTtcbiAgb2JzZXJ2ZXJTdGF0ZS5zaG91bGRDb252ZXJ0ID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG4gIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbidcbiAgICA/IGRhdGEuY2FsbCh2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5c1tpXSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyAoa2V5c1tpXSkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm94eSh2bSwga2V5c1tpXSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbnZhciBjb21wdXRlZFNoYXJlZERlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSBpbiB2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJleGlzdGluZyBpbnN0YW5jZSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2lsbCBiZSBcIiArXG4gICAgICAgIFwib3ZlcndyaXR0ZW4gYnkgYSBjb21wdXRlZCBwcm9wZXJ0eSB3aXRoIHRoZSBzYW1lIG5hbWUuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb21wdXRlZFNoYXJlZERlZmluaXRpb24uZ2V0ID0gbWFrZUNvbXB1dGVkR2V0dGVyKHVzZXJEZWYsIHZtKTtcbiAgICAgIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlZFNoYXJlZERlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgICAgPyB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICAgID8gbWFrZUNvbXB1dGVkR2V0dGVyKHVzZXJEZWYuZ2V0LCB2bSlcbiAgICAgICAgICA6IGJpbmQkMSh1c2VyRGVmLmdldCwgdm0pXG4gICAgICAgIDogbm9vcDtcbiAgICAgIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldFxuICAgICAgICA/IGJpbmQkMSh1c2VyRGVmLnNldCwgdm0pXG4gICAgICAgIDogbm9vcDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZtLCBrZXksIGNvbXB1dGVkU2hhcmVkRGVmaW5pdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUNvbXB1dGVkR2V0dGVyIChnZXR0ZXIsIG93bmVyKSB7XG4gIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIob3duZXIsIGdldHRlciwgbm9vcCwge1xuICAgIGxhenk6IHRydWVcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICB9XG4gICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgfVxuICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgdm1ba2V5XSA9IG1ldGhvZHNba2V5XSA9PSBudWxsID8gbm9vcCA6IGJpbmQkMShtZXRob2RzW2tleV0sIHZtKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBtZXRob2RzW2tleV0gPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbiB1bmRlZmluZWQgdmFsdWUgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKHZtLCBrZXksIGhhbmRsZXIpIHtcbiAgdmFyIG9wdGlvbnM7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHZtLiR3YXRjaChrZXksIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhXG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAobmV3RGF0YSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQkMTtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJveHkgKHZtLCBrZXkpIHtcbiAgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodm0sIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gcHJveHlHZXR0ZXIgKCkge1xuICAgICAgICByZXR1cm4gdm0uX2RhdGFba2V5XVxuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gcHJveHlTZXR0ZXIgKHZhbCkge1xuICAgICAgICB2bS5fZGF0YVtrZXldID0gdmFsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQrKztcbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMucHJvcHNEYXRhID0gb3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSBvcHRpb25zLl9yZW5kZXJDaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICBvcHRzLl9wYXJlbnRFbG0gPSBvcHRpb25zLl9wYXJlbnRFbG07XG4gIG9wdHMuX3JlZkVsbSA9IG9wdGlvbnMuX3JlZkVsbTtcbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXIub3B0aW9ucztcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgdmFyIGV4dGVuZE9wdGlvbnMgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZFxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICBleHRlbmRPcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgICAgZXh0ZW5kT3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgICAgIGV4dGVuZE9wdGlvbnMuX3Njb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIGV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIFZ1ZSQzIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlJDMpKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUkMyk7XG5zdGF0ZU1peGluKFZ1ZSQzKTtcbmV2ZW50c01peGluKFZ1ZSQzKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSQzKTtcbnJlbmRlck1peGluKFZ1ZSQzKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwbHVnaW4uaW5zdGFsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgcGx1Z2luLmluc3RhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAgICAgJ2FuZCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBjb25maWcuX2Fzc2V0VHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgY29uZmlnLmlzUmVzZXJ2ZWRUYWcoaWQpKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICAgICAgICAgJ2lkOiAnICsgaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxudmFyIHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cF07XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGNhY2hlLCBmaWx0ZXIpIHtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlZE5vZGUpO1xuICAgICAgICBjYWNoZVtrZXldID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5ICh2bm9kZSkge1xuICBpZiAodm5vZGUpIHtcbiAgICBpZiAoIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pbmFjdGl2ZSkge1xuICAgICAgY2FsbEhvb2sodm5vZGUuY29tcG9uZW50SW5zdGFuY2UsICdkZWFjdGl2YXRlZCcpO1xuICAgIH1cbiAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICB9XG59XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGVba2V5XSk7XG4gICAgfVxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgaW5jbHVkZTogZnVuY3Rpb24gaW5jbHVkZSAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMuY2FjaGUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0sXG4gICAgZXhjbHVkZTogZnVuY3Rpb24gZXhjbHVkZSAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMuY2FjaGUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQodGhpcy4kc2xvdHMuZGVmYXVsdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAoXG4gICAgICAgICh0aGlzLmluY2x1ZGUgJiYgIW1hdGNoZXModGhpcy5pbmNsdWRlLCBuYW1lKSkgfHxcbiAgICAgICAgKHRoaXMuZXhjbHVkZSAmJiBtYXRjaGVzKHRoaXMuZXhjbHVkZSwgbmFtZSkpXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKHRoaXMuY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgfVxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG4gIFZ1ZS51dGlsID0gdXRpbDtcbiAgVnVlLnNldCA9IHNldCQxO1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbmZpZy5fYXNzZXRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUkMyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUkMy5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5WdWUkMy52ZXJzaW9uID0gJzIuMS4xMCc7XG5cbi8qICAqL1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0Jyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGdlbkNsYXNzRnJvbURhdGEoZGF0YSlcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBjaGlsZC5jbGFzc1xuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGcm9tRGF0YSAoZGF0YSkge1xuICB2YXIgZHluYW1pY0NsYXNzID0gZGF0YS5jbGFzcztcbiAgdmFyIHN0YXRpY0NsYXNzID0gZGF0YS5zdGF0aWNDbGFzcztcbiAgaWYgKHN0YXRpY0NsYXNzIHx8IGR5bmFtaWNDbGFzcykge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIHN0cmluZ2lmaWVkO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0pIHtcbiAgICAgICAgaWYgKChzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkpIHtcbiAgICAgICAgICByZXMgKz0gc3RyaW5naWZpZWQgKyAnICc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWVba2V5XSkgeyByZXMgKz0ga2V5ICsgJyAnOyB9XG4gICAgfVxuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsJyArXG4gICdmb250LWZhY2UsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1ByZVRhZyA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHRhZyA9PT0gJ3ByZSc7IH07XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RvciA9IGVsO1xuICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIHNlbGVjdG9yXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICB9XG4gIHJldHVybiBlbFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgJ211bHRpcGxlJyBpbiB2bm9kZS5kYXRhLmF0dHJzKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZSAobm9kZSwga2V5LCB2YWwpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWwpO1xufVxuXG5cbnZhciBub2RlT3BzID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcblx0Y3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG5cdGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcblx0Y3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcblx0aW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG5cdHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcblx0YXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuXHRwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuXHRuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG5cdHRhZ05hbWU6IHRhZ05hbWUsXG5cdHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcblx0c2V0QXR0cmlidXRlOiBzZXRBdHRyaWJ1dGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFrZXkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlJDEocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkgJiYgcmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcblxuLypcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyQxID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIGlzVW5kZWYgKHMpIHtcbiAgcmV0dXJuIHMgPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAocykge1xuICByZXR1cm4gcyAhPSBudWxsXG59XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAodm5vZGUxLCB2bm9kZTIpIHtcbiAgcmV0dXJuIChcbiAgICB2bm9kZTEua2V5ID09PSB2bm9kZTIua2V5ICYmXG4gICAgdm5vZGUxLnRhZyA9PT0gdm5vZGUyLnRhZyAmJlxuICAgIHZub2RlMS5pc0NvbW1lbnQgPT09IHZub2RlMi5pc0NvbW1lbnQgJiZcbiAgICAhdm5vZGUxLmRhdGEgPT09ICF2bm9kZTIuZGF0YVxuICApXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MkMS5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rcyQxW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAobW9kdWxlc1tqXVtob29rcyQxW2ldXSAhPT0gdW5kZWZpbmVkKSB7IGNic1tob29rcyQxW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3MkMVtpXV0pOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluUHJlID0gMDtcbiAgZnVuY3Rpb24gY3JlYXRlRWxtICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgbmVzdGVkKSB7XG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgICAgaW5QcmUrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWluUHJlICYmXG4gICAgICAgICAgIXZub2RlLm5zICYmXG4gICAgICAgICAgIShjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJiBjb25maWcuaWdub3JlZEVsZW1lbnRzLmluZGV4T2YodGFnKSA+IC0xKSAmJlxuICAgICAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHRhZylcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICdyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnICtcbiAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGluUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2bm9kZS5pc0NvbW1lbnQpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc1JlYWN0aXZhdGVkKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmKSB7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHJlZikge1xuICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaS5jcmVhdGUpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpLmluc2VydCkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldEF0dHJpYnV0ZSh2bm9kZS5lbG0sIGksICcnKTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0QXR0cmlidXRlKHZub2RlLmVsbSwgaSwgJycpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChybSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmICghcm0pIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgZWxtVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldIDogbnVsbDtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsbVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZWxtVG9Nb3ZlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAnSXQgc2VlbXMgdGhlcmUgYXJlIGR1cGxpY2F0ZSBrZXlzIHRoYXQgaXMgY2F1c2luZyBhbiB1cGRhdGUgZXJyb3IuICcgK1xuICAgICAgICAgICAgICAnTWFrZSBzdXJlIGVhY2ggdi1mb3IgaXRlbSBoYXMgYSB1bmlxdWUga2V5LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzYW1lVm5vZGUoZWxtVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgbmV3U3RhcnRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKHZub2RlLmlzU3RhdGljICYmXG4gICAgICAgIG9sZFZub2RlLmlzU3RhdGljICYmXG4gICAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAgICh2bm9kZS5pc0Nsb25lZCB8fCB2bm9kZS5pc09uY2UpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgaGFzRGF0YSA9IGlzRGVmKGRhdGEpO1xuICAgIGlmIChoYXNEYXRhICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChoYXNEYXRhICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaGFzRGF0YSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaW5pdGlhbCAmJiB2bm9kZS5wYXJlbnQpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgYmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsc3R5bGUsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICB2bm9kZS5lbG0gPSBlbG07XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWJhaWxlZCkge1xuICAgICAgICAgICAgICBiYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHxcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICBpZiAoIXZub2RlKSB7XG4gICAgICBpZiAob2xkVm5vZGUpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoIW9sZFZub2RlKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoJ3NlcnZlci1yZW5kZXJlZCcpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3NlcnZlci1yZW5kZXJlZCcpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGh5ZHJhdGluZykge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSQxID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0kMSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodm5vZGUucGFyZW50KSB7XG4gICAgICAgICAgLy8gY29tcG9uZW50IHJvb3QgZWxlbWVudCByZXBsYWNlZC5cbiAgICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5jcmVhdGVbaV0oZW1wdHlOb2RlLCB2bm9kZS5wYXJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJlbnRFbG0kMSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0kMSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLmRhdGEuaG9vayB8fCAodm5vZGUuZGF0YS5ob29rID0ge30pLCAnaW5zZXJ0JywgY2FsbEluc2VydCwgJ2Rpci1pbnNlcnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZS5kYXRhLmhvb2sgfHwgKHZub2RlLmRhdGEuaG9vayA9IHt9KSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0sICdkaXItcG9zdHBhdGNoJyk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmICghb2xkVm5vZGUuZGF0YS5hdHRycyAmJiAhdm5vZGUuZGF0YS5hdHRycykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGF0dHJzLl9fb2JfXykge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUU5ICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoYXR0cnNba2V5XSA9PSBudWxsKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGtleSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKCFkYXRhLnN0YXRpY0NsYXNzICYmICFkYXRhLmNsYXNzICYmXG4gICAgICAoIW9sZERhdGEgfHwgKCFvbGREYXRhLnN0YXRpY0NsYXNzICYmICFvbGREYXRhLmNsYXNzKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3MpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBhZGQkMiAoXG4gIGV2ZW50LFxuICBoYW5kbGVyLFxuICBvbmNlLFxuICBjYXB0dXJlXG4pIHtcbiAgaWYgKG9uY2UpIHtcbiAgICB2YXIgb2xkSGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgICBoYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICByZW1vdmUkMyhldmVudCwgaGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxXG4gICAgICAgID8gb2xkSGFuZGxlcihldilcbiAgICAgICAgOiBvbGRIYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDMgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKCFvbGRWbm9kZS5kYXRhLm9uICYmICF2bm9kZS5kYXRhLm9uKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQyLCByZW1vdmUkMywgdm5vZGUuY29udGV4dCk7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKCFvbGRWbm9kZS5kYXRhLmRvbVByb3BzICYmICF2bm9kZS5kYXRhLmRvbVByb3BzKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKHByb3BzLl9fb2JfXykge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAocHJvcHNba2V5XSA9PSBudWxsKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gY3VyID09IG51bGwgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgdm5vZGUsIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKFxuICBlbG0sXG4gIHZub2RlLFxuICBjaGVja1ZhbFxuKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIHZub2RlLnRhZyA9PT0gJ29wdGlvbicgfHxcbiAgICBpc0RpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNJbnB1dENoYW5nZWQodm5vZGUsIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc0RpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXMgbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG0gJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0lucHV0Q2hhbmdlZCAodm5vZGUsIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSB2bm9kZS5lbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSB2bm9kZS5lbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyKSB8fCB2bm9kZS5lbG0udHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gIH1cbiAgaWYgKG1vZGlmaWVycyAmJiBtb2RpZmllcnMudHJpbSkge1xuICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChjaGlsZE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSkpIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5zdHlsZVtub3JtYWxpemUobmFtZSldID0gdmFsO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIHRlc3RFbDtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgdGVzdEVsID0gdGVzdEVsIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiB0ZXN0RWwuc3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgdXBwZXIgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgdXBwZXI7XG4gICAgaWYgKHByZWZpeGVkIGluIHRlc3RFbC5zdHlsZSkge1xuICAgICAgcmV0dXJuIHByZWZpeGVkXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoIWRhdGEuc3RhdGljU3R5bGUgJiYgIWRhdGEuc3R5bGUgJiZcbiAgICAgICFvbGREYXRhLnN0YXRpY1N0eWxlICYmICFvbGREYXRhLnN0eWxlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZFZub2RlLmRhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGRWbm9kZS5kYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgdm5vZGUuZGF0YS5zdHlsZSA9IHN0eWxlLl9fb2JfXyA/IGV4dGVuZCh7fSwgc3R5bGUpIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChuZXdTdHlsZVtuYW1lXSA9PSBudWxsKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICFjbHMudHJpbSgpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9ICcgJyArIGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSArICcgJztcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhY2xzLnRyaW0oKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSAnICcgKyBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgKyAnICc7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIudHJpbSgpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgOiBzZXRUaW1lb3V0O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICAoZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSkpLnB1c2goY2xzKTtcbiAgYWRkQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlJDEoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciB0cmFuc2l0aW9uZURlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25lRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSBzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChlbC5fbGVhdmVDYikge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsLl9lbnRlckNiIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyID8gYXBwZWFyQ2xhc3MgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhciA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhciA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZCkgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9XG4gICAgZW50ZXJIb29rICYmXG4gICAgLy8gZW50ZXJIb29rIG1heSBiZSBhIGJvdW5kIG1ldGhvZCB3aGljaCBleHBvc2VzXG4gICAgLy8gdGhlIGxlbmd0aCBvZiBvcmlnaW5hbCBmbiBhcyBfbGVuZ3RoXG4gICAgKGVudGVySG9vay5fbGVuZ3RoIHx8IGVudGVySG9vay5sZW5ndGgpID4gMTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZS5kYXRhLmhvb2sgfHwgKHZub2RlLmRhdGEuaG9vayA9IHt9KSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0sICd0cmFuc2l0aW9uLWluc2VydCcpO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGVsLl9lbnRlckNiKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbC5fbGVhdmVDYiB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9XG4gICAgbGVhdmUgJiZcbiAgICAvLyBsZWF2ZSBob29rIG1heSBiZSBhIGJvdW5kIG1ldGhvZCB3aGljaCBleHBvc2VzXG4gICAgLy8gdGhlIGxlbmd0aCBvZiBvcmlnaW5hbCBmbiBhcyBfbGVuZ3RoXG4gICAgKGxlYXZlLl9sZW5ndGggfHwgbGVhdmUubGVuZ3RoKSA+IDE7XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbdm5vZGUua2V5XSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBhcHBlYXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGFwcGVhclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIiksXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2gkMSA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG52YXIgbW9kZWxhYmxlVGFnUkUgPSAvXmlucHV0fHNlbGVjdHx0ZXh0YXJlYXx2dWUtY29tcG9uZW50LVswLTldKygtWzAtOWEtekEtWl8tXSopPyQvO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIG1vZGVsID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW1vZGVsYWJsZVRhZ1JFLnRlc3Qodm5vZGUudGFnKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwidi1tb2RlbCBpcyBub3Qgc3VwcG9ydGVkIG9uIGVsZW1lbnQgdHlwZTogPFwiICsgKHZub2RlLnRhZykgKyBcIj4uIFwiICtcbiAgICAgICAgICAnSWYgeW91IGFyZSB3b3JraW5nIHdpdGggY29udGVudGVkaXRhYmxlLCBpdFxcJ3MgcmVjb21tZW5kZWQgdG8gJyArXG4gICAgICAgICAgJ3dyYXAgYSBsaWJyYXJ5IGRlZGljYXRlZCBmb3IgdGhhdCBwdXJwb3NlIGluc2lkZSBhIGN1c3RvbSBjb21wb25lbnQuJyxcbiAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICB2YXIgY2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH07XG4gICAgICBjYigpO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICAgICAgc2V0VGltZW91dChjYiwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgZWwudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGlmICghaXNBbmRyb2lkKSB7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBlbC5vcHRpb25zKTsgfSlcbiAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgZWwub3B0aW9ucyk7XG4gICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uc1tpXSksIHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uICYmICFpc0lFOSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHZhbHVlID09PSBvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiAmJiAhaXNJRTkpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IG1vZGVsLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxuLy8gUHJvdmlkZXMgdHJhbnNpdGlvbiBzdXBwb3J0IGZvciBhIHNpbmdsZSBlbGVtZW50L2NvbXBvbmVudC5cbi8vIHN1cHBvcnRzIHRyYW5zaXRpb24gbW9kZSAob3V0LWluIC8gaW4tb3V0KVxuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZ1xufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXS5mbjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgcmV0dXJuIC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKVxuICAgID8gaCgna2VlcC1hbGl2ZScpXG4gICAgOiBudWxsXG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWc7IH0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICB2YXIga2V5ID0gY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9KSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob2xkQ2hpbGQgJiYgb2xkQ2hpbGQuZGF0YSAmJiAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkICYmIChvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSwga2V5KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUsIGtleSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSwga2V5KTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHtcbiAgICAgICAgICBkZWxheWVkTGVhdmUgPSBsZWF2ZTtcbiAgICAgICAgfSwga2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgbGlzdCBpdGVtcy5cbi8vIHN1cHBvcnRzIG1vdmUgdHJhbnNpdGlvbnMgdXNpbmcgdGhlIEZMSVAgdGVjaG5pcXVlLlxuXG4vLyBCZWNhdXNlIHRoZSB2ZG9tJ3MgY2hpbGRyZW4gdXBkYXRlIGFsZ29yaXRobSBpcyBcInVuc3RhYmxlXCIgLSBpLmUuXG4vLyBpdCBkb2Vzbid0IGd1YXJhbnRlZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25pbmcgb2YgcmVtb3ZlZCBlbGVtZW50cyxcbi8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG4vLyBpbiB0aGUgZmlyc3QgcGFzcywgd2UgcmVtb3ZlIGFsbCBub2RlcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCxcbi8vIHRyaWdnZXJpbmcgdGhlaXIgbGVhdmluZyB0cmFuc2l0aW9uOyBpbiB0aGUgc2Vjb25kIHBhc3MsIHdlIGluc2VydC9tb3ZlXG4vLyBpbnRvIHRoZSBmaW5hbCBkaXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuLy8gbm9kZXMgd2lsbCByZW1haW4gd2hlcmUgdGhleSBzaG91bGQgYmUuXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzXG4gICAgICAgICAgICA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxuICAgICAgICAgICAgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24gYmVmb3JlVXBkYXRlICgpIHtcbiAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgdGhpcy5fX3BhdGNoX18oXG4gICAgICB0aGlzLl92bm9kZSxcbiAgICAgIHRoaXMua2VwdCxcbiAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICk7XG4gICAgdGhpcy5fdm5vZGUgPSB0aGlzLmtlcHQ7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIHZhciBmID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5faGFzTW92ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGVsKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZSQzLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblZ1ZSQzLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZSQzLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUkMy5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlJDMub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZSQzLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlJDMucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoJDEgOiBub29wO1xuXG4vLyB3cmFwIG1vdW50XG5WdWUkMy5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiB0aGlzLl9tb3VudChlbCwgaHlkcmF0aW5nKVxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpbkJyb3dzZXIgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICk7XG59XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUkMyk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIGluQnJvd3NlciAmJiAhaXNFZGdlICYmIC9DaHJvbWVcXC9cXGQrLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICApO1xuICAgIH1cbiAgfVxufSwgMCk7XG5cbi8qICAqL1xuXG4vLyBjaGVjayB3aGV0aGVyIGN1cnJlbnQgYnJvd3NlciBlbmNvZGVzIGEgY2hhciBpbnNpZGUgYXR0cmlidXRlIHZhbHVlc1xuZnVuY3Rpb24gc2hvdWxkRGVjb2RlIChjb250ZW50LCBlbmNvZGVkKSB7XG4gIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LmlubmVySFRNTCA9IFwiPGRpdiBhPVxcXCJcIiArIGNvbnRlbnQgKyBcIlxcXCI+XCI7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoZW5jb2RlZCkgPiAwXG59XG5cbi8vICMzNjYzXG4vLyBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSBpbkJyb3dzZXIgPyBzaG91bGREZWNvZGUoJ1xcbicsICcmIzEwOycpIDogZmFsc2U7XG5cbi8qICAqL1xuXG52YXIgZGVjb2RlcjtcblxuZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7XG4gIGRlY29kZXIgPSBkZWNvZGVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7XG4gIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50XG59XG5cbi8qICAqL1xuXG52YXIgaXNVbmFyeVRhZyA9IG1ha2VNYXAoXG4gICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbiwnICtcbiAgJ2xpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJyxcbiAgdHJ1ZVxuKTtcblxuLy8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuXG4vLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG52YXIgY2FuQmVMZWZ0T3BlblRhZyA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJyxcbiAgdHJ1ZVxuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG52YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0sJyArXG4gICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICtcbiAgJ3RpdGxlLHRyLHRyYWNrJyxcbiAgdHJ1ZVxuKTtcblxuLyoqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cbiAqL1xuXG4vKiFcbiAqIEhUTUwgUGFyc2VyIEJ5IEpvaG4gUmVzaWcgKGVqb2huLm9yZylcbiAqIE1vZGlmaWVkIGJ5IEp1cml5IFwia2FuZ2F4XCIgWmF5dHNldlxuICogT3JpZ2luYWwgY29kZSBieSBFcmlrIEFydmlkc3NvbiwgTW96aWxsYSBQdWJsaWMgTGljZW5zZVxuICogaHR0cDovL2VyaWsuZWFlLm5ldC9zaW1wbGVodG1scGFyc2VyL3NpbXBsZWh0bWxwYXJzZXIuanNcbiAqL1xuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBzaW5nbGVBdHRySWRlbnRpZmllciA9IC8oW15cXHNcIic8Pi89XSspLztcbnZhciBzaW5nbGVBdHRyQXNzaWduID0gLyg/Oj0pLztcbnZhciBzaW5nbGVBdHRyVmFsdWVzID0gW1xuICAvLyBhdHRyIHZhbHVlIGRvdWJsZSBxdW90ZXNcbiAgL1wiKFteXCJdKilcIisvLnNvdXJjZSxcbiAgLy8gYXR0ciB2YWx1ZSwgc2luZ2xlIHF1b3Rlc1xuICAvJyhbXiddKiknKy8uc291cmNlLFxuICAvLyBhdHRyIHZhbHVlLCBubyBxdW90ZXNcbiAgLyhbXlxcc1wiJz08PmBdKykvLnNvdXJjZVxuXTtcbnZhciBhdHRyaWJ1dGUgPSBuZXcgUmVnRXhwKFxuICAnXlxcXFxzKicgKyBzaW5nbGVBdHRySWRlbnRpZmllci5zb3VyY2UgK1xuICAnKD86XFxcXHMqKCcgKyBzaW5nbGVBdHRyQXNzaWduLnNvdXJjZSArICcpJyArXG4gICdcXFxccyooPzonICsgc2luZ2xlQXR0clZhbHVlcy5qb2luKCd8JykgKyAnKSk/J1xuKTtcblxuLy8gY291bGQgdXNlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk5L1JFQy14bWwtbmFtZXMtMTk5OTAxMTQvI05ULVFOYW1lXG4vLyBidXQgZm9yIFZ1ZSB0ZW1wbGF0ZXMgd2UgY2FuIGVuZm9yY2UgYSBzaW1wbGUgY2hhcnNldFxudmFyIG5jbmFtZSA9ICdbYS16QS1aX11bXFxcXHdcXFxcLVxcXFwuXSonO1xudmFyIHFuYW1lQ2FwdHVyZSA9ICcoKD86JyArIG5jbmFtZSArICdcXFxcOik/JyArIG5jbmFtZSArICcpJztcbnZhciBzdGFydFRhZ09wZW4gPSBuZXcgUmVnRXhwKCdePCcgKyBxbmFtZUNhcHR1cmUpO1xudmFyIHN0YXJ0VGFnQ2xvc2UgPSAvXlxccyooXFwvPyk+LztcbnZhciBlbmRUYWcgPSBuZXcgUmVnRXhwKCdePFxcXFwvJyArIHFuYW1lQ2FwdHVyZSArICdbXj5dKj4nKTtcbnZhciBkb2N0eXBlID0gL148IURPQ1RZUEUgW14+XSs+L2k7XG52YXIgY29tbWVudCA9IC9ePCEtLS87XG52YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxcWy87XG5cbnZhciBJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOID0gZmFsc2U7XG4neCcucmVwbGFjZSgveCguKT8vZywgZnVuY3Rpb24gKG0sIGcpIHtcbiAgSVNfUkVHRVhfQ0FQVFVSSU5HX0JST0tFTiA9IGcgPT09ICcnO1xufSk7XG5cbi8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxudmFyIGlzU2NyaXB0T3JTdHlsZSA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZScsIHRydWUpO1xudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGx0UkUgPSAvJmx0Oy9nO1xudmFyIGd0UkUgPSAvJmd0Oy9nO1xudmFyIG5sUkUgPSAvJiMxMDsvZztcbnZhciBhbXBSRSA9IC8mYW1wOy9nO1xudmFyIHF1b3RlUkUgPSAvJnF1b3Q7L2c7XG5cbmZ1bmN0aW9uIGRlY29kZUF0dHIgKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcykge1xuICBpZiAoc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobmxSRSwgJ1xcbicpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxuICAgIC5yZXBsYWNlKGx0UkUsICc8JylcbiAgICAucmVwbGFjZShndFJFLCAnPicpXG4gICAgLnJlcGxhY2UoYW1wUkUsICcmJylcbiAgICAucmVwbGFjZShxdW90ZVJFLCAnXCInKVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHNjcmlwdCBvciBzdHlsZSBlbGVtZW50XG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1NjcmlwdE9yU3R5bGUobGFzdFRhZykpIHtcbiAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAvLyBDb21tZW50OlxuICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgYWR2YW5jZShjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29uZGl0aW9uYWxfY29tbWVudCNEb3dubGV2ZWwtcmV2ZWFsZWRfY29uZGl0aW9uYWxfY29tbWVudFxuICAgICAgICBpZiAoY29uZGl0aW9uYWxDb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29uZGl0aW9uYWxFbmQgPSBodG1sLmluZGV4T2YoJ10+Jyk7XG5cbiAgICAgICAgICBpZiAoY29uZGl0aW9uYWxFbmQgPj0gMCkge1xuICAgICAgICAgICAgYWR2YW5jZShjb25kaXRpb25hbEVuZCArIDIpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb2N0eXBlOlxuICAgICAgICB2YXIgZG9jdHlwZU1hdGNoID0gaHRtbC5tYXRjaChkb2N0eXBlKTtcbiAgICAgICAgaWYgKGRvY3R5cGVNYXRjaCkge1xuICAgICAgICAgIGFkdmFuY2UoZG9jdHlwZU1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuZCB0YWc6XG4gICAgICAgIHZhciBlbmRUYWdNYXRjaCA9IGh0bWwubWF0Y2goZW5kVGFnKTtcbiAgICAgICAgaWYgKGVuZFRhZ01hdGNoKSB7XG4gICAgICAgICAgdmFyIGN1ckluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgYWR2YW5jZShlbmRUYWdNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIHBhcnNlRW5kVGFnKGVuZFRhZ01hdGNoWzFdLCBjdXJJbmRleCwgaW5kZXgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGFydCB0YWc6XG4gICAgICAgIHZhciBzdGFydFRhZ01hdGNoID0gcGFyc2VTdGFydFRhZygpO1xuICAgICAgICBpZiAoc3RhcnRUYWdNYXRjaCkge1xuICAgICAgICAgIGhhbmRsZVN0YXJ0VGFnKHN0YXJ0VGFnTWF0Y2gpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCQxID0gKHZvaWQgMCksIG5leHQgPSAodm9pZCAwKTtcbiAgICAgIGlmICh0ZXh0RW5kID4gMCkge1xuICAgICAgICByZXN0JDEgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QkMSkgJiZcbiAgICAgICAgICAhc3RhcnRUYWdPcGVuLnRlc3QocmVzdCQxKSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCQxKSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0JDEpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIDwgaW4gcGxhaW4gdGV4dCwgYmUgZm9yZ2l2aW5nIGFuZCB0cmVhdCBpdCBhcyB0ZXh0XG4gICAgICAgICAgbmV4dCA9IHJlc3QkMS5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCQxID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICAgIGFkdmFuY2UodGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgICAgaHRtbCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIGVuZFRhZ0xlbmd0aCA9IDA7XG4gICAgICB2YXIgcmVzdCA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoc3RhY2tlZFRhZyAhPT0gJ3NjcmlwdCcgJiYgc3RhY2tlZFRhZyAhPT0gJ3N0eWxlJyAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L2csICckMScpXG4gICAgICAgICAgICAucmVwbGFjZSgvPCFcXFtDREFUQVxcWyhbXFxzXFxTXSo/KV1dPi9nLCAnJDEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdC5sZW5ndGg7XG4gICAgICBodG1sID0gcmVzdDtcbiAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT09IGxhc3QgJiYgb3B0aW9ucy5jaGFycykge1xuICAgICAgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gQ2xlYW4gdXAgYW55IHJlbWFpbmluZyB0YWdzXG4gIHBhcnNlRW5kVGFnKCk7XG5cbiAgZnVuY3Rpb24gYWR2YW5jZSAobikge1xuICAgIGluZGV4ICs9IG47XG4gICAgaHRtbCA9IGh0bWwuc3Vic3RyaW5nKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTdGFydFRhZyAoKSB7XG4gICAgdmFyIHN0YXJ0ID0gaHRtbC5tYXRjaChzdGFydFRhZ09wZW4pO1xuICAgIGlmIChzdGFydCkge1xuICAgICAgdmFyIG1hdGNoID0ge1xuICAgICAgICB0YWdOYW1lOiBzdGFydFsxXSxcbiAgICAgICAgYXR0cnM6IFtdLFxuICAgICAgICBzdGFydDogaW5kZXhcbiAgICAgIH07XG4gICAgICBhZHZhbmNlKHN0YXJ0WzBdLmxlbmd0aCk7XG4gICAgICB2YXIgZW5kLCBhdHRyO1xuICAgICAgd2hpbGUgKCEoZW5kID0gaHRtbC5tYXRjaChzdGFydFRhZ0Nsb3NlKSkgJiYgKGF0dHIgPSBodG1sLm1hdGNoKGF0dHJpYnV0ZSkpKSB7XG4gICAgICAgIGFkdmFuY2UoYXR0clswXS5sZW5ndGgpO1xuICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCkge1xuICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuICAgICAgICBhZHZhbmNlKGVuZFswXS5sZW5ndGgpO1xuICAgICAgICBtYXRjaC5lbmQgPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3RhcnRUYWcgKG1hdGNoKSB7XG4gICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuICAgIHZhciB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgIGlmIChleHBlY3RIVE1MKSB7XG4gICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgdGFnTmFtZSA9PT0gJ2h0bWwnICYmIGxhc3RUYWcgPT09ICdoZWFkJyB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICB2YXIgYXR0cnMgPSBuZXcgQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICAvLyBoYWNraXNoIHdvcmsgYXJvdW5kIEZGIGJ1ZyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zNjk3NzhcbiAgICAgIGlmIChJU19SRUdFWF9DQVBUVVJJTkdfQlJPS0VOICYmIGFyZ3NbMF0uaW5kZXhPZignXCJcIicpID09PSAtMSkge1xuICAgICAgICBpZiAoYXJnc1szXSA9PT0gJycpIHsgZGVsZXRlIGFyZ3NbM107IH1cbiAgICAgICAgaWYgKGFyZ3NbNF0gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzRdOyB9XG4gICAgICAgIGlmIChhcmdzWzVdID09PSAnJykgeyBkZWxldGUgYXJnc1s1XTsgfVxuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIoXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc1xuICAgICAgICApXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghdW5hcnkpIHtcbiAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzIH0pO1xuICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgICB1bmFyeVNsYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBwb3MsIGxvd2VyQ2FzZWRUYWdOYW1lO1xuICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBsb3dlckNhc2VkVGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBmb3IgKHBvcyA9IHN0YWNrLmxlbmd0aCAtIDE7IHBvcyA+PSAwOyBwb3MtLSkge1xuICAgICAgICBpZiAoc3RhY2tbcG9zXS5sb3dlckNhc2VkVGFnID09PSBsb3dlckNhc2VkVGFnTmFtZSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm8gdGFnIG5hbWUgaXMgcHJvdmlkZWQsIGNsZWFuIHNob3BcbiAgICAgIHBvcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAvLyBDbG9zZSBhbGwgdGhlIG9wZW4gZWxlbWVudHMsIHVwIHRoZSBzdGFja1xuICAgICAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gcG9zOyBpLS0pIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgb3B0aW9ucy5lbmQoc3RhY2tbaV0udGFnLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIG9wZW4gZWxlbWVudHMgZnJvbSB0aGUgc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnO1xuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdicicpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdwJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcGFyc2VGaWx0ZXJzIChleHApIHtcbiAgdmFyIGluU2luZ2xlID0gZmFsc2U7XG4gIHZhciBpbkRvdWJsZSA9IGZhbHNlO1xuICB2YXIgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICB2YXIgaW5SZWdleCA9IGZhbHNlO1xuICB2YXIgY3VybHkgPSAwO1xuICB2YXIgc3F1YXJlID0gMDtcbiAgdmFyIHBhcmVuID0gMDtcbiAgdmFyIGxhc3RGaWx0ZXJJbmRleCA9IDA7XG4gIHZhciBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBleHAubGVuZ3RoOyBpKyspIHtcbiAgICBwcmV2ID0gYztcbiAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGluU2luZ2xlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyNyAmJiBwcmV2ICE9PSAweDVDKSB7IGluU2luZ2xlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyMiAmJiBwcmV2ICE9PSAweDVDKSB7IGluRG91YmxlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluVGVtcGxhdGVTdHJpbmcpIHtcbiAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblJlZ2V4KSB7XG4gICAgICBpZiAoYyA9PT0gMHgyZiAmJiBwcmV2ICE9PSAweDVDKSB7IGluUmVnZXggPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjID09PSAweDdDICYmIC8vIHBpcGVcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMHg3QyAmJlxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAhY3VybHkgJiYgIXNxdWFyZSAmJiAhcGFyZW5cbiAgICApIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoRmlsdGVyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnXG4gICAgICAgIGNhc2UgMHg2MDogaW5UZW1wbGF0ZVN0cmluZyA9IHRydWU7IGJyZWFrIC8vIGBcbiAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApXG4gICAgICAgIGNhc2UgMHg1Qjogc3F1YXJlKys7IGJyZWFrICAgICAgICAgICAgICAgIC8vIFtcbiAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgIGNhc2UgMHg3RDogY3VybHktLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgIH1cbiAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC9cbiAgICAgICAgdmFyIGogPSBpIC0gMTtcbiAgICAgICAgdmFyIHAgPSAodm9pZCAwKTtcbiAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXJcbiAgICAgICAgZm9yICg7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgcCA9IGV4cC5jaGFyQXQoaik7XG4gICAgICAgICAgaWYgKHAgIT09ICcgJykgeyBicmVhayB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwIHx8ICEvW1xcdyRdLy50ZXN0KHApKSB7XG4gICAgICAgICAgaW5SZWdleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgcHVzaEZpbHRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgKGZpbHRlcnMgfHwgKGZpbHRlcnMgPSBbXSkpLnB1c2goZXhwLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpKTtcbiAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHByZXNzaW9uXG59XG5cbmZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7XG4gIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXJcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xuICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgbmFtZSArIFwiXFxcIikoXCIgKyBleHAgKyBcIixcIiArIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkZWZhdWx0VGFnUkUgPSAvXFx7XFx7KCg/Oi58XFxuKSs/KVxcfVxcfS9nO1xudmFyIHJlZ2V4RXNjYXBlUkUgPSAvWy0uKis/XiR7fSgpfFtcXF1cXC9cXFxcXS9nO1xuXG52YXIgYnVpbGRSZWdleCA9IGNhY2hlZChmdW5jdGlvbiAoZGVsaW1pdGVycykge1xuICB2YXIgb3BlbiA9IGRlbGltaXRlcnNbMF0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHZhciBjbG9zZSA9IGRlbGltaXRlcnNbMV0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHJldHVybiBuZXcgUmVnRXhwKG9wZW4gKyAnKCg/Oi58XFxcXG4pKz8pJyArIGNsb3NlLCAnZycpXG59KTtcblxuZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgdGV4dCxcbiAgZGVsaW1pdGVyc1xuKSB7XG4gIHZhciB0YWdSRSA9IGRlbGltaXRlcnMgPyBidWlsZFJlZ2V4KGRlbGltaXRlcnMpIDogZGVmYXVsdFRhZ1JFO1xuICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciBsYXN0SW5kZXggPSB0YWdSRS5sYXN0SW5kZXggPSAwO1xuICB2YXIgbWF0Y2gsIGluZGV4O1xuICB3aGlsZSAoKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkpIHtcbiAgICBpbmRleCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIHB1c2ggdGV4dCB0b2tlblxuICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodGV4dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KSkpO1xuICAgIH1cbiAgICAvLyB0YWcgdG9rZW5cbiAgICB2YXIgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgdG9rZW5zLnB1c2goKFwiX3MoXCIgKyBleHAgKyBcIilcIikpO1xuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICB9XG4gIGlmIChsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRleHQuc2xpY2UobGFzdEluZGV4KSkpO1xuICB9XG4gIHJldHVybiB0b2tlbnMuam9pbignKycpXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnKSB7XG4gIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSBwYXJzZXJdOiBcIiArIG1zZykpO1xufVxuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtW2tleV07IH0pLmZpbHRlcihmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfSlcbiAgICA6IFtdXG59XG5cbmZ1bmN0aW9uIGFkZFByb3AgKGVsLCBuYW1lLCB2YWx1ZSkge1xuICAoZWwucHJvcHMgfHwgKGVsLnByb3BzID0gW10pKS5wdXNoKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRyIChlbCwgbmFtZSwgdmFsdWUpIHtcbiAgKGVsLmF0dHJzIHx8IChlbC5hdHRycyA9IFtdKSkucHVzaCh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9KTtcbn1cblxuZnVuY3Rpb24gYWRkRGlyZWN0aXZlIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJhd05hbWUsXG4gIHZhbHVlLFxuICBhcmcsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIChlbC5kaXJlY3RpdmVzIHx8IChlbC5kaXJlY3RpdmVzID0gW10pKS5wdXNoKHsgbmFtZTogbmFtZSwgcmF3TmFtZTogcmF3TmFtZSwgdmFsdWU6IHZhbHVlLCBhcmc6IGFyZywgbW9kaWZpZXJzOiBtb2RpZmllcnMgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICBlbCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIG1vZGlmaWVycyxcbiAgaW1wb3J0YW50XG4pIHtcbiAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICBpZiAobW9kaWZpZXJzICYmIG1vZGlmaWVycy5jYXB0dXJlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgIG5hbWUgPSAnIScgKyBuYW1lOyAvLyBtYXJrIHRoZSBldmVudCBhcyBjYXB0dXJlZFxuICB9XG4gIGlmIChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm9uY2UpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7XG4gICAgbmFtZSA9ICd+JyArIG5hbWU7IC8vIG1hcmsgdGhlIGV2ZW50IGFzIG9uY2VcbiAgfVxuICB2YXIgZXZlbnRzO1xuICBpZiAobW9kaWZpZXJzICYmIG1vZGlmaWVycy5uYXRpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtcbiAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTtcbiAgfVxuICB2YXIgbmV3SGFuZGxlciA9IHsgdmFsdWU6IHZhbHVlLCBtb2RpZmllcnM6IG1vZGlmaWVycyB9O1xuICB2YXIgaGFuZGxlcnMgPSBldmVudHNbbmFtZV07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVycykpIHtcbiAgICBpbXBvcnRhbnQgPyBoYW5kbGVycy51bnNoaWZ0KG5ld0hhbmRsZXIpIDogaGFuZGxlcnMucHVzaChuZXdIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChoYW5kbGVycykge1xuICAgIGV2ZW50c1tuYW1lXSA9IGltcG9ydGFudCA/IFtuZXdIYW5kbGVyLCBoYW5kbGVyc10gOiBbaGFuZGxlcnMsIG5ld0hhbmRsZXJdO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50c1tuYW1lXSA9IG5ld0hhbmRsZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgZ2V0U3RhdGljXG4pIHtcbiAgdmFyIGR5bmFtaWNWYWx1ZSA9XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJzonICsgbmFtZSkgfHxcbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1iaW5kOicgKyBuYW1lKTtcbiAgaWYgKGR5bmFtaWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmlsdGVycyhkeW5hbWljVmFsdWUpXG4gIH0gZWxzZSBpZiAoZ2V0U3RhdGljICE9PSBmYWxzZSkge1xuICAgIHZhciBzdGF0aWNWYWx1ZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsIG5hbWUpO1xuICAgIGlmIChzdGF0aWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhdGljVmFsdWUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHIgKGVsLCBuYW1lKSB7XG4gIHZhciB2YWw7XG4gIGlmICgodmFsID0gZWwuYXR0cnNNYXBbbmFtZV0pICE9IG51bGwpIHtcbiAgICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAobGlzdFtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbnZhciBsZW47XG52YXIgc3RyO1xudmFyIGNocjtcbnZhciBpbmRleCQxO1xudmFyIGV4cHJlc3Npb25Qb3M7XG52YXIgZXhwcmVzc2lvbkVuZFBvcztcblxuLyoqXG4gKiBwYXJzZSBkaXJlY3RpdmUgbW9kZWwgdG8gZG8gdGhlIGFycmF5IHVwZGF0ZSB0cmFuc2Zvcm0uIGFbaWR4XSA9IHZhbCA9PiAkJGEuc3BsaWNlKCQkaWR4LCAxLCB2YWwpXG4gKlxuICogZm9yIGxvb3AgcG9zc2libGUgY2FzZXM6XG4gKlxuICogLSB0ZXN0XG4gKiAtIHRlc3RbaWR4XVxuICogLSB0ZXN0W3Rlc3QxW2lkeF1dXG4gKiAtIHRlc3RbXCJhXCJdW2lkeF1cbiAqIC0geHh4LnRlc3RbYVthXS50ZXN0MVtpZHhdXVxuICogLSB0ZXN0Lnh4eC5hW1wiYXNhXCJdW3Rlc3QxW2lkeF1dXG4gKlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICBzdHIgPSB2YWw7XG4gIGxlbiA9IHN0ci5sZW5ndGg7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgaWYgKHZhbC5pbmRleE9mKCdbJykgPCAwIHx8IHZhbC5sYXN0SW5kZXhPZignXScpIDwgbGVuIC0gMSkge1xuICAgIHJldHVybiB7XG4gICAgICBleHA6IHZhbCxcbiAgICAgIGlkeDogbnVsbFxuICAgIH1cbiAgfVxuXG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gMHg1Qikge1xuICAgICAgcGFyc2VCcmFja2V0KGNocik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHA6IHZhbC5zdWJzdHJpbmcoMCwgZXhwcmVzc2lvblBvcyksXG4gICAgaWR4OiB2YWwuc3Vic3RyaW5nKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpclJFID0gL152LXxeQHxeOi87XG52YXIgZm9yQWxpYXNSRSA9IC8oLio/KVxccysoPzppbnxvZilcXHMrKC4qKS87XG52YXIgZm9ySXRlcmF0b3JSRSA9IC9cXCgoXFx7W159XSpcXH18W14sXSopLChbXixdKikoPzosKFteLF0qKSk/XFwpLztcbnZhciBiaW5kUkUgPSAvXjp8XnYtYmluZDovO1xudmFyIG9uUkUgPSAvXkB8XnYtb246LztcbnZhciBhcmdSRSA9IC86KC4qKSQvO1xudmFyIG1vZGlmaWVyUkUgPSAvXFwuW14uXSsvZztcblxudmFyIGRlY29kZUhUTUxDYWNoZWQgPSBjYWNoZWQoZGVjb2RlKTtcblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG52YXIgd2FybiQxO1xudmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO1xudmFyIHBsYXRmb3JtTXVzdFVzZVByb3A7XG52YXIgcGxhdGZvcm1Jc1ByZVRhZztcbnZhciBwcmVUcmFuc2Zvcm1zO1xudmFyIHRyYW5zZm9ybXM7XG52YXIgcG9zdFRyYW5zZm9ybXM7XG52YXIgZGVsaW1pdGVycztcblxuLyoqXG4gKiBDb252ZXJ0IEhUTUwgc3RyaW5nIHRvIEFTVC5cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHdhcm4kMSA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UgPSBvcHRpb25zLmdldFRhZ05hbWVzcGFjZSB8fCBubztcbiAgcGxhdGZvcm1NdXN0VXNlUHJvcCA9IG9wdGlvbnMubXVzdFVzZVByb3AgfHwgbm87XG4gIHBsYXRmb3JtSXNQcmVUYWcgPSBvcHRpb25zLmlzUHJlVGFnIHx8IG5vO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybU5vZGUnKTtcbiAgcG9zdFRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3Bvc3RUcmFuc2Zvcm1Ob2RlJyk7XG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG4gIHZhciBzdGFjayA9IFtdO1xuICB2YXIgcHJlc2VydmVXaGl0ZXNwYWNlID0gb3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IGZhbHNlO1xuICB2YXIgcm9vdDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgdmFyIGluUHJlID0gZmFsc2U7XG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgcGFyc2VIVE1MKHRlbXBsYXRlLCB7XG4gICAgZXhwZWN0SFRNTDogb3B0aW9ucy5leHBlY3RIVE1MLFxuICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICBzaG91bGREZWNvZGVOZXdsaW5lczogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5KSB7XG4gICAgICAvLyBjaGVjayBuYW1lc3BhY2UuXG4gICAgICAvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cbiAgICAgIC8vIGhhbmRsZSBJRSBzdmcgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmIG5zID09PSAnc3ZnJykge1xuICAgICAgICBhdHRycyA9IGd1YXJkSUVTVkdCdWcoYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IHtcbiAgICAgICAgdHlwZTogMSxcbiAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgIGF0dHJzTGlzdDogYXR0cnMsXG4gICAgICAgIGF0dHJzTWFwOiBtYWtlQXR0cnNNYXAoYXR0cnMpLFxuICAgICAgICBwYXJlbnQ6IGN1cnJlbnRQYXJlbnQsXG4gICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgfTtcbiAgICAgIGlmIChucykge1xuICAgICAgICBlbGVtZW50Lm5zID0gbnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZvcmJpZGRlblRhZyhlbGVtZW50KSAmJiAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSkge1xuICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQxKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByZVRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3NGb3IoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NJZihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc09uY2UoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NLZXkoZWxlbWVudCk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgYWZ0ZXJcbiAgICAgICAgLy8gcmVtb3Zpbmcgc3RydWN0dXJhbCBhdHRyaWJ1dGVzXG4gICAgICAgIGVsZW1lbnQucGxhaW4gPSAhZWxlbWVudC5rZXkgJiYgIWF0dHJzLmxlbmd0aDtcblxuICAgICAgICBwcm9jZXNzUmVmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzU2xvdChlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgdHJhbnNmb3Jtc1tpJDFdKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NBdHRycyhlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2hlY2tSb290Q29uc3RyYWludHMgKGVsKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWQpIHtcbiAgICAgICAgICBpZiAoZWwudGFnID09PSAnc2xvdCcgfHwgZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzOlxcbicgKyB0ZW1wbGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLmF0dHJzTWFwLmhhc093blByb3BlcnR5KCd2LWZvcicpKSB7XG4gICAgICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICAnQ2Fubm90IHVzZSB2LWZvciBvbiBzdGF0ZWZ1bCBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgJyArXG4gICAgICAgICAgICAgICdpdCByZW5kZXJzIG11bHRpcGxlIGVsZW1lbnRzOlxcbicgKyB0ZW1wbGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgfSBlbHNlIGlmICghc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICAgIGFkZElmQ29uZGl0aW9uKHJvb3QsIHtcbiAgICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgICBibG9jazogZWxlbWVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXdhcm5lZCkge1xuICAgICAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50OlwiICtcbiAgICAgICAgICAgIFwiXFxuXFxuXCIgKyB0ZW1wbGF0ZSArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICAgIFwidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkge1xuICAgICAgICAgIHByb2Nlc3NJZkNvbmRpdGlvbnMoZWxlbWVudCwgY3VycmVudFBhcmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5zbG90U2NvcGUpIHsgLy8gc2NvcGVkIHNsb3RcbiAgICAgICAgICBjdXJyZW50UGFyZW50LnBsYWluID0gZmFsc2U7XG4gICAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50LnNsb3RUYXJnZXQgfHwgJ2RlZmF1bHQnOyhjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzIHx8IChjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzID0ge30pKVtuYW1lXSA9IGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICBwb3N0VHJhbnNmb3Jtc1tpJDJdKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAoKSB7XG4gICAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBsYXN0Tm9kZSA9IGVsZW1lbnQuY2hpbGRyZW5bZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChsYXN0Tm9kZSAmJiBsYXN0Tm9kZS50eXBlID09PSAzICYmIGxhc3ROb2RlLnRleHQgPT09ICcgJykge1xuICAgICAgICBlbGVtZW50LmNoaWxkcmVuLnBvcCgpO1xuICAgICAgfVxuICAgICAgLy8gcG9wIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggLT0gMTtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIC8vIGNoZWNrIHByZSBzdGF0ZVxuICAgICAgaWYgKGVsZW1lbnQucHJlKSB7XG4gICAgICAgIGluVlByZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG4gICAgICAgIGluUHJlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCkge1xuICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWQgJiYgdGV4dCA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICdDb21wb25lbnQgdGVtcGxhdGUgcmVxdWlyZXMgYSByb290IGVsZW1lbnQsIHJhdGhlciB0aGFuIGp1c3QgdGV4dDpcXG5cXG4nICsgdGVtcGxhdGVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gSUUgdGV4dGFyZWEgcGxhY2Vob2xkZXIgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmXG4gICAgICAgICAgY3VycmVudFBhcmVudC50YWcgPT09ICd0ZXh0YXJlYScgJiZcbiAgICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuID0gY3VycmVudFBhcmVudC5jaGlsZHJlbjtcbiAgICAgIHRleHQgPSBpblByZSB8fCB0ZXh0LnRyaW0oKVxuICAgICAgICA/IGRlY29kZUhUTUxDYWNoZWQodGV4dClcbiAgICAgICAgLy8gb25seSBwcmVzZXJ2ZSB3aGl0ZXNwYWNlIGlmIGl0cyBub3QgcmlnaHQgYWZ0ZXIgYSBzdGFydGluZyB0YWdcbiAgICAgICAgOiBwcmVzZXJ2ZVdoaXRlc3BhY2UgJiYgY2hpbGRyZW4ubGVuZ3RoID8gJyAnIDogJyc7XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbjtcbiAgICAgICAgaWYgKCFpblZQcmUgJiYgdGV4dCAhPT0gJyAnICYmIChleHByZXNzaW9uID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogMixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IGV4cHJlc3Npb24sXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGV4dCAhPT0gJyAnIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGwgPSBlbC5hdHRyc0xpc3QubGVuZ3RoO1xuICBpZiAobCkge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogZWwuYXR0cnNMaXN0W2ldLm5hbWUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShlbC5hdHRyc0xpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgd2FybiQxKFwiPHRlbXBsYXRlPiBjYW5ub3QgYmUga2V5ZWQuIFBsYWNlIHRoZSBrZXkgb24gcmVhbCBlbGVtZW50cyBpbnN0ZWFkLlwiKTtcbiAgICB9XG4gICAgZWwua2V5ID0gZXhwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWYgKGVsKSB7XG4gIHZhciByZWYgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3JlZicpO1xuICBpZiAocmVmKSB7XG4gICAgZWwucmVmID0gcmVmO1xuICAgIGVsLnJlZkluRm9yID0gY2hlY2tJbkZvcihlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ZvciAoZWwpIHtcbiAgdmFyIGV4cDtcbiAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHtcbiAgICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgICBpZiAoIWluTWF0Y2gpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQxKFxuICAgICAgICAoXCJJbnZhbGlkIHYtZm9yIGV4cHJlc3Npb246IFwiICsgZXhwKVxuICAgICAgKTtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbC5mb3IgPSBpbk1hdGNoWzJdLnRyaW0oKTtcbiAgICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKTtcbiAgICB2YXIgaXRlcmF0b3JNYXRjaCA9IGFsaWFzLm1hdGNoKGZvckl0ZXJhdG9yUkUpO1xuICAgIGlmIChpdGVyYXRvck1hdGNoKSB7XG4gICAgICBlbC5hbGlhcyA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgICAgZWwuaXRlcmF0b3IxID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgICBpZiAoaXRlcmF0b3JNYXRjaFszXSkge1xuICAgICAgICBlbC5pdGVyYXRvcjIgPSBpdGVyYXRvck1hdGNoWzNdLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuYWxpYXMgPSBhbGlhcztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICB2YXIgZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnKTtcbiAgaWYgKGV4cCkge1xuICAgIGVsLmlmID0gZXhwO1xuICAgIGFkZElmQ29uZGl0aW9uKGVsLCB7XG4gICAgICBleHA6IGV4cCxcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgZWwuZWxzZSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7XG4gIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcbiAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICBleHA6IGVsLmVsc2VpZixcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDEoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kUHJldkVsZW1lbnQgKGNoaWxkcmVuKSB7XG4gIHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldLnR5cGUgPT09IDEpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbltpXVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbltpXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuICAgICAgICAgIFwid2lsbCBiZSBpZ25vcmVkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjaGlsZHJlbi5wb3AoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcbiAgaWYgKCFlbC5pZkNvbmRpdGlvbnMpIHtcbiAgICBlbC5pZkNvbmRpdGlvbnMgPSBbXTtcbiAgfVxuICBlbC5pZkNvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzT25jZSAoZWwpIHtcbiAgdmFyIG9uY2UgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1vbmNlJyk7XG4gIGlmIChvbmNlICE9IG51bGwpIHtcbiAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzU2xvdCAoZWwpIHtcbiAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgZWwuc2xvdE5hbWUgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ25hbWUnKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC5rZXkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiICtcbiAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gICAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnXCJcIicgPyAnXCJkZWZhdWx0XCInIDogc2xvdFRhcmdldDtcbiAgICB9XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgZWwuc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIHZhciBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIG1vZGlmaWVycywgaXNQcm9wO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUpO1xuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kUkUudGVzdChuYW1lKSkgeyAvLyB2LWJpbmRcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZpbHRlcnModmFsdWUpO1xuICAgICAgICBpc1Byb3AgPSBmYWxzZTtcbiAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgIGlmIChtb2RpZmllcnMucHJvcCkge1xuICAgICAgICAgICAgaXNQcm9wID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCkge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9wIHx8IHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKSkge1xuICAgICAgICAgIGFkZFByb3AoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShkaXJSRSwgJycpO1xuICAgICAgICAvLyBwYXJzZSBhcmdcbiAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgIGlmIChhcmdNYXRjaCAmJiAoYXJnID0gYXJnTWF0Y2hbMV0pKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLShhcmcubGVuZ3RoICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgbW9kaWZpZXJzKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSA9PT0gJ21vZGVsJykge1xuICAgICAgICAgIGNoZWNrRm9yQWxpYXNNb2RlbChlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGxpdGVyYWwgYXR0cmlidXRlXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dCh2YWx1ZSwgZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChleHByZXNzaW9uKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZGRBdHRyKGVsLCBuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0luRm9yIChlbCkge1xuICB2YXIgcGFyZW50ID0gZWw7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LmZvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwYXJzZU1vZGlmaWVycyAobmFtZSkge1xuICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgbWF0Y2guZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUF0dHJzTWFwIChhdHRycykge1xuICB2YXIgbWFwID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbWFwW2F0dHJzW2ldLm5hbWVdICYmICFpc0lFKSB7XG4gICAgICB3YXJuJDEoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lKTtcbiAgICB9XG4gICAgbWFwW2F0dHJzW2ldLm5hbWVdID0gYXR0cnNbaV0udmFsdWU7XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyAoZWwpIHtcbiAgcmV0dXJuIChcbiAgICBlbC50YWcgPT09ICdzdHlsZScgfHxcbiAgICAoZWwudGFnID09PSAnc2NyaXB0JyAmJiAoXG4gICAgICAhZWwuYXR0cnNNYXAudHlwZSB8fFxuICAgICAgZWwuYXR0cnNNYXAudHlwZSA9PT0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICApKVxuICApXG59XG5cbnZhciBpZU5TQnVnID0gL154bWxuczpOU1xcZCsvO1xudmFyIGllTlNQcmVmaXggPSAvXk5TXFxkKzovO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyAoYXR0cnMpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcbiAgICBpZiAoIWllTlNCdWcudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBhdHRyLm5hbWUgPSBhdHRyLm5hbWUucmVwbGFjZShpZU5TUHJlZml4LCAnJyk7XG4gICAgICByZXMucHVzaChhdHRyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuICB2YXIgX2VsID0gZWw7XG4gIHdoaWxlIChfZWwpIHtcbiAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgICBcIllvdSBhcmUgYmluZGluZyB2LW1vZGVsIGRpcmVjdGx5IHRvIGEgdi1mb3IgaXRlcmF0aW9uIGFsaWFzLiBcIiArXG4gICAgICAgIFwiVGhpcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG1vZGlmeSB0aGUgdi1mb3Igc291cmNlIGFycmF5IGJlY2F1c2UgXCIgK1xuICAgICAgICBcIndyaXRpbmcgdG8gdGhlIGFsaWFzIGlzIGxpa2UgbW9kaWZ5aW5nIGEgZnVuY3Rpb24gbG9jYWwgdmFyaWFibGUuIFwiICtcbiAgICAgICAgXCJDb25zaWRlciB1c2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCB1c2Ugdi1tb2RlbCBvbiBhbiBvYmplY3QgcHJvcGVydHkgaW5zdGVhZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgX2VsID0gX2VsLnBhcmVudDtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGlzU3RhdGljS2V5O1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZztcblxudmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblxuLyoqXG4gKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICogYW5kIGRldGVjdCBzdWItdHJlZXMgdGhhdCBhcmUgcHVyZWx5IHN0YXRpYywgaS5lLiBwYXJ0cyBvZlxuICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAqXG4gKiBPbmNlIHdlIGRldGVjdCB0aGVzZSBzdWItdHJlZXMsIHdlIGNhbjpcbiAqXG4gKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gKiAgICBjcmVhdGUgZnJlc2ggbm9kZXMgZm9yIHRoZW0gb24gZWFjaCByZS1yZW5kZXI7XG4gKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemUgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSB7IHJldHVybiB9XG4gIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuXG4gIG1hcmtTdGF0aWMocm9vdCk7XG4gIC8vIHNlY29uZCBwYXNzOiBtYXJrIHN0YXRpYyByb290cy5cbiAgbWFya1N0YXRpY1Jvb3RzKHJvb3QsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyQxIChrZXlzKSB7XG4gIHJldHVybiBtYWtlTWFwKFxuICAgICd0eXBlLHRhZyxhdHRyc0xpc3QsYXR0cnNNYXAscGxhaW4scGFyZW50LGNoaWxkcmVuLGF0dHJzJyArXG4gICAgKGtleXMgPyAnLCcgKyBrZXlzIDogJycpXG4gIClcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAobm9kZSkge1xuICBub2RlLnN0YXRpYyA9IGlzU3RhdGljKG5vZGUpO1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgLy8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG4gICAgLy8gMS4gY29tcG9uZW50cyBub3QgYWJsZSB0byBtdXRhdGUgc2xvdCBub2Rlc1xuICAgIC8vIDIuIHN0YXRpYyBzbG90IGNvbnRlbnQgZmFpbHMgZm9yIGhvdC1yZWxvYWRpbmdcbiAgICBpZiAoXG4gICAgICAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJlxuICAgICAgbm9kZS50YWcgIT09ICdzbG90JyAmJlxuICAgICAgbm9kZS5hdHRyc01hcFsnaW5saW5lLXRlbXBsYXRlJ10gPT0gbnVsbFxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICBtYXJrU3RhdGljKGNoaWxkKTtcbiAgICAgIGlmICghY2hpbGQuc3RhdGljKSB7XG4gICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNSb290cyAobm9kZSwgaXNJbkZvcikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgaWYgKG5vZGUuc3RhdGljIHx8IG5vZGUub25jZSkge1xuICAgICAgbm9kZS5zdGF0aWNJbkZvciA9IGlzSW5Gb3I7XG4gICAgfVxuICAgIC8vIEZvciBhIG5vZGUgdG8gcXVhbGlmeSBhcyBhIHN0YXRpYyByb290LCBpdCBzaG91bGQgaGF2ZSBjaGlsZHJlbiB0aGF0XG4gICAgLy8gYXJlIG5vdCBqdXN0IHN0YXRpYyB0ZXh0LiBPdGhlcndpc2UgdGhlIGNvc3Qgb2YgaG9pc3Rpbmcgb3V0IHdpbGxcbiAgICAvLyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgYW5kIGl0J3MgYmV0dGVyIG9mZiB0byBqdXN0IGFsd2F5cyByZW5kZXIgaXQgZnJlc2guXG4gICAgaWYgKG5vZGUuc3RhdGljICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmICEoXG4gICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAzXG4gICAgKSkge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gdHJ1ZTtcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuY2hpbGRyZW5baV0sIGlzSW5Gb3IgfHwgISFub2RlLmZvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgd2Fsa1Rocm91Z2hDb25kaXRpb25zQmxvY2tzKG5vZGUuaWZDb25kaXRpb25zLCBpc0luRm9yKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gd2Fsa1Rocm91Z2hDb25kaXRpb25zQmxvY2tzIChjb25kaXRpb25CbG9ja3MsIGlzSW5Gb3IpIHtcbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IGNvbmRpdGlvbkJsb2Nrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIG1hcmtTdGF0aWNSb290cyhjb25kaXRpb25CbG9ja3NbaV0uYmxvY2ssIGlzSW5Gb3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDIpIHsgLy8gZXhwcmVzc2lvblxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChub2RlLnR5cGUgPT09IDMpIHsgLy8gdGV4dFxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuICEhKG5vZGUucHJlIHx8IChcbiAgICAhbm9kZS5oYXNCaW5kaW5ncyAmJiAvLyBubyBkeW5hbWljIGJpbmRpbmdzXG4gICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuICAgICFpc0J1aWx0SW5UYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGJ1aWx0LWluXG4gICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBjb21wb25lbnRcbiAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcbiAgICBPYmplY3Qua2V5cyhub2RlKS5ldmVyeShpc1N0YXRpY0tleSlcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IgKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIGlmIChub2RlLnRhZyAhPT0gJ3RlbXBsYXRlJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmZvcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG52YXIgZm5FeHBSRSA9IC9eXFxzKihbXFx3JF9dK3xcXChbXildKj9cXCkpXFxzKj0+fF5mdW5jdGlvblxccypcXCgvO1xudmFyIHNpbXBsZVBhdGhSRSA9IC9eXFxzKltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJy4qPyddfFxcW1wiLio/XCJdfFxcW1xcZCtdfFxcW1tBLVphLXpfJF1bXFx3JF0qXSkqXFxzKiQvO1xuXG4vLyBrZXlDb2RlIGFsaWFzZXNcbnZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgdGFiOiA5LFxuICBlbnRlcjogMTMsXG4gIHNwYWNlOiAzMixcbiAgdXA6IDM4LFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBkb3duOiA0MCxcbiAgJ2RlbGV0ZSc6IFs4LCA0Nl1cbn07XG5cbnZhciBtb2RpZmllckNvZGUgPSB7XG4gIHN0b3A6ICckZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7JyxcbiAgcHJldmVudDogJyRldmVudC5wcmV2ZW50RGVmYXVsdCgpOycsXG4gIHNlbGY6ICdpZigkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldClyZXR1cm47JyxcbiAgY3RybDogJ2lmKCEkZXZlbnQuY3RybEtleSlyZXR1cm47JyxcbiAgc2hpZnQ6ICdpZighJGV2ZW50LnNoaWZ0S2V5KXJldHVybjsnLFxuICBhbHQ6ICdpZighJGV2ZW50LmFsdEtleSlyZXR1cm47JyxcbiAgbWV0YTogJ2lmKCEkZXZlbnQubWV0YUtleSlyZXR1cm47J1xufTtcblxuZnVuY3Rpb24gZ2VuSGFuZGxlcnMgKGV2ZW50cywgbmF0aXZlKSB7XG4gIHZhciByZXMgPSBuYXRpdmUgPyAnbmF0aXZlT246eycgOiAnb246eyc7XG4gIGZvciAodmFyIG5hbWUgaW4gZXZlbnRzKSB7XG4gICAgcmVzICs9IFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIjpcIiArIChnZW5IYW5kbGVyKG5hbWUsIGV2ZW50c1tuYW1lXSkpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnfSdcbn1cblxuZnVuY3Rpb24gZ2VuSGFuZGxlciAoXG4gIG5hbWUsXG4gIGhhbmRsZXJcbikge1xuICBpZiAoIWhhbmRsZXIpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCl7fSdcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgcmV0dXJuIChcIltcIiArIChoYW5kbGVyLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gZ2VuSGFuZGxlcihuYW1lLCBoYW5kbGVyKTsgfSkuam9pbignLCcpKSArIFwiXVwiKVxuICB9IGVsc2UgaWYgKCFoYW5kbGVyLm1vZGlmaWVycykge1xuICAgIHJldHVybiBmbkV4cFJFLnRlc3QoaGFuZGxlci52YWx1ZSkgfHwgc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSlcbiAgICAgID8gaGFuZGxlci52YWx1ZVxuICAgICAgOiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgKGhhbmRsZXIudmFsdWUpICsgXCJ9XCIpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgaWYgKG1vZGlmaWVyQ29kZVtrZXldKSB7XG4gICAgICAgIGNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICBjb2RlID0gZ2VuS2V5RmlsdGVyKGtleXMpICsgY29kZTtcbiAgICB9XG4gICAgdmFyIGhhbmRsZXJDb2RlID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSlcbiAgICAgID8gaGFuZGxlci52YWx1ZSArICcoJGV2ZW50KSdcbiAgICAgIDogaGFuZGxlci52YWx1ZTtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCRldmVudCl7JyArIGNvZGUgKyBoYW5kbGVyQ29kZSArICd9J1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbktleUZpbHRlciAoa2V5cykge1xuICByZXR1cm4gKFwiaWYoXCIgKyAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm47XCIpXG59XG5cbmZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkge1xuICB2YXIga2V5VmFsID0gcGFyc2VJbnQoa2V5LCAxMCk7XG4gIGlmIChrZXlWYWwpIHtcbiAgICByZXR1cm4gKFwiJGV2ZW50LmtleUNvZGUhPT1cIiArIGtleVZhbClcbiAgfVxuICB2YXIgYWxpYXMgPSBrZXlDb2Rlc1trZXldO1xuICByZXR1cm4gKFwiX2soJGV2ZW50LmtleUNvZGUsXCIgKyAoSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyAoYWxpYXMgPyAnLCcgKyBKU09OLnN0cmluZ2lmeShhbGlhcykgOiAnJykgKyBcIilcIilcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmQkMiAoZWwsIGRpcikge1xuICBlbC53cmFwRGF0YSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIChcIl9iKFwiICsgY29kZSArIFwiLCdcIiArIChlbC50YWcpICsgXCInLFwiICsgKGRpci52YWx1ZSkgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnByb3AgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gIGJpbmQ6IGJpbmQkMixcbiAgY2xvYWs6IG5vb3Bcbn07XG5cbi8qICAqL1xuXG4vLyBjb25maWd1cmFibGUgc3RhdGVcbnZhciB3YXJuJDI7XG52YXIgdHJhbnNmb3JtcyQxO1xudmFyIGRhdGFHZW5GbnM7XG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzJDE7XG52YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDE7XG52YXIgc3RhdGljUmVuZGVyRm5zO1xudmFyIG9uY2VDb3VudDtcbnZhciBjdXJyZW50T3B0aW9ucztcblxuZnVuY3Rpb24gZ2VuZXJhdGUgKFxuICBhc3QsXG4gIG9wdGlvbnNcbikge1xuICAvLyBzYXZlIHByZXZpb3VzIHN0YXRpY1JlbmRlckZucyBzbyBnZW5lcmF0ZSBjYWxscyBjYW4gYmUgbmVzdGVkXG4gIHZhciBwcmV2U3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuICB2YXIgY3VycmVudFN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucyA9IFtdO1xuICB2YXIgcHJldk9uY2VDb3VudCA9IG9uY2VDb3VudDtcbiAgb25jZUNvdW50ID0gMDtcbiAgY3VycmVudE9wdGlvbnMgPSBvcHRpb25zO1xuICB3YXJuJDIgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHRyYW5zZm9ybXMkMSA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICBkYXRhR2VuRm5zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdnZW5EYXRhJyk7XG4gIHBsYXRmb3JtRGlyZWN0aXZlcyQxID0gb3B0aW9ucy5kaXJlY3RpdmVzIHx8IHt9O1xuICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWckMSA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCkgOiAnX2MoXCJkaXZcIiknO1xuICBzdGF0aWNSZW5kZXJGbnMgPSBwcmV2U3RhdGljUmVuZGVyRm5zO1xuICBvbmNlQ291bnQgPSBwcmV2T25jZUNvdW50O1xuICByZXR1cm4ge1xuICAgIHJlbmRlcjogKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyBjb2RlICsgXCJ9XCIpLFxuICAgIHN0YXRpY1JlbmRlckZuczogY3VycmVudFN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsKSB7XG4gIGlmIChlbC5zdGF0aWNSb290ICYmICFlbC5zdGF0aWNQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsKVxuICB9IGVsc2UgaWYgKGVsLm9uY2UgJiYgIWVsLm9uY2VQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuT25jZShlbClcbiAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwpXG4gIH0gZWxzZSBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsKVxuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFRhcmdldCkge1xuICAgIHJldHVybiBnZW5DaGlsZHJlbihlbCkgfHwgJ3ZvaWQgMCdcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIHJldHVybiBnZW5TbG90KGVsKVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbXBvbmVudCBvciBlbGVtZW50XG4gICAgdmFyIGNvZGU7XG4gICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgY29kZSA9IGdlbkNvbXBvbmVudChlbC5jb21wb25lbnQsIGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRhdGEgPSBlbC5wbGFpbiA/IHVuZGVmaW5lZCA6IGdlbkRhdGEoZWwpO1xuXG4gICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgdHJ1ZSk7XG4gICAgICBjb2RlID0gXCJfYygnXCIgKyAoZWwudGFnKSArIFwiJ1wiICsgKGRhdGEgPyAoXCIsXCIgKyBkYXRhKSA6ICcnKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiO1xuICAgIH1cbiAgICAvLyBtb2R1bGUgdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3JtcyQxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2RlID0gdHJhbnNmb3JtcyQxW2ldKGVsLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVcbiAgfVxufVxuXG4vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuZnVuY3Rpb24gZ2VuU3RhdGljIChlbCkge1xuICBlbC5zdGF0aWNQcm9jZXNzZWQgPSB0cnVlO1xuICBzdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsKSkgKyBcIn1cIikpO1xuICByZXR1cm4gKFwiX20oXCIgKyAoc3RhdGljUmVuZGVyRm5zLmxlbmd0aCAtIDEpICsgKGVsLnN0YXRpY0luRm9yID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxufVxuXG4vLyB2LW9uY2VcbmZ1bmN0aW9uIGdlbk9uY2UgKGVsKSB7XG4gIGVsLm9uY2VQcm9jZXNzZWQgPSB0cnVlO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4kMihcbiAgICAgICAgXCJ2LW9uY2UgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgdi1mb3IgdGhhdCBpcyBrZXllZC4gXCJcbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbClcbiAgICB9XG4gICAgcmV0dXJuIChcIl9vKFwiICsgKGdlbkVsZW1lbnQoZWwpKSArIFwiLFwiICsgKG9uY2VDb3VudCsrKSArIChrZXkgPyAoXCIsXCIgKyBrZXkpIDogXCJcIikgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklmIChlbCkge1xuICBlbC5pZlByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpKVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKGNvbmRpdGlvbnMpIHtcbiAgaWYgKCFjb25kaXRpb25zLmxlbmd0aCkge1xuICAgIHJldHVybiAnX2UoKSdcbiAgfVxuXG4gIHZhciBjb25kaXRpb24gPSBjb25kaXRpb25zLnNoaWZ0KCk7XG4gIGlmIChjb25kaXRpb24uZXhwKSB7XG4gICAgcmV0dXJuIChcIihcIiArIChjb25kaXRpb24uZXhwKSArIFwiKT9cIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpICsgXCI6XCIgKyAoZ2VuSWZDb25kaXRpb25zKGNvbmRpdGlvbnMpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSlcbiAgfVxuXG4gIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSlcbiAgZnVuY3Rpb24gZ2VuVGVybmFyeUV4cCAoZWwpIHtcbiAgICByZXR1cm4gZWwub25jZSA/IGdlbk9uY2UoZWwpIDogZ2VuRWxlbWVudChlbClcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5Gb3IgKGVsKSB7XG4gIHZhciBleHAgPSBlbC5mb3I7XG4gIHZhciBhbGlhcyA9IGVsLmFsaWFzO1xuICB2YXIgaXRlcmF0b3IxID0gZWwuaXRlcmF0b3IxID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMSkpIDogJyc7XG4gIHZhciBpdGVyYXRvcjIgPSBlbC5pdGVyYXRvcjIgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IyKSkgOiAnJztcbiAgZWwuZm9yUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBcIl9sKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKGdlbkVsZW1lbnQoZWwpKSArXG4gICAgJ30pJ1xufVxuXG5mdW5jdGlvbiBnZW5EYXRhIChlbCkge1xuICB2YXIgZGF0YSA9ICd7JztcblxuICAvLyBkaXJlY3RpdmVzIGZpcnN0LlxuICAvLyBkaXJlY3RpdmVzIG1heSBtdXRhdGUgdGhlIGVsJ3Mgb3RoZXIgcHJvcGVydGllcyBiZWZvcmUgdGhleSBhcmUgZ2VuZXJhdGVkLlxuICB2YXIgZGlycyA9IGdlbkRpcmVjdGl2ZXMoZWwpO1xuICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAvLyBrZXlcbiAgaWYgKGVsLmtleSkge1xuICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICB9XG4gIC8vIHJlZlxuICBpZiAoZWwucmVmKSB7XG4gICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gIH1cbiAgLy8gcHJlXG4gIGlmIChlbC5wcmUpIHtcbiAgICBkYXRhICs9IFwicHJlOnRydWUsXCI7XG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gIH1cbiAgLy8gbW9kdWxlIGRhdGEgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZGF0YSArPSBkYXRhR2VuRm5zW2ldKGVsKTtcbiAgfVxuICAvLyBhdHRyaWJ1dGVzXG4gIGlmIChlbC5hdHRycykge1xuICAgIGRhdGEgKz0gXCJhdHRyczp7XCIgKyAoZ2VuUHJvcHMoZWwuYXR0cnMpKSArIFwifSxcIjtcbiAgfVxuICAvLyBET00gcHJvcHNcbiAgaWYgKGVsLnByb3BzKSB7XG4gICAgZGF0YSArPSBcImRvbVByb3BzOntcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCJ9LFwiO1xuICB9XG4gIC8vIGV2ZW50IGhhbmRsZXJzXG4gIGlmIChlbC5ldmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5ldmVudHMpKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUpKSArIFwiLFwiO1xuICB9XG4gIC8vIHNsb3QgdGFyZ2V0XG4gIGlmIChlbC5zbG90VGFyZ2V0KSB7XG4gICAgZGF0YSArPSBcInNsb3Q6XCIgKyAoZWwuc2xvdFRhcmdldCkgKyBcIixcIjtcbiAgfVxuICAvLyBzY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwuc2NvcGVkU2xvdHMpKSArIFwiLFwiO1xuICB9XG4gIC8vIGlubGluZS10ZW1wbGF0ZVxuICBpZiAoZWwuaW5saW5lVGVtcGxhdGUpIHtcbiAgICB2YXIgaW5saW5lVGVtcGxhdGUgPSBnZW5JbmxpbmVUZW1wbGF0ZShlbCk7XG4gICAgaWYgKGlubGluZVRlbXBsYXRlKSB7XG4gICAgICBkYXRhICs9IGlubGluZVRlbXBsYXRlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoLywkLywgJycpICsgJ30nO1xuICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwRGF0YSkge1xuICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBnZW5EaXJlY3RpdmVzIChlbCkge1xuICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG4gIGlmICghZGlycykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG4gIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICB2YXIgZ2VuID0gcGxhdGZvcm1EaXJlY3RpdmVzJDFbZGlyLm5hbWVdIHx8IGJhc2VEaXJlY3RpdmVzW2Rpci5uYW1lXTtcbiAgICBpZiAoZ2VuKSB7XG4gICAgICAvLyBjb21waWxlLXRpbWUgZGlyZWN0aXZlIHRoYXQgbWFuaXB1bGF0ZXMgQVNULlxuICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCB3YXJuJDIpO1xuICAgIH1cbiAgICBpZiAobmVlZFJ1bnRpbWUpIHtcbiAgICAgIGhhc1J1bnRpbWUgPSB0cnVlO1xuICAgICAgcmVzICs9IFwie25hbWU6XFxcIlwiICsgKGRpci5uYW1lKSArIFwiXFxcIixyYXdOYW1lOlxcXCJcIiArIChkaXIucmF3TmFtZSkgKyBcIlxcXCJcIiArIChkaXIudmFsdWUgPyAoXCIsdmFsdWU6KFwiICsgKGRpci52YWx1ZSkgKyBcIiksZXhwcmVzc2lvbjpcIiArIChKU09OLnN0cmluZ2lmeShkaXIudmFsdWUpKSkgOiAnJykgKyAoZGlyLmFyZyA/IChcIixhcmc6XFxcIlwiICsgKGRpci5hcmcpICsgXCJcXFwiXCIpIDogJycpICsgKGRpci5tb2RpZmllcnMgPyAoXCIsbW9kaWZpZXJzOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyBcIn0sXCI7XG4gICAgfVxuICB9XG4gIGlmIChoYXNSdW50aW1lKSB7XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnXSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwpIHtcbiAgdmFyIGFzdCA9IGVsLmNoaWxkcmVuWzBdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAoXG4gICAgZWwuY2hpbGRyZW4ubGVuZ3RoID4gMSB8fCBhc3QudHlwZSAhPT0gMVxuICApKSB7XG4gICAgd2FybiQyKCdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nKTtcbiAgfVxuICBpZiAoYXN0LnR5cGUgPT09IDEpIHtcbiAgICB2YXIgaW5saW5lUmVuZGVyRm5zID0gZ2VuZXJhdGUoYXN0LCBjdXJyZW50T3B0aW9ucyk7XG4gICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoc2xvdHMpIHtcbiAgcmV0dXJuIChcInNjb3BlZFNsb3RzOntcIiArIChPYmplY3Qua2V5cyhzbG90cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGdlblNjb3BlZFNsb3Qoa2V5LCBzbG90c1trZXldKTsgfSkuam9pbignLCcpKSArIFwifVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChrZXksIGVsKSB7XG4gIHJldHVybiBrZXkgKyBcIjpmdW5jdGlvbihcIiArIChTdHJpbmcoZWwuYXR0cnNNYXAuc2NvcGUpKSArIFwiKXtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICA/IGdlbkNoaWxkcmVuKGVsKSB8fCAndm9pZCAwJ1xuICAgICAgOiBnZW5FbGVtZW50KGVsKSkgKyBcIn1cIlxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoZWwsIGNoZWNrU2tpcCkge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBlbCQxLmZvciAmJlxuICAgICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnKSB7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCQxKVxuICAgIH1cbiAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbik7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZ2VuTm9kZSkuam9pbignLCcpKSArIFwiXVwiICsgKGNoZWNrU2tpcFxuICAgICAgICA/IG5vcm1hbGl6YXRpb25UeXBlID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUpIDogJydcbiAgICAgICAgOiAnJykpXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChjaGlsZHJlbikge1xuICB2YXIgcmVzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbWF5YmVDb21wb25lbnQoYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG4gIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gbWF5YmVDb21wb25lbnQgKGVsKSB7XG4gIHJldHVybiAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnJDEoZWwudGFnKVxufVxuXG5mdW5jdGlvbiBnZW5Ob2RlIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCkge1xuICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCk7XG4gIHZhciByZXMgPSBcIl90KFwiICsgc2xvdE5hbWUgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJyk7XG4gIHZhciBhdHRycyA9IGVsLmF0dHJzICYmIChcIntcIiArIChlbC5hdHRycy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuICgoY2FtZWxpemUoYS5uYW1lKSkgKyBcIjpcIiArIChhLnZhbHVlKSk7IH0pLmpvaW4oJywnKSkgKyBcIn1cIik7XG4gIHZhciBiaW5kJCQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICBpZiAoKGF0dHJzIHx8IGJpbmQkJDEpICYmICFjaGlsZHJlbikge1xuICAgIHJlcyArPSBcIixudWxsXCI7XG4gIH1cbiAgaWYgKGF0dHJzKSB7XG4gICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gIH1cbiAgaWYgKGJpbmQkJDEpIHtcbiAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZCQkMTtcbiAgfVxuICByZXR1cm4gcmVzICsgJyknXG59XG5cbi8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbmZ1bmN0aW9uIGdlbkNvbXBvbmVudCAoY29tcG9uZW50TmFtZSwgZWwpIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHRydWUpO1xuICByZXR1cm4gKFwiX2MoXCIgKyBjb21wb25lbnROYW1lICsgXCIsXCIgKyAoZ2VuRGF0YShlbCkpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblByb3BzIChwcm9wcykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHJlcyArPSBcIlxcXCJcIiArIChwcm9wLm5hbWUpICsgXCJcXFwiOlwiICsgKHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKSkgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKVxufVxuXG4vLyAjMzg5NSwgIzQyNjhcbmZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkge1xuICByZXR1cm4gdGV4dFxuICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKVxuICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBDb21waWxlIGEgdGVtcGxhdGUuXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUkMSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gb3BlcmF0b3JzIGxpa2UgdHlwZW9mLCBpbnN0YW5jZW9mIGFuZCBpbiBhcmUgYWxsb3dlZFxudmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xuICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbikuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG4vLyBjaGVjayB2YWxpZCBpZGVudGlmaWVyIGZvciB2LWZvclxudmFyIGlkZW50UkUgPSAvW0EtWmEtel8kXVtcXHckXSovO1xuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0KSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgaWYgKGFzdCkge1xuICAgIGNoZWNrTm9kZShhc3QsIGVycm9ycyk7XG4gIH1cbiAgcmV0dXJuIGVycm9yc1xufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIGVycm9ycykge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmF0dHJzTWFwW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIGVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgZXJyb3JzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgZXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCBlcnJvcnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCBlcnJvcnMpIHtcbiAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZm9yIHx8ICcnLCB0ZXh0LCBlcnJvcnMpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywgJ3YtZm9yIGFsaWFzJywgdGV4dCwgZXJyb3JzKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCBlcnJvcnMpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjIsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIGVycm9ycyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSWRlbnRpZmllciAoaWRlbnQsIHR5cGUsIHRleHQsIGVycm9ycykge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJyAmJiAhaWRlbnRSRS50ZXN0KGlkZW50KSkge1xuICAgIGVycm9ycy5wdXNoKChcIi0gaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArIHRleHQpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgZXJyb3JzKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKChcInJldHVybiBcIiArIGV4cCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGtleXdvcmRNYXRjaCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICBlcnJvcnMucHVzaChcbiAgICAgICAgXCItIGF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbiBcIiArIHRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9ycy5wdXNoKChcIi0gaW52YWxpZCBleHByZXNzaW9uOiBcIiArIHRleHQpKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RhdGljQ2xhc3MpIHtcbiAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgd2FybihcbiAgICAgICAgXCJjbGFzcz1cXFwiXCIgKyBzdGF0aWNDbGFzcyArIFwiXFxcIjogXCIgK1xuICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgY2xhc3M9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpjbGFzcz1cInZhbFwiPi4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICBlbC5zdGF0aWNDbGFzcyA9IEpTT04uc3RyaW5naWZ5KHN0YXRpY0NsYXNzKTtcbiAgfVxuICB2YXIgY2xhc3NCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdjbGFzcycsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChjbGFzc0JpbmRpbmcpIHtcbiAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcbiAgICBkYXRhICs9IFwic3RhdGljQ2xhc3M6XCIgKyAoZWwuc3RhdGljQ2xhc3MpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJjbGFzczpcIiArIChlbC5jbGFzc0JpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIGtsYXNzJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljQ2xhc3MnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQxXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY1N0eWxlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3N0eWxlJyk7XG4gIGlmIChzdGF0aWNTdHlsZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgZXhwcmVzc2lvbiA9IHBhcnNlVGV4dChzdGF0aWNTdHlsZSwgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICAgIGlmIChleHByZXNzaW9uKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJzdHlsZT1cXFwiXCIgKyBzdGF0aWNTdHlsZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgc3R5bGU9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpzdHlsZT1cInZhbFwiPi4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLnN0YXRpY1N0eWxlID0gSlNPTi5zdHJpbmdpZnkocGFyc2VTdHlsZVRleHQoc3RhdGljU3R5bGUpKTtcbiAgfVxuXG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDIgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOihcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIpLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQyXG59O1xuXG52YXIgbW9kdWxlcyQxID0gW1xuICBrbGFzcyQxLFxuICBzdHlsZSQxXG5dO1xuXG4vKiAgKi9cblxudmFyIHdhcm4kMztcblxuZnVuY3Rpb24gbW9kZWwkMSAoXG4gIGVsLFxuICBkaXIsXG4gIF93YXJuXG4pIHtcbiAgd2FybiQzID0gX3dhcm47XG4gIHZhciB2YWx1ZSA9IGRpci52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnM7XG4gIHZhciB0YWcgPSBlbC50YWc7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgZHluYW1pY1R5cGUgPSBlbC5hdHRyc01hcFsndi1iaW5kOnR5cGUnXSB8fCBlbC5hdHRyc01hcFsnOnR5cGUnXTtcbiAgICBpZiAodGFnID09PSAnaW5wdXQnICYmIGR5bmFtaWNUeXBlKSB7XG4gICAgICB3YXJuJDMoXG4gICAgICAgIFwiPGlucHV0IDp0eXBlPVxcXCJcIiArIGR5bmFtaWNUeXBlICsgXCJcXFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OlxcblwiICtcbiAgICAgICAgXCJ2LW1vZGVsIGRvZXMgbm90IHN1cHBvcnQgZHluYW1pYyBpbnB1dCB0eXBlcy4gVXNlIHYtaWYgYnJhbmNoZXMgaW5zdGVhZC5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICBnZW5TZWxlY3QoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgZ2VuQ2hlY2tib3hNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICBnZW5SYWRpb01vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIHtcbiAgICBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9XG4gIC8vIGVuc3VyZSBydW50aW1lIGRpcmVjdGl2ZSBtZXRhZGF0YVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZW5DaGVja2JveE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGVsLmF0dHJzTWFwLmNoZWNrZWQgIT0gbnVsbCkge1xuICAgIHdhcm4kMyhcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGNoZWNrZWQ+OlxcblwiICtcbiAgICAgIFwiaW5saW5lIGNoZWNrZWQgYXR0cmlidXRlcyB3aWxsIGJlIGlnbm9yZWQgd2hlbiB1c2luZyB2LW1vZGVsLiBcIiArXG4gICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICApO1xuICB9XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhciB0cnVlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0cnVlLXZhbHVlJykgfHwgJ3RydWUnO1xuICB2YXIgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgIFwiQXJyYXkuaXNBcnJheShcIiArIHZhbHVlICsgXCIpXCIgK1xuICAgICAgXCI/X2koXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpPi0xXCIgKyAoXG4gICAgICAgIHRydWVWYWx1ZUJpbmRpbmcgPT09ICd0cnVlJ1xuICAgICAgICAgID8gKFwiOihcIiArIHZhbHVlICsgXCIpXCIpXG4gICAgICAgICAgOiAoXCI6X3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKVwiKVxuICAgICAgKVxuICApO1xuICBhZGRIYW5kbGVyKGVsLCAnY2xpY2snLFxuICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAnJCRlbD0kZXZlbnQudGFyZ2V0LCcgK1xuICAgICAgICBcIiQkYz0kJGVsLmNoZWNrZWQ/KFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKTooXCIgKyBmYWxzZVZhbHVlQmluZGluZyArIFwiKTtcIiArXG4gICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICBcInZhciAkJHY9XCIgKyAobnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmcpICsgXCIsXCIgK1xuICAgICAgICAgICckJGk9X2koJCRhLCQkdik7JyArXG4gICAgICBcImlmKCQkYyl7JCRpPDAmJihcIiArIHZhbHVlICsgXCI9JCRhLmNvbmNhdCgkJHYpKX1cIiArXG4gICAgICBcImVsc2V7JCRpPi0xJiYoXCIgKyB2YWx1ZSArIFwiPSQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKX1cIiArXG4gICAgXCJ9ZWxzZXtcIiArIHZhbHVlICsgXCI9JCRjfVwiLFxuICAgIG51bGwsIHRydWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuUmFkaW9Nb2RlbCAoXG4gICAgZWwsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBlbC5hdHRyc01hcC5jaGVja2VkICE9IG51bGwpIHtcbiAgICB3YXJuJDMoXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjaGVja2VkPjpcXG5cIiArXG4gICAgICBcImlubGluZSBjaGVja2VkIGF0dHJpYnV0ZXMgd2lsbCBiZSBpZ25vcmVkIHdoZW4gdXNpbmcgdi1tb2RlbC4gXCIgK1xuICAgICAgJ0RlY2xhcmUgaW5pdGlhbCB2YWx1ZXMgaW4gdGhlIGNvbXBvbmVudFxcJ3MgZGF0YSBvcHRpb24gaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YWx1ZUJpbmRpbmcgPSBudW1iZXIgPyAoXCJfbihcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSA6IHZhbHVlQmluZGluZztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLCAoXCJfcShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2xpY2snLCBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVCaW5kaW5nKSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZWwudGFnID09PSAnaW5wdXQnICYmIGVsLmF0dHJzTWFwLnZhbHVlKSB7XG4gICAgICB3YXJuJDMoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHZhbHVlPVxcXCJcIiArIChlbC5hdHRyc01hcC52YWx1ZSkgKyBcIlxcXCI+OlxcblwiICtcbiAgICAgICAgJ2lubGluZSB2YWx1ZSBhdHRyaWJ1dGVzIHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuICAgICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbC50YWcgPT09ICd0ZXh0YXJlYScgJiYgZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB3YXJuJDMoXG4gICAgICAgIFwiPHRleHRhcmVhIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OlxcblwiICtcbiAgICAgICAgJ2lubGluZSBjb250ZW50IGluc2lkZSA8dGV4dGFyZWE+IHdpbGwgYmUgaWdub3JlZCB3aGVuIHVzaW5nIHYtbW9kZWwuICcgK1xuICAgICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbGF6eSA9IHJlZi5sYXp5O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgdmFyIGV2ZW50ID0gbGF6eSB8fCAoaXNJRSAmJiB0eXBlID09PSAncmFuZ2UnKSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgdmFyIG5lZWRDb21wb3NpdGlvbkd1YXJkID0gIWxhenkgJiYgdHlwZSAhPT0gJ3JhbmdlJztcbiAgdmFyIGlzTmF0aXZlID0gZWwudGFnID09PSAnaW5wdXQnIHx8IGVsLnRhZyA9PT0gJ3RleHRhcmVhJztcblxuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gaXNOYXRpdmVcbiAgICA/IChcIiRldmVudC50YXJnZXQudmFsdWVcIiArICh0cmltID8gJy50cmltKCknIDogJycpKVxuICAgIDogdHJpbSA/IFwiKHR5cGVvZiAkZXZlbnQgPT09ICdzdHJpbmcnID8gJGV2ZW50LnRyaW0oKSA6ICRldmVudClcIiA6IFwiJGV2ZW50XCI7XG4gIHZhbHVlRXhwcmVzc2lvbiA9IG51bWJlciB8fCB0eXBlID09PSAnbnVtYmVyJ1xuICAgID8gKFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIilcbiAgICA6IHZhbHVlRXhwcmVzc2lvbjtcblxuICB2YXIgY29kZSA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuICBpZiAoaXNOYXRpdmUgJiYgbmVlZENvbXBvc2l0aW9uR3VhcmQpIHtcbiAgICBjb2RlID0gXCJpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47XCIgKyBjb2RlO1xuICB9XG5cbiAgLy8gaW5wdXRzIHdpdGggdHlwZT1cImZpbGVcIiBhcmUgcmVhZCBvbmx5IGFuZCBzZXR0aW5nIHRoZSBpbnB1dCdzXG4gIC8vIHZhbHVlIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICB0eXBlID09PSAnZmlsZScpIHtcbiAgICB3YXJuJDMoXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB0eXBlPVxcXCJmaWxlXFxcIj46XFxuXCIgK1xuICAgICAgXCJGaWxlIGlucHV0cyBhcmUgcmVhZCBvbmx5LiBVc2UgYSB2LW9uOmNoYW5nZSBsaXN0ZW5lciBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuXG4gIGFkZFByb3AoZWwsICd2YWx1ZScsIGlzTmF0aXZlID8gKFwiX3MoXCIgKyB2YWx1ZSArIFwiKVwiKSA6IChcIihcIiArIHZhbHVlICsgXCIpXCIpKTtcbiAgYWRkSGFuZGxlcihlbCwgZXZlbnQsIGNvZGUsIG51bGwsIHRydWUpO1xuICBpZiAodHJpbSB8fCBudW1iZXIgfHwgdHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICBhZGRIYW5kbGVyKGVsLCAnYmx1cicsICckZm9yY2VVcGRhdGUoKScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlblNlbGVjdCAoXG4gICAgZWwsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBlbC5jaGlsZHJlbi5zb21lKGNoZWNrT3B0aW9uV2FybmluZyk7XG4gIH1cblxuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciBhc3NpZ25tZW50ID0gXCJBcnJheS5wcm90b3R5cGUuZmlsdGVyXCIgK1xuICAgIFwiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSlcIiArXG4gICAgXCIubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcXFwiX3ZhbHVlXFxcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO1wiICtcbiAgICBcInJldHVybiBcIiArIChudW1iZXIgPyAnX24odmFsKScgOiAndmFsJykgKyBcIn0pXCIgK1xuICAgIChlbC5hdHRyc01hcC5tdWx0aXBsZSA9PSBudWxsID8gJ1swXScgOiAnJyk7XG5cbiAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tPcHRpb25XYXJuaW5nIChvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi50eXBlID09PSAxICYmXG4gICAgb3B0aW9uLnRhZyA9PT0gJ29wdGlvbicgJiZcbiAgICBvcHRpb24uYXR0cnNNYXAuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgIHdhcm4kMyhcbiAgICAgIFwiPHNlbGVjdCB2LW1vZGVsPVxcXCJcIiArIChvcHRpb24ucGFyZW50LmF0dHJzTWFwWyd2LW1vZGVsJ10pICsgXCJcXFwiPjpcXG5cIiArXG4gICAgICAnaW5saW5lIHNlbGVjdGVkIGF0dHJpYnV0ZXMgb24gPG9wdGlvbj4gd2lsbCBiZSBpZ25vcmVkIHdoZW4gdXNpbmcgdi1tb2RlbC4gJyArXG4gICAgICAnRGVjbGFyZSBpbml0aWFsIHZhbHVlcyBpbiB0aGUgY29tcG9uZW50XFwncyBkYXRhIG9wdGlvbiBpbnN0ZWFkLidcbiAgICApO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlICh2YWx1ZSwgYXNzaWdubWVudCkge1xuICB2YXIgbW9kZWxScyA9IHBhcnNlTW9kZWwodmFsdWUpO1xuICBpZiAobW9kZWxScy5pZHggPT09IG51bGwpIHtcbiAgICByZXR1cm4gKHZhbHVlICsgXCI9XCIgKyBhc3NpZ25tZW50KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInZhciAkJGV4cCA9IFwiICsgKG1vZGVsUnMuZXhwKSArIFwiLCAkJGlkeCA9IFwiICsgKG1vZGVsUnMuaWR4KSArIFwiO1wiICtcbiAgICAgIFwiaWYgKCFBcnJheS5pc0FycmF5KCQkZXhwKSl7XCIgK1xuICAgICAgICB2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudCArIFwifVwiICtcbiAgICAgIFwiZWxzZXskJGV4cC5zcGxpY2UoJCRpZHgsIDEsIFwiICsgYXNzaWdubWVudCArIFwiKX1cIlxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0ZXh0IChlbCwgZGlyKSB7XG4gIGlmIChkaXIudmFsdWUpIHtcbiAgICBhZGRQcm9wKGVsLCAndGV4dENvbnRlbnQnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIikpO1xuICB9XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbCQxLFxuICB0ZXh0OiB0ZXh0LFxuICBodG1sOiBodG1sXG59O1xuXG4vKiAgKi9cblxudmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxudmFyIGJhc2VPcHRpb25zID0ge1xuICBleHBlY3RIVE1MOiB0cnVlLFxuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKSxcbiAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyQxLFxuICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBpc1ByZVRhZzogaXNQcmVUYWdcbn07XG5cbmZ1bmN0aW9uIGNvbXBpbGUkJDEgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zXG4gICAgPyBleHRlbmQoZXh0ZW5kKHt9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpXG4gICAgOiBiYXNlT3B0aW9ucztcbiAgcmV0dXJuIGNvbXBpbGUkMSh0ZW1wbGF0ZSwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnMsXG4gIHZtXG4pIHtcbiAgdmFyIF93YXJuID0gKG9wdGlvbnMgJiYgb3B0aW9ucy53YXJuKSB8fCB3YXJuO1xuICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUudG9TdHJpbmcoKS5tYXRjaCgvdW5zYWZlLWV2YWx8Q1NQLykpIHtcbiAgICAgICAgX3dhcm4oXG4gICAgICAgICAgJ0l0IHNlZW1zIHlvdSBhcmUgdXNpbmcgdGhlIHN0YW5kYWxvbmUgYnVpbGQgb2YgVnVlLmpzIGluIGFuICcgK1xuICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAnVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGNhbm5vdCB3b3JrIGluIHRoaXMgZW52aXJvbm1lbnQuIENvbnNpZGVyICcgK1xuICAgICAgICAgICdyZWxheGluZyB0aGUgcG9saWN5IHRvIGFsbG93IHVuc2FmZS1ldmFsIG9yIHByZS1jb21waWxpbmcgeW91ciAnICtcbiAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhciBrZXkgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgID8gU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVycykgKyB0ZW1wbGF0ZVxuICAgIDogdGVtcGxhdGU7XG4gIGlmIChjYWNoZVtrZXldKSB7XG4gICAgcmV0dXJuIGNhY2hlW2tleV1cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBjb21waWxlZCA9IGNvbXBpbGUkJDEodGVtcGxhdGUsIG9wdGlvbnMpO1xuICByZXMucmVuZGVyID0gbWFrZUZ1bmN0aW9uKGNvbXBpbGVkLnJlbmRlcik7XG4gIHZhciBsID0gY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zLmxlbmd0aDtcbiAgcmVzLnN0YXRpY1JlbmRlckZucyA9IG5ldyBBcnJheShsKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICByZXMuc3RhdGljUmVuZGVyRm5zW2ldID0gbWFrZUZ1bmN0aW9uKGNvbXBpbGVkLnN0YXRpY1JlbmRlckZuc1tpXSk7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocmVzLnJlbmRlciA9PT0gbm9vcCB8fCByZXMuc3RhdGljUmVuZGVyRm5zLnNvbWUoZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbiA9PT0gbm9vcDsgfSkpIHtcbiAgICAgIF93YXJuKFxuICAgICAgICBcImZhaWxlZCB0byBjb21waWxlIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgZGV0ZWN0RXJyb3JzKGNvbXBpbGVkLmFzdCkuam9pbignXFxuJykgK1xuICAgICAgICAnXFxuXFxuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbn1cblxuZnVuY3Rpb24gbWFrZUZ1bmN0aW9uIChjb2RlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihjb2RlKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGlkVG9UZW1wbGF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIGVsID0gcXVlcnkoaWQpO1xuICByZXR1cm4gZWwgJiYgZWwuaW5uZXJIVE1MXG59KTtcblxudmFyIG1vdW50ID0gVnVlJDMucHJvdG90eXBlLiRtb3VudDtcblZ1ZSQzLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIHF1ZXJ5KGVsKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5IHx8IGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkRvIG5vdCBtb3VudCBWdWUgdG8gPGh0bWw+IG9yIDxib2R5PiAtIG1vdW50IHRvIG5vcm1hbCBlbGVtZW50cyBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAvLyByZXNvbHZlIHRlbXBsYXRlL2VsIGFuZCBjb252ZXJ0IHRvIHJlbmRlciBmdW5jdGlvblxuICBpZiAoIW9wdGlvbnMucmVuZGVyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZTtcbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgIHRlbXBsYXRlID0gaWRUb1RlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIChcIlRlbXBsYXRlIGVsZW1lbnQgbm90IGZvdW5kIG9yIGlzIGVtcHR5OiBcIiArIChvcHRpb25zLnRlbXBsYXRlKSksXG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRlbXBsYXRlLm5vZGVUeXBlKSB7XG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKCdpbnZhbGlkIHRlbXBsYXRlIG9wdGlvbjonICsgdGVtcGxhdGUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbCkge1xuICAgICAgdGVtcGxhdGUgPSBnZXRPdXRlckhUTUwoZWwpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnModGVtcGxhdGUsIHtcbiAgICAgICAgd2Fybjogd2FybixcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IHNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgICBkZWxpbWl0ZXJzOiBvcHRpb25zLmRlbGltaXRlcnNcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyO1xuICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb3VudC5jYWxsKHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vKipcbiAqIEdldCBvdXRlckhUTUwgb2YgZWxlbWVudHMsIHRha2luZyBjYXJlXG4gKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MIChlbCkge1xuICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTFxuICB9IGVsc2Uge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtcbiAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTFxuICB9XG59XG5cblZ1ZSQzLmNvbXBpbGUgPSBjb21waWxlVG9GdW5jdGlvbnM7XG5cbm1vZHVsZS5leHBvcnRzID0gVnVlJDM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Z1ZS9kaXN0L3Z1ZS5jb21tb24uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/* styles */\n__webpack_require__(16)\n\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(5),\n  /* template */\n  __webpack_require__(14),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/Users/constantine/WebstormProjects/v-scroll-list/src/app.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] app.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-a3a542e0\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-a3a542e0\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnZ1ZT8zNTY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBLHNCQUF3Szs7QUFFeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBNEY7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGlEQUFpRCxJQUFJO0FBQ3BJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogc3R5bGVzICovXG5yZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyP3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYTNhNTQyZTBcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vYXBwLnZ1ZVwiKVxuXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vYXBwLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1hM2E1NDJlMFxcXCJ9IS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC52dWVcIiksXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogY3NzTW9kdWxlcyAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIi9Vc2Vycy9jb25zdGFudGluZS9XZWJzdG9ybVByb2plY3RzL3Ytc2Nyb2xsLWxpc3Qvc3JjL2FwcC52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleSAhPT0gXCJfX2VzTW9kdWxlXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBhcHAudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LWEzYTU0MmUwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtYTNhNTQyZTBcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _scrollList = __webpack_require__(12);\n\nvar _scrollList2 = _interopRequireDefault(_scrollList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar i = 1000; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexports.default = {\n    components: {\n        'scroll-list': _scrollList2.default\n    },\n    data: function data() {\n        return {\n            listData: new Array(100).fill(i)\n        };\n    },\n\n    methods: {\n        onRefresh: function onRefresh(done) {\n            setTimeout(done, 2000);\n        },\n        onInfinite: function onInfinite(done) {\n            var _this = this;\n\n            setTimeout(function () {\n                _this.listData = _this.listData.concat(new Array(10).fill(i));\n            }, 2000);\n            done();\n        }\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBwLnZ1ZT8zMjlkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQWNBOzs7Ozs7QUFDQSxRQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBSUE7QUFGQTswQkFHQTs7MENBR0E7QUFGQTtBQUdBOzs7NENBRUE7NkJBQ0E7QUFDQTs7QUFDQTs7bUNBQ0E7MEVBQ0E7ZUFDQTtBQUNBO0FBRUE7QUFWQTtBQVRBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gICAgPHNjcm9sbC1saXN0IDpvblJlZnJlc2g9XCJvblJlZnJlc2hcIiA6b25JbmZpbml0ZT1cIm9uSW5maW5pdGVcIj5cbiAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpIHYtZm9yPVwiaXRlbSBpbiBsaXN0RGF0YVwiPnt7aXRlbX19PC9saT5cbiAgICAgICAgPC91bD5cbiAgICA8L3Njcm9sbC1saXN0PlxuPC90ZW1wbGF0ZT5cbjxzdHlsZT5cbiAgICBib2R5LHVse1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuPC9zdHlsZT5cbjxzY3JpcHQ+XG4gICAgaW1wb3J0IFNjcm9sbGVyIGZyb20gJy4vc2Nyb2xsLWxpc3QudnVlJztcbiAgICBsZXQgaSA9IDEwMDA7XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgICBjb21wb25lbnRzOntcbiAgICAgICAgICAgICdzY3JvbGwtbGlzdCc6U2Nyb2xsZXJcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YSgpe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsaXN0RGF0YTpuZXcgQXJyYXkoMTAwKS5maWxsKGkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6e1xuICAgICAgICAgICAgb25SZWZyZXNoKGRvbmUpe1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZG9uZSwgMjAwMCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25JbmZpbml0ZShkb25lKXtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YSA9IHRoaXMubGlzdERhdGEuY29uY2F0KG5ldyBBcnJheSgxMCkuZmlsbChpKSk7XG4gICAgICAgICAgICAgICAgfSwyMDAwKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBhcHAudnVlPzZlY2JhMGIzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * PULL_DOWN:   normal state of Refresh Layer\n * PULL_UP:     when Refresh Layer is hold and unreleased\n * REFRESHING:  when Refresh Layer is released\n * @type {string}\n */\nvar PULL_UP = 'PULL_UP',\n    PULL_DOWN = 'PULL_DOWN',\n    REFRESHING = 'REFRESHING';\nexports.default = {\n    props: {\n        offset: {\n            type: Number,\n            default: 44\n        },\n        onRefresh: {\n            type: Function,\n            default: undefined,\n            required: false\n        },\n        onInfinite: {\n            type: Function,\n            default: undefined,\n            required: false\n        }\n    },\n    data: function data() {\n        return {\n            top: 0,\n            state: PULL_DOWN,\n            starY: 0,\n            touching: false,\n            infiniteLoading: false\n        };\n    },\n\n    computed: {\n        mapStateToClass: function mapStateToClass() {\n            return {\n                'pull-down': this.state === PULL_DOWN,\n                'pull-up': this.state === PULL_UP,\n                'refreshing': this.state === REFRESHING,\n                'touching': this.touching\n            };\n        },\n        translateStyle: function translateStyle() {\n            return {\n                transform: 'translate3d(0,' + this.top + 'px,0)',\n                '-webkit-transform': 'translate3d(0,' + this.top + 'px,0)'\n            };\n        }\n    },\n    methods: {\n        touchStart: function touchStart(evt) {\n            this.startY = evt.targetTouches[0].pageY;\n            this.startScroll = this.$el.scrollTop || 0;\n            this.touching = true;\n        },\n        touchMove: function touchMove(evt) {\n            var diff = evt.targetTouches[0].pageY - this.startY - this.startScroll;\n            if (diff > 0) evt.preventDefault();\n            //缓冲效果\n            this.top = Math.pow(diff, 0.75) + (this.state === REFRESHING ? this.offset : 0);\n            if (this.state === REFRESHING) return;\n            if (this.top >= this.offset) {\n                this.state = PULL_UP;\n            } else {\n                this.state = PULL_DOWN;\n            }\n        },\n        touchEnd: function touchEnd(evt) {\n            this.touching = false;\n            if (this.state === REFRESHING) {\n                this.top = this.offset;\n                return;\n            }\n            if (this.top >= this.offset) {\n                this.refresh();\n            } else {\n                this.state = PULL_DOWN;\n                this.top = 0;\n            }\n        },\n        refresh: function refresh() {\n            this.state = REFRESHING;\n            this.top = this.offset;\n            this.onRefresh(this.refreshDone);\n        },\n        refreshDone: function refreshDone() {\n            this.state = PULL_DOWN;\n            this.top = 0;\n        },\n        infinite: function infinite() {\n            this.infiniteLoading = true;\n            this.onInfinite(this.infiniteDone);\n        },\n        infiniteDone: function infiniteDone() {\n            this.infiniteLoading = false;\n        },\n        onScroll: function onScroll(evt) {\n            var outerHeight = this.$el.clientHeight;\n            var innerHeight = this.$el.querySelector('.scroll-inner').clientHeight;\n            var scrollTop = this.$el.scrollTop;\n            var refreshLayerHeight = this.onRefresh ? this.$el.querySelector('.refresh-layer').clientHeight : 0;\n            var infiniteLayerHeight = this.$el.querySelector('.infinite-layer').clientHeight;\n            var bottom = innerHeight - outerHeight - scrollTop - refreshLayerHeight;\n            console.log(outerHeight, innerHeight, scrollTop, refreshLayerHeight, infiniteLayerHeight);\n            if (bottom < infiniteLayerHeight) this.infinite();\n        }\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while (len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n    return '/';\n};\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () {\n    return 0;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb2Nlc3MvYnJvd3Nlci5qcz84MmU0Il0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZSIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjYWxsIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwicXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJsZW5ndGgiLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwiaSIsInB1c2giLCJJdGVtIiwiYXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJiaW5kaW5nIiwibmFtZSIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxJQUFJQSxVQUFVQyxPQUFPQyxPQUFQLEdBQWlCLEVBQS9COztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUlDLGdCQUFKO0FBQ0EsSUFBSUMsa0JBQUo7O0FBRUEsU0FBU0MsZ0JBQVQsR0FBNEI7QUFDeEIsVUFBTSxJQUFJQyxLQUFKLENBQVUsaUNBQVYsQ0FBTjtBQUNIO0FBQ0QsU0FBU0MsbUJBQVQsR0FBZ0M7QUFDNUIsVUFBTSxJQUFJRCxLQUFKLENBQVUsbUNBQVYs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bnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles(parentId, list) {\n  var styles = [];\n  var newStyles = {};\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = item[0];\n    var css = item[1];\n    var media = item[2];\n    var sourceMap = item[3];\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    };\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] });\n    } else {\n      newStyles[id].parts.push(part);\n    }\n  }\n  return styles;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcz9lNmFjIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0VG9TdHlsZXMiLCJwYXJlbnRJZCIsImxpc3QiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJpIiwibGVuZ3RoIiwiaXRlbSIsImlkIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJwYXJ0IiwicHVzaCIsInBhcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBSUFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUF1QkMsUUFBdkIsRUFBaUNDLElBQWpDLEVBQXVDO0FBQ3RELE1BQUlDLFNBQVMsRUFBYjtBQUNBLE1BQUlDLFlBQVksRUFBaEI7QUFDQSxPQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUgsS0FBS0ksTUFBekIsRUFBaUNELEdBQWpDLEVBQXNDO0FBQ3BDLFFBQUlFLE9BQU9MLEtBQUtHLENBQUwsQ0FBWDtBQUNBLFFBQUlHLEtBQUtELEtBQUssQ0FBTCxDQUFUO0FBQ0EsUUFBSUUsTUFBTUYsS0FBSyxDQUFMLENBQVY7QUFDQSxRQUFJRyxRQUFRSCxLQUFLLENBQUwsQ0FBWjtBQUNBLFFBQUlJLFlBQVlKLEtBQUssQ0FBTCxDQUFoQjtBQUNBLFFBQUlLLE9BQU87QUFDVEosVUFBSVAsV0FBVyxHQUFYLEdBQWlCSSxDQURaO0FBRVRJLFdBQUtBLEdBRkk7QUFHVEMsYUFBT0EsS0FIRTtBQUlUQyxpQkFBV0E7QUFKRixLQUFYO0FBTUEsUUFBSSxDQUFDUCxVQUFVSSxFQUFWLENBQUwsRUFBb0I7QUFDbEJMLGFBQU9VLElBQVAsQ0FBWVQsVUFBVUksRUFBVixJQUFnQixFQUFFQSxJQUFJQSxFQUFOLEVBQVVNLE9BQU8sQ0FBQ0YsSUFBRCxDQUFqQixFQUE1QjtBQUNELEtBRkQsTUFFTztBQUNMUixnQkFBVUksRUFBVixFQUFjTSxLQUFkLENBQW9CRCxJQUFwQixDQUF5QkQsSUFBekI7QUFDRDtBQUNGO0FBQ0QsU0FBT1QsTUFBUDtBQUNELENBdEJEIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsQ0FBSjs7QUFFQTtBQUNBQSxJQUFLLFlBQVc7QUFDZixRQUFPLElBQVA7QUFDQSxDQUZHLEVBQUo7O0FBSUEsSUFBSTtBQUNIO0FBQ0FBLEtBQUlBLEtBQUtDLFNBQVMsYUFBVCxHQUFMLElBQWtDLENBQUMsR0FBRUMsSUFBSCxFQUFTLE1BQVQsQ0FBdEM7QUFDQSxDQUhELENBR0UsT0FBTUMsQ0FBTixFQUFTO0FBQ1Y7QUFDQSxLQUFHLFFBQU9DLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBckIsRUFDQ0osSUFBSUksTUFBSjtBQUNEOztBQUVEO0FBQ0E7QUFDQTs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQk4sQ0FBakIiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.scroll-list .refresh-layer, .scroll-list .infinite-layer {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.scroll-list {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  overflow: auto;\\n}\\n.scroll-list .scroll-inner {\\n    position: absolute;\\n    left: 0;\\n    top: -2.2rem;\\n    width: 100%;\\n    transition-duration: 300ms;\\n}\\n.scroll-list .scroll-inner .loader {\\n      display: inline-block;\\n      width: 1.2rem;\\n      height: 1.2rem;\\n      transform-origin: 50%;\\n      animation: loader-spinning 1s infinite linear;\\n}\\n.scroll-list .scroll-inner .loader:after {\\n        display: block;\\n        width: 100%;\\n        height: 100%;\\n        content: \\\"\\\";\\n        background-image: url(\\\"data:image/svg+xml;charset=utf-8,<svg viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><defs><line id='l' x1='60' x2='60' y1='7' y2='27' stroke='#6c6c6c' stroke-width='11' stroke-linecap='round'/></defs><g><use xlink:href='#l' opacity='.27'/><use xlink:href='#l' opacity='.27' transform='rotate(30 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(60 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(90 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(120 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(150 60,60)'/><use xlink:href='#l' opacity='.37' transform='rotate(180 60,60)'/><use xlink:href='#l' opacity='.46' transform='rotate(210 60,60)'/><use xlink:href='#l' opacity='.56' transform='rotate(240 60,60)'/><use xlink:href='#l' opacity='.66' transform='rotate(270 60,60)'/><use xlink:href='#l' opacity='.75' transform='rotate(300 60,60)'/><use xlink:href='#l' opacity='.85' transform='rotate(330 60,60)'/></g></svg>\\\");\\n        background-repeat: no-repeat;\\n        background-position: 50%;\\n        background-size: 100%;\\n}\\n.scroll-list .refresh-layer {\\n    height: 2.2rem;\\n    line-height: 2.2rem;\\n}\\n.scroll-list .refresh-layer .text-down,\\n    .scroll-list .refresh-layer .text-up,\\n    .scroll-list .refresh-layer .text-refresh {\\n      font-size: 1.2rem;\\n      display: none;\\n      width: 100%;\\n      text-align: center;\\n}\\n.scroll-list .refresh-layer .refresh-arrow {\\n      display: inline-block;\\n      width: 1.2rem;\\n      height: 1.2rem;\\n      transform-origin: 50%;\\n}\\n.scroll-list .refresh-layer .refresh-arrow:after {\\n        content: '';\\n        display: block;\\n        width: 100%;\\n        height: 100%;\\n        background-image: url(\\\"data:image/svg+xml;charset=utf-8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 26 40'><polygon points='9,22 9,0 17,0 17,22 26,22 13.5,40 0,22' fill='#8c8c8c'/></svg>\\\");\\n        background-repeat: no-repeat;\\n        background-position: 50%;\\n        background-size: 100%;\\n}\\n.scroll-list .infinite-layer {\\n    height: 2.2rem;\\n    line-height: 2.2rem;\\n}\\n.scroll-list .infinite-layer .loader {\\n      margin-right: 0.5rem;\\n}\\n.scroll-list:not(.refreshing) .refresh-layer .loader {\\n    visibility: hidden;\\n}\\n.scroll-list.refreshing .refresh-layer .text-refresh {\\n    display: block;\\n}\\n.scroll-list.refreshing .refresh-layer .refresh-arrow {\\n    visibility: hidden;\\n    transition-duration: 0ms;\\n}\\n.scroll-list.refreshing .refresh-layer .loader {\\n    visibility: visible;\\n}\\n.scroll-list.pull-up .refresh-layer .text-up {\\n    display: block;\\n    padding-left: 0.5rem;\\n}\\n.scroll-list.pull-up .refresh-layer .refresh-arrow {\\n    transform: rotate(180deg);\\n}\\n.scroll-list.pull-down .refresh-layer .text-down {\\n    display: block;\\n}\\n@keyframes loader-spinning {\\nfrom {\\n    transform: rotate(0deg);\\n}\\nto {\\n    transform: rotate(720deg);\\n}\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/scroll-list.vue\"],\"names\":[],\"mappings\":\";AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,wBAAwB;CAAE;AAE5B;EACE,mBAAmB;EACnB,OAAO;EACP,UAAU;EACV,QAAQ;EACR,SAAS;EACT,eAAe;CAAE;AACjB;IACE,mBAAmB;IACnB,QAAQ;IACR,aAAa;IACb,YAAY;IACZ,2BAA2B;CAAE;AAC7B;MACE,sBAAsB;MACtB,cAAc;MACd,eAAe;MACf,sBAAsB;MACtB,8CAA8C;CAAE;AAChD;QACE,eAAe;QACf,YAAY;QACZ,aAAa;QACb,YAAY;QACZ,4hCAA4hC;QAC5hC,6BAA6B;QAC7B,yBAAyB;QACzB,sBAAsB;CAAE;AAC9B;IACE,eAAe;IACf,oBAAoB;CAAE;AACtB;;;MAGE,kBAAkB;MAClB,cAAc;MACd,YAAY;MACZ,mBAAmB;CAAE;AACvB;MACE,sBAAsB;MACtB,cAAc;MACd,eAAe;MACf,sBAAsB;CAAE;AACxB;QACE,YAAY;QACZ,eAAe;QACf,YAAY;QACZ,aAAa;QACb,sMAAsM;QACtM,6BAA6B;QAC7B,yBAAyB;QACzB,sBAAsB;CAAE;AAC9B;IACE,eAAe;IACf,oBAAoB;CAAE;AACtB;MACE,qBAAqB;CAAE;AAC3B;IACE,mBAAmB;CAAE;AACvB;IACE,eAAe;CAAE;AACnB;IACE,mBAAmB;IACnB,yBAAyB;CAAE;AAC7B;IACE,oBAAoB;CAAE;AACxB;IACE,eAAe;IACf,qBAAqB;CAAE;AACzB;IACE,0BAA0B;CAAE;AAC9B;IACE,eAAe;CAAE;AAErB;AACE;IACE,wBAAwB;CAAE;AAC5B;IACE,0BAA0B;CAAE;CAAE\",\"file\":\"scroll-list.vue\",\"sourcesContent\":[\".scroll-list .refresh-layer, .scroll-list .infinite-layer {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center; }\\n\\n.scroll-list {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  overflow: auto; }\\n  .scroll-list .scroll-inner {\\n    position: absolute;\\n    left: 0;\\n    top: -2.2rem;\\n    width: 100%;\\n    transition-duration: 300ms; }\\n    .scroll-list .scroll-inner .loader {\\n      display: inline-block;\\n      width: 1.2rem;\\n      height: 1.2rem;\\n      transform-origin: 50%;\\n      animation: loader-spinning 1s infinite linear; }\\n      .scroll-list .scroll-inner .loader:after {\\n        display: block;\\n        width: 100%;\\n        height: 100%;\\n        content: \\\"\\\";\\n        background-image: url(\\\"data:image/svg+xml;charset=utf-8,<svg viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><defs><line id='l' x1='60' x2='60' y1='7' y2='27' stroke='#6c6c6c' stroke-width='11' stroke-linecap='round'/></defs><g><use xlink:href='#l' opacity='.27'/><use xlink:href='#l' opacity='.27' transform='rotate(30 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(60 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(90 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(120 60,60)'/><use xlink:href='#l' opacity='.27' transform='rotate(150 60,60)'/><use xlink:href='#l' opacity='.37' transform='rotate(180 60,60)'/><use xlink:href='#l' opacity='.46' transform='rotate(210 60,60)'/><use xlink:href='#l' opacity='.56' transform='rotate(240 60,60)'/><use xlink:href='#l' opacity='.66' transform='rotate(270 60,60)'/><use xlink:href='#l' opacity='.75' transform='rotate(300 60,60)'/><use xlink:href='#l' opacity='.85' transform='rotate(330 60,60)'/></g></svg>\\\");\\n        background-repeat: no-repeat;\\n        background-position: 50%;\\n        background-size: 100%; }\\n  .scroll-list .refresh-layer {\\n    height: 2.2rem;\\n    line-height: 2.2rem; }\\n    .scroll-list .refresh-layer .text-down,\\n    .scroll-list .refresh-layer .text-up,\\n    .scroll-list .refresh-layer .text-refresh {\\n      font-size: 1.2rem;\\n      display: none;\\n      width: 100%;\\n      text-align: center; }\\n    .scroll-list .refresh-layer .refresh-arrow {\\n      display: inline-block;\\n      width: 1.2rem;\\n      height: 1.2rem;\\n      transform-origin: 50%; }\\n      .scroll-list .refresh-layer .refresh-arrow:after {\\n        content: '';\\n        display: block;\\n        width: 100%;\\n        height: 100%;\\n        background-image: url(\\\"data:image/svg+xml;charset=utf-8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 26 40'><polygon points='9,22 9,0 17,0 17,22 26,22 13.5,40 0,22' fill='#8c8c8c'/></svg>\\\");\\n        background-repeat: no-repeat;\\n        background-position: 50%;\\n        background-size: 100%; }\\n  .scroll-list .infinite-layer {\\n    height: 2.2rem;\\n    line-height: 2.2rem; }\\n    .scroll-list .infinite-layer .loader {\\n      margin-right: 0.5rem; }\\n  .scroll-list:not(.refreshing) .refresh-layer .loader {\\n    visibility: hidden; }\\n  .scroll-list.refreshing .refresh-layer .text-refresh {\\n    display: block; }\\n  .scroll-list.refreshing .refresh-layer .refresh-arrow {\\n    visibility: hidden;\\n    transition-duration: 0ms; }\\n  .scroll-list.refreshing .refresh-layer .loader {\\n    visibility: visible; }\\n  .scroll-list.pull-up .refresh-layer .text-up {\\n    display: block;\\n    padding-left: 0.5rem; }\\n  .scroll-list.pull-up .refresh-layer .refresh-arrow {\\n    transform: rotate(180deg); }\\n  .scroll-list.pull-down .refresh-layer .text-down {\\n    display: block; }\\n\\n@keyframes loader-spinning {\\n  from {\\n    transform: rotate(0deg); }\\n  to {\\n    transform: rotate(720deg); } }\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(0)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\nbody,ul{\\n    margin: 0;\\n    padding: 0;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/app.vue?6ecba0b3\"],\"names\":[],\"mappings\":\";AAQA;IACA,UAAA;IACA,WAAA;CACA\",\"file\":\"app.vue\",\"sourcesContent\":[\"<template>\\n    <scroll-list :onRefresh=\\\"onRefresh\\\" :onInfinite=\\\"onInfinite\\\">\\n        <ul>\\n            <li v-for=\\\"item in listData\\\">{{item}}</li>\\n        </ul>\\n    </scroll-list>\\n</template>\\n<style>\\n    body,ul{\\n        margin: 0;\\n        padding: 0;\\n    }\\n</style>\\n<script>\\n    import Scroller from './scroll-list.vue';\\n    let i = 1000;\\n    export default {\\n        components:{\\n            'scroll-list':Scroller\\n        },\\n        data(){\\n            return {\\n                listData:new Array(100).fill(i)\\n            }\\n        },\\n        methods:{\\n            onRefresh(done){\\n                setTimeout(done, 2000);\\n            },\\n            onInfinite(done){\\n                setTimeout(() => {\\n                    this.listData = this.listData.concat(new Array(10).fill(i));\\n                },2000);\\n                done();\\n            }\\n        }\\n    }\\n</script>\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnZ1ZT9lZTc5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsbUNBQW9DLGdCQUFnQixpQkFBaUIsR0FBRyxVQUFVLDBFQUEwRSxLQUFLLFVBQVUsVUFBVSx3TEFBd0wsTUFBTSw0RUFBNEUsb0JBQW9CLHFCQUFxQixPQUFPLG1FQUFtRSxtQkFBbUIsc0JBQXNCLHNCQUFzQiwrQ0FBK0Msa0JBQWtCLHNCQUFzQixnRUFBZ0UsV0FBVyxvQkFBb0IsOEJBQThCLHlDQUF5QyxlQUFlLGdDQUFnQyxvQ0FBb0Msa0ZBQWtGLG1CQUFtQixPQUFPLHlCQUF5QixlQUFlLFdBQVcsT0FBTywwQ0FBMEM7O0FBRWpwQyIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuYm9keSx1bHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiLy4vc3JjL2FwcC52dWU/NmVjYmEwYjNcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQVFBO0lBQ0EsVUFBQTtJQUNBLFdBQUE7Q0FDQVwiLFwiZmlsZVwiOlwiYXBwLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxzY3JvbGwtbGlzdCA6b25SZWZyZXNoPVxcXCJvblJlZnJlc2hcXFwiIDpvbkluZmluaXRlPVxcXCJvbkluZmluaXRlXFxcIj5cXG4gICAgICAgIDx1bD5cXG4gICAgICAgICAgICA8bGkgdi1mb3I9XFxcIml0ZW0gaW4gbGlzdERhdGFcXFwiPnt7aXRlbX19PC9saT5cXG4gICAgICAgIDwvdWw+XFxuICAgIDwvc2Nyb2xsLWxpc3Q+XFxuPC90ZW1wbGF0ZT5cXG48c3R5bGU+XFxuICAgIGJvZHksdWx7XFxuICAgICAgICBtYXJnaW46IDA7XFxuICAgICAgICBwYWRkaW5nOiAwO1xcbiAgICB9XFxuPC9zdHlsZT5cXG48c2NyaXB0PlxcbiAgICBpbXBvcnQgU2Nyb2xsZXIgZnJvbSAnLi9zY3JvbGwtbGlzdC52dWUnO1xcbiAgICBsZXQgaSA9IDEwMDA7XFxuICAgIGV4cG9ydCBkZWZhdWx0IHtcXG4gICAgICAgIGNvbXBvbmVudHM6e1xcbiAgICAgICAgICAgICdzY3JvbGwtbGlzdCc6U2Nyb2xsZXJcXG4gICAgICAgIH0sXFxuICAgICAgICBkYXRhKCl7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgbGlzdERhdGE6bmV3IEFycmF5KDEwMCkuZmlsbChpKVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICBtZXRob2RzOntcXG4gICAgICAgICAgICBvblJlZnJlc2goZG9uZSl7XFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZG9uZSwgMjAwMCk7XFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBvbkluZmluaXRlKGRvbmUpe1xcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdERhdGEgPSB0aGlzLmxpc3REYXRhLmNvbmNhdChuZXcgQXJyYXkoMTApLmZpbGwoaSkpO1xcbiAgICAgICAgICAgICAgICB9LDIwMDApO1xcbiAgICAgICAgICAgICAgICBkb25lKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuPC9zY3JpcHQ+XFxuXCJdLFwic291cmNlUm9vdFwiOlwid2VicGFjazovL1wifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP3tcImlkXCI6XCJkYXRhLXYtYTNhNTQyZTBcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/* styles */\n__webpack_require__(15)\n\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(6),\n  /* template */\n  __webpack_require__(13),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/Users/constantine/WebstormProjects/v-scroll-list/src/scroll-list.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] scroll-list.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-473e8ae6\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-473e8ae6\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nyb2xsLWxpc3QudnVlP2E4NjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0Esc0JBQXdLOztBQUV4SztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUE0RjtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsaURBQWlELElBQUk7QUFDcEksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogc3R5bGVzICovXG5yZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyP3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDczZThhZTZcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFzYXNzLWxvYWRlciEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vc2Nyb2xsLWxpc3QudnVlXCIpXG5cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9zY3JvbGwtbGlzdC52dWVcIiksXG4gIC8qIHRlbXBsYXRlICovXG4gIHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDczZThhZTZcXFwifSEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zY3JvbGwtbGlzdC52dWVcIiksXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogY3NzTW9kdWxlcyAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIi9Vc2Vycy9jb25zdGFudGluZS9XZWJzdG9ybVByb2plY3RzL3Ytc2Nyb2xsLWxpc3Qvc3JjL3Njcm9sbC1saXN0LnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIHNjcm9sbC1saXN0LnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi00NzNlOGFlNlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTQ3M2U4YWU2XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zY3JvbGwtbGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"scroll-list\",\n    class: _vm.mapStateToClass,\n    on: {\n      \"touchstart\": function($event) {\n        _vm.touchStart($event)\n      },\n      \"touchmove\": function($event) {\n        _vm.touchMove($event)\n      },\n      \"touchend\": function($event) {\n        _vm.touchEnd($event)\n      },\n      \"scroll\": function($event) {\n        (_vm.onInfinite || _vm.infiniteLoading) ? _vm.onScroll($event): undefined\n      }\n    }\n  }, [_c('div', {\n    staticClass: \"scroll-inner\",\n    style: (_vm.translateStyle)\n  }, [(!!_vm.onRefresh) ? _c('div', {\n    staticClass: \"refresh-layer\"\n  }, [_vm._t(\"refresh\", [_vm._m(0), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _vm._m(2)])], 2) : _vm._e(), _vm._v(\" \"), _vm._t(\"default\"), _vm._v(\" \"), _c('div', {\n    staticClass: \"infinite-layer\"\n  }, [_vm._t(\"infinite\", [_vm._m(3)])], 2)], 2)])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"text-down\"\n  }, [_c('span', {\n    staticClass: \"refresh-arrow\"\n  }), _vm._v(\"Pull Down to Refresh\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"text-up\"\n  }, [_c('span', {\n    staticClass: \"refresh-arrow\"\n  }), _vm._v(\"Release to Refresh\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"text-refresh\"\n  }, [_c('span', {\n    staticClass: \"loader\"\n  }), _vm._v(\"Refreshing...\")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('span', {\n    staticClass: \"loader\"\n  }), _vm._v(\"Loading...\")])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-473e8ae6\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nyb2xsLWxpc3QudnVlPzY4OGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0gsQ0FBQywrQkFBK0IsYUFBYSwwQkFBMEI7QUFDdkU7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSCxDQUFDLGFBQWEsYUFBYSwwQkFBMEI7QUFDckQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSCxDQUFDLGFBQWEsYUFBYSwwQkFBMEI7QUFDckQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSCxDQUFDLGFBQWEsYUFBYSwwQkFBMEI7QUFDckQ7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJzY3JvbGwtbGlzdFwiLFxuICAgIGNsYXNzOiBfdm0ubWFwU3RhdGVUb0NsYXNzLFxuICAgIG9uOiB7XG4gICAgICBcInRvdWNoc3RhcnRcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIF92bS50b3VjaFN0YXJ0KCRldmVudClcbiAgICAgIH0sXG4gICAgICBcInRvdWNobW92ZVwiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLnRvdWNoTW92ZSgkZXZlbnQpXG4gICAgICB9LFxuICAgICAgXCJ0b3VjaGVuZFwiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLnRvdWNoRW5kKCRldmVudClcbiAgICAgIH0sXG4gICAgICBcInNjcm9sbFwiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgKF92bS5vbkluZmluaXRlIHx8IF92bS5pbmZpbml0ZUxvYWRpbmcpID8gX3ZtLm9uU2Nyb2xsKCRldmVudCk6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwic2Nyb2xsLWlubmVyXCIsXG4gICAgc3R5bGU6IChfdm0udHJhbnNsYXRlU3R5bGUpXG4gIH0sIFsoISFfdm0ub25SZWZyZXNoKSA/IF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicmVmcmVzaC1sYXllclwiXG4gIH0sIFtfdm0uX3QoXCJyZWZyZXNoXCIsIFtfdm0uX20oMCksIF92bS5fdihcIiBcIiksIF92bS5fbSgxKSwgX3ZtLl92KFwiIFwiKSwgX3ZtLl9tKDIpXSldLCAyKSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCBfdm0uX3QoXCJkZWZhdWx0XCIpLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImluZmluaXRlLWxheWVyXCJcbiAgfSwgW192bS5fdChcImluZmluaXRlXCIsIFtfdm0uX20oMyldKV0sIDIpXSwgMildKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwidGV4dC1kb3duXCJcbiAgfSwgW19jKCdzcGFuJywge1xuICAgIHN0YXRpY0NsYXNzOiBcInJlZnJlc2gtYXJyb3dcIlxuICB9KSwgX3ZtLl92KFwiUHVsbCBEb3duIHRvIFJlZnJlc2hcIildKVxufSxmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwidGV4dC11cFwiXG4gIH0sIFtfYygnc3BhbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJyZWZyZXNoLWFycm93XCJcbiAgfSksIF92bS5fdihcIlJlbGVhc2UgdG8gUmVmcmVzaFwiKV0pXG59LGZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJ0ZXh0LXJlZnJlc2hcIlxuICB9LCBbX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibG9hZGVyXCJcbiAgfSksIF92bS5fdihcIlJlZnJlc2hpbmcuLi5cIildKVxufSxmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCBbX2MoJ3NwYW4nLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibG9hZGVyXCJcbiAgfSksIF92bS5fdihcIkxvYWRpbmcuLi5cIildKVxufV19XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTQ3M2U4YWU2XCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyLmpzP3tcImlkXCI6XCJkYXRhLXYtNDczZThhZTZcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9zY3JvbGwtbGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('scroll-list', {\n    attrs: {\n      \"onRefresh\": _vm.onRefresh,\n      \"onInfinite\": _vm.onInfinite\n    }\n  }, [_c('ul', _vm._l((_vm.listData), function(item) {\n    return _c('li', [_vm._v(_vm._s(item))])\n  }))])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-a3a542e0\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnZ1ZT8yZGViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ3Njcm9sbC1saXN0Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm9uUmVmcmVzaFwiOiBfdm0ub25SZWZyZXNoLFxuICAgICAgXCJvbkluZmluaXRlXCI6IF92bS5vbkluZmluaXRlXG4gICAgfVxuICB9LCBbX2MoJ3VsJywgX3ZtLl9sKChfdm0ubGlzdERhdGEpLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuIF9jKCdsaScsIFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0pXG4gIH0pKV0pXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LWEzYTU0MmUwXCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyLmpzP3tcImlkXCI6XCJkYXRhLXYtYTNhNTQyZTBcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9hcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(10);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"01f9e57e\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!./../node_modules/css-loader/index.js?sourceMap!./../node_modules/vue-loader/lib/style-rewriter.js?{\\\"id\\\":\\\"data-v-473e8ae6\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!./../node_modules/sass-loader/lib/loader.js!./../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./scroll-list.vue\", function() {\n     var newContent = require(\"!!./../node_modules/css-loader/index.js?sourceMap!./../node_modules/vue-loader/lib/style-rewriter.js?{\\\"id\\\":\\\"data-v-473e8ae6\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!./../node_modules/sass-loader/lib/loader.js!./../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./scroll-list.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nyb2xsLWxpc3QudnVlP2I2MTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxvQ0FBbU07QUFDbk07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRIQUE0SCxzRUFBc0U7QUFDbE0scUlBQXFJLHNFQUFzRTtBQUMzTTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDczZThhZTZcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zY3JvbGwtbGlzdC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiMDFmOWU1N2VcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi00NzNlOGFlNlxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3Njcm9sbC1saXN0LnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz97XFxcImlkXFxcIjpcXFwiZGF0YS12LTQ3M2U4YWU2XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc2Nyb2xsLWxpc3QudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP3tcImlkXCI6XCJkYXRhLXYtNDczZThhZTZcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL3Njcm9sbC1saXN0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(11);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(2)(\"6e50f339\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!./../node_modules/css-loader/index.js?sourceMap!./../node_modules/vue-loader/lib/style-rewriter.js?{\\\"id\\\":\\\"data-v-a3a542e0\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!./../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./app.vue\", function() {\n     var newContent = require(\"!!./../node_modules/css-loader/index.js?sourceMap!./../node_modules/vue-loader/lib/style-rewriter.js?{\\\"id\\\":\\\"data-v-a3a542e0\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!./../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./app.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnZ1ZT82OWRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQW1NO0FBQ25NO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SEFBNEgsc0VBQXNFO0FBQ2xNLHFJQUFxSSxzRUFBc0U7QUFDM007QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz97XFxcImlkXFxcIjpcXFwiZGF0YS12LWEzYTU0MmUwXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL2FwcC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiNmU1MGYzMzlcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1hM2E1NDJlMFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9hcHAudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYTNhNTQyZTBcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vYXBwLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz97XCJpZFwiOlwiZGF0YS12LWEzYTU0MmUwXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9hcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vue = __webpack_require__(3);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _app = __webpack_require__(4);\n\nvar _app2 = _interopRequireDefault(_app);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nnew _vue2.default({\n    el: '#app',\n    components: {\n        App: _app2.default\n    },\n    template: '<App/>'\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbImVsIiwiY29tcG9uZW50cyIsIkFwcCIsInRlbXBsYXRlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLGtCQUFRO0FBQ0pBLFFBQUcsTUFEQztBQUVKQyxnQkFBVztBQUNQQztBQURPLEtBRlA7QUFLSkMsY0FBUztBQUxMLENBQVIiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vYXBwLnZ1ZSc7XG5cbm5ldyBWdWUoe1xuICAgIGVsOicjYXBwJyxcbiAgICBjb21wb25lbnRzOntcbiAgICAgICAgQXBwXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTonPEFwcC8+J1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ]);